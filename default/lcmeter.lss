
lcmeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000016e  00800100  000028ec  00002960  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000028ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b9  0080026e  00002a5a  00002ace  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00002ace  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000004cd  00000000  00000000  00002aee  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001e0f  00000000  00000000  00002fbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000037b  00000000  00000000  00004dca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000147e  00000000  00000000  00005145  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003a0  00000000  00000000  000065c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006ec  00000000  00000000  00006964  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000010b3  00000000  00000000  00007050  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00008103  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__ctors_end>
       4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
       8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
       c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      10:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      14:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      18:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      1c:	0c 94 89 07 	jmp	0xf12	; 0xf12 <__vector_7>
      20:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      24:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      28:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      2c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      30:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      34:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <__vector_13>
      38:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      3c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      40:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      44:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      48:	0c 94 30 07 	jmp	0xe60	; 0xe60 <__vector_18>
      4c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      50:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__vector_20>
      54:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      58:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      5c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      60:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      64:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>

00000068 <LcdCustomChar>:
      68:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      78:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      88:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      98:	03 07 0f 1f 0f 07 03 00 00 1f 1f 1f 1f 1f 1f 00     ................
      a8:	1b 1b 1b 1b 1b 1b 1b 00 18 1c 1e 1f 1e 1c 18 00     ................
      b8:	00 04 04 0e 0e 1f 1f 00 00 1f 1f 0e 0e 04 04 00     ................
	...
      d0:	00 0e 19 15 13 0e 00 00 00 0e 15 15 15 0e 00 00     ................
      e0:	00 0e 13 15 19 0e 00 00 00 0e 11 1f 11 0e 00 00     ................

000000f0 <__c.2519>:
      f0:	48 7a 20 20 20 20 20 20 20 20 00                    Hz        .

000000fb <__c.2514>:
      fb:	7a 65 72 6f 65 64 20 20 20 20 20 20 20 20 20 20     zeroed          
     10b:	20 20 20 20 20 20 0d 00                                   ..

00000113 <__c.2512>:
     113:	20 20 20 20 20 20 20 20 20 20 20 20 20 0d 00                     ..

00000122 <__c.2510>:
     122:	70 46 00                                            pF.

00000125 <__c.2508>:
     125:	6e 46 00                                            nF.

00000128 <__c.2506>:
     128:	75 46 00                                            uF.

0000012b <__c.2504>:
     12b:	6d 46 00                                            mF.

0000012e <__c.2502>:
     12e:	43 78 3a 20 00                                      Cx: .

00000133 <__c.2500>:
     133:	4e 6f 74 20 61 20 63 61 70 61 63 69 74 6f 72 20     Not a capacitor 
     143:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     153:	0d 00                                               ..

00000155 <__c.2498>:
     155:	20 20 20 20 20 20 20 20 20 20 20 20 20 0d 00                     ..

00000164 <__c.2496>:
     164:	6e 48 00                                            nH.

00000167 <__c.2494>:
     167:	75 48 00                                            uH.

0000016a <__c.2492>:
     16a:	6d 48 00                                            mH.

0000016d <__c.2490>:
     16d:	4c 78 3a 20 00                                      Lx: .

00000172 <__c.2488>:
     172:	4e 6f 74 20 61 6e 20 69 6e 64 75 63 74 6f 72 20     Not an inductor 
     182:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     192:	0d 00                                               ..

00000194 <__c.2486>:
     194:	0d 0a 00                                            ...

00000197 <__c.2484>:
     197:	0d 0a 00                                            ...

0000019a <__c.2482>:
     19a:	0d 0a 00                                            ...

0000019d <__c.2477>:
     19d:	0d 0a 00                                            ...

000001a0 <__c.2475>:
     1a0:	0d 0a 00                                            ...

000001a3 <__c.2473>:
     1a3:	0d 0a 68 74 74 70 3a 2f 2f 77 77 77 2e 00           ..http://www..

000001b1 <__c.2317>:
     1b1:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

000001ba <__c.2311>:
     1ba:	1b 5b 3f 32 35 6c 00                                .[?25l.

000001c1 <__c.2309>:
     1c1:	1b 5b 3f 32 35 68 00                                .[?25h.

000001c8 <__c.2303>:
     1c8:	1b 5b 25 64 6d 00                                   .[%dm.

000001ce <__c.2298>:
     1ce:	1b 5b 32 4a 00                                      .[2J.

000001d3 <__c.2293>:
     1d3:	1b 63 00                                            .c.

000001d6 <HexChars>:
     1d6:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF
	...

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	d4 e0       	ldi	r29, 0x04	; 4
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	cd bf       	out	0x3d, r28	; 61

000001f4 <__do_copy_data>:
     1f4:	12 e0       	ldi	r17, 0x02	; 2
     1f6:	a0 e0       	ldi	r26, 0x00	; 0
     1f8:	b1 e0       	ldi	r27, 0x01	; 1
     1fa:	ec ee       	ldi	r30, 0xEC	; 236
     1fc:	f8 e2       	ldi	r31, 0x28	; 40
     1fe:	02 c0       	rjmp	.+4      	; 0x204 <.do_copy_data_start>

00000200 <.do_copy_data_loop>:
     200:	05 90       	lpm	r0, Z+
     202:	0d 92       	st	X+, r0

00000204 <.do_copy_data_start>:
     204:	ae 36       	cpi	r26, 0x6E	; 110
     206:	b1 07       	cpc	r27, r17
     208:	d9 f7       	brne	.-10     	; 0x200 <.do_copy_data_loop>

0000020a <__do_clear_bss>:
     20a:	13 e0       	ldi	r17, 0x03	; 3
     20c:	ae e6       	ldi	r26, 0x6E	; 110
     20e:	b2 e0       	ldi	r27, 0x02	; 2
     210:	01 c0       	rjmp	.+2      	; 0x214 <.do_clear_bss_start>

00000212 <.do_clear_bss_loop>:
     212:	1d 92       	st	X+, r1

00000214 <.do_clear_bss_start>:
     214:	a7 32       	cpi	r26, 0x27	; 39
     216:	b1 07       	cpc	r27, r17
     218:	e1 f7       	brne	.-8      	; 0x212 <.do_clear_bss_loop>
     21a:	0e 94 a2 08 	call	0x1144	; 0x1144 <main>
     21e:	0c 94 74 14 	jmp	0x28e8	; 0x28e8 <_exit>

00000222 <__bad_interrupt>:
     222:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000226 <uartInitBuffers>:
	sei();
}

// create and initialize the uart transmit and receive buffers
void uartInitBuffers(void)
{
     226:	2f b7       	in	r18, 0x3f	; 63
     228:	f8 94       	cli
void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
	// begin critical section
	CRITICAL_SECTION_START;
	// set start pointer of the buffer
	buffer->dataptr = start;
     22a:	83 e7       	ldi	r24, 0x73	; 115
     22c:	92 e0       	ldi	r25, 0x02	; 2
     22e:	90 93 05 03 	sts	0x0305, r25
     232:	80 93 04 03 	sts	0x0304, r24
	buffer->size = size;
     236:	80 e4       	ldi	r24, 0x40	; 64
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	90 93 07 03 	sts	0x0307, r25
     23e:	80 93 06 03 	sts	0x0306, r24
	// initialize index and length
	buffer->dataindex = 0;
     242:	10 92 0b 03 	sts	0x030B, r1
     246:	10 92 0a 03 	sts	0x030A, r1
	buffer->datalength = 0;
     24a:	10 92 09 03 	sts	0x0309, r1
     24e:	10 92 08 03 	sts	0x0308, r1
	// end critical section
	CRITICAL_SECTION_END;
     252:	2f bf       	out	0x3f, r18	; 63
// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
	// begin critical section
	CRITICAL_SECTION_START;
     254:	2f b7       	in	r18, 0x3f	; 63
     256:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
     258:	83 eb       	ldi	r24, 0xB3	; 179
     25a:	92 e0       	ldi	r25, 0x02	; 2
     25c:	90 93 1a 03 	sts	0x031A, r25
     260:	80 93 19 03 	sts	0x0319, r24
	buffer->size = size;
     264:	80 e4       	ldi	r24, 0x40	; 64
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	90 93 1c 03 	sts	0x031C, r25
     26c:	80 93 1b 03 	sts	0x031B, r24
	// initialize index and length
	buffer->dataindex = 0;
     270:	10 92 20 03 	sts	0x0320, r1
     274:	10 92 1f 03 	sts	0x031F, r1
	buffer->datalength = 0;
     278:	10 92 1e 03 	sts	0x031E, r1
     27c:	10 92 1d 03 	sts	0x031D, r1
	// end critical section
	CRITICAL_SECTION_END;
     280:	2f bf       	out	0x3f, r18	; 63
		// initialize the UART receive buffer
		bufferInit(&uartRxBuffer, (u08*) UART_RX_BUFFER_ADDR, UART_RX_BUFFER_SIZE);
		// initialize the UART transmit buffer
		bufferInit(&uartTxBuffer, (u08*) UART_TX_BUFFER_ADDR, UART_TX_BUFFER_SIZE);
	#endif
}
     282:	08 95       	ret

00000284 <uartSetRxHandler>:

// redirects received data to a user function
void uartSetRxHandler(void (*rx_func)(unsigned char c))
{
     284:	90 93 f4 02 	sts	0x02F4, r25
     288:	80 93 f3 02 	sts	0x02F3, r24
	// set the receive interrupt to run the supplied user function
	UartRxFunc = rx_func;
}
     28c:	08 95       	ret

0000028e <uartSetBaudRate>:

// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
     28e:	9b 01       	movw	r18, r22
     290:	ac 01       	movw	r20, r24
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
     292:	60 58       	subi	r22, 0x80	; 128
     294:	7b 47       	sbci	r23, 0x7B	; 123
     296:	81 4e       	sbci	r24, 0xE1	; 225
     298:	9f 4f       	sbci	r25, 0xFF	; 255
     29a:	f3 e0       	ldi	r31, 0x03	; 3
     29c:	66 0f       	add	r22, r22
     29e:	77 1f       	adc	r23, r23
     2a0:	88 1f       	adc	r24, r24
     2a2:	99 1f       	adc	r25, r25
     2a4:	fa 95       	dec	r31
     2a6:	d1 f7       	brne	.-12     	; 0x29c <uartSetBaudRate+0xe>
     2a8:	e4 e0       	ldi	r30, 0x04	; 4
     2aa:	22 0f       	add	r18, r18
     2ac:	33 1f       	adc	r19, r19
     2ae:	44 1f       	adc	r20, r20
     2b0:	55 1f       	adc	r21, r21
     2b2:	ea 95       	dec	r30
     2b4:	d1 f7       	brne	.-12     	; 0x2aa <uartSetBaudRate+0x1c>
     2b6:	0e 94 18 14 	call	0x2830	; 0x2830 <__udivmodsi4>
     2ba:	21 50       	subi	r18, 0x01	; 1
     2bc:	30 40       	sbci	r19, 0x00	; 0
	outb(UBRRL, bauddiv);
     2be:	20 93 c4 00 	sts	0x00C4, r18
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
     2c2:	30 93 c5 00 	sts	0x00C5, r19
	#endif
}
     2c6:	08 95       	ret

000002c8 <uartInit>:
typedef void (*voidFuncPtru08)(unsigned char);
volatile static voidFuncPtru08 UartRxFunc;

// enable and initialize the uart
void uartInit(void)
{
     2c8:	2f b7       	in	r18, 0x3f	; 63
     2ca:	f8 94       	cli
void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
	// begin critical section
	CRITICAL_SECTION_START;
	// set start pointer of the buffer
	buffer->dataptr = start;
     2cc:	83 e7       	ldi	r24, 0x73	; 115
     2ce:	92 e0       	ldi	r25, 0x02	; 2
     2d0:	90 93 05 03 	sts	0x0305, r25
     2d4:	80 93 04 03 	sts	0x0304, r24
	buffer->size = size;
     2d8:	80 e4       	ldi	r24, 0x40	; 64
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	90 93 07 03 	sts	0x0307, r25
     2e0:	80 93 06 03 	sts	0x0306, r24
	// initialize index and length
	buffer->dataindex = 0;
     2e4:	10 92 0b 03 	sts	0x030B, r1
     2e8:	10 92 0a 03 	sts	0x030A, r1
	buffer->datalength = 0;
     2ec:	10 92 09 03 	sts	0x0309, r1
     2f0:	10 92 08 03 	sts	0x0308, r1
	// end critical section
	CRITICAL_SECTION_END;
     2f4:	2f bf       	out	0x3f, r18	; 63
// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
	// begin critical section
	CRITICAL_SECTION_START;
     2f6:	2f b7       	in	r18, 0x3f	; 63
     2f8:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
     2fa:	83 eb       	ldi	r24, 0xB3	; 179
     2fc:	92 e0       	ldi	r25, 0x02	; 2
     2fe:	90 93 1a 03 	sts	0x031A, r25
     302:	80 93 19 03 	sts	0x0319, r24
	buffer->size = size;
     306:	80 e4       	ldi	r24, 0x40	; 64
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	90 93 1c 03 	sts	0x031C, r25
     30e:	80 93 1b 03 	sts	0x031B, r24
	// initialize index and length
	buffer->dataindex = 0;
     312:	10 92 20 03 	sts	0x0320, r1
     316:	10 92 1f 03 	sts	0x031F, r1
	buffer->datalength = 0;
     31a:	10 92 1e 03 	sts	0x031E, r1
     31e:	10 92 1d 03 	sts	0x031D, r1
	// end critical section
	CRITICAL_SECTION_END;
     322:	2f bf       	out	0x3f, r18	; 63
	// initialize the buffers
	uartInitBuffers();
	// initialize user receive handler
	UartRxFunc = 0;
     324:	10 92 f4 02 	sts	0x02F4, r1
     328:	10 92 f3 02 	sts	0x02F3, r1

	// enable RxD/TxD and interrupts
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
     32c:	88 ed       	ldi	r24, 0xD8	; 216
     32e:	80 93 c1 00 	sts	0x00C1, r24

	// set default baud rate
	uartSetBaudRate(UART_DEFAULT_BAUD_RATE);  
     332:	60 e8       	ldi	r22, 0x80	; 128
     334:	75 e2       	ldi	r23, 0x25	; 37
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	0e 94 47 01 	call	0x28e	; 0x28e <uartSetBaudRate>
	// initialize states
	uartReadyTx = TRUE;
     33e:	8f ef       	ldi	r24, 0xFF	; 255
     340:	80 93 f7 02 	sts	0x02F7, r24
	uartBufferedTx = FALSE;
     344:	10 92 14 03 	sts	0x0314, r1
	// clear overflow count
	uartRxOverflow = 0;
     348:	10 92 22 03 	sts	0x0322, r1
     34c:	10 92 21 03 	sts	0x0321, r1
	// enable interrupts
	sei();
     350:	78 94       	sei
}
     352:	08 95       	ret

00000354 <uartGetRxBuffer>:
	#endif
}

// returns the receive buffer structure 
cBuffer* uartGetRxBuffer(void)
{
     354:	84 e0       	ldi	r24, 0x04	; 4
     356:	93 e0       	ldi	r25, 0x03	; 3
     358:	08 95       	ret

0000035a <uartGetTxBuffer>:
	return &uartRxBuffer;
}

// returns the transmit buffer structure 
cBuffer* uartGetTxBuffer(void)
{
     35a:	89 e1       	ldi	r24, 0x19	; 25
     35c:	93 e0       	ldi	r25, 0x03	; 3
     35e:	08 95       	ret

00000360 <uartSendByte>:
	return &uartTxBuffer;
}

// transmits a byte over the uart
void uartSendByte(u08 txData)
{
     360:	98 2f       	mov	r25, r24
	// wait for the transmitter to be ready
	while(!uartReadyTx);
     362:	80 91 f7 02 	lds	r24, 0x02F7
     366:	88 23       	and	r24, r24
     368:	e1 f3       	breq	.-8      	; 0x362 <uartSendByte+0x2>
	// send byte
	outb(UDR, txData);
     36a:	90 93 c6 00 	sts	0x00C6, r25
	// set ready state to FALSE
	uartReadyTx = FALSE;
     36e:	10 92 f7 02 	sts	0x02F7, r1
}
     372:	08 95       	ret

00000374 <uartReceiveByte>:
		return -1;
}

// gets a byte (if available) from the uart receive buffer
u08 uartReceiveByte(u08* rxData)
{
     374:	dc 01       	movw	r26, r24
	// make sure we have a receive buffer
	if(uartRxBuffer.size)
     376:	40 91 06 03 	lds	r20, 0x0306
     37a:	50 91 07 03 	lds	r21, 0x0307
     37e:	41 15       	cp	r20, r1
     380:	51 05       	cpc	r21, r1
     382:	61 f1       	breq	.+88     	; 0x3dc <uartReceiveByte+0x68>
	{
		// make sure we have data
		if(uartRxBuffer.datalength)
     384:	20 91 08 03 	lds	r18, 0x0308
     388:	30 91 09 03 	lds	r19, 0x0309
     38c:	21 15       	cp	r18, r1
     38e:	31 05       	cpc	r19, r1
     390:	29 f1       	breq	.+74     	; 0x3dc <uartReceiveByte+0x68>
// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
     392:	6f b7       	in	r22, 0x3f	; 63
     394:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
     396:	80 91 0a 03 	lds	r24, 0x030A
     39a:	90 91 0b 03 	lds	r25, 0x030B
     39e:	e0 91 04 03 	lds	r30, 0x0304
     3a2:	f0 91 05 03 	lds	r31, 0x0305
     3a6:	e8 0f       	add	r30, r24
     3a8:	f9 1f       	adc	r31, r25
     3aa:	e0 81       	ld	r30, Z
		// move index down and decrement length
		buffer->dataindex++;
     3ac:	01 96       	adiw	r24, 0x01	; 1
     3ae:	90 93 0b 03 	sts	0x030B, r25
     3b2:	80 93 0a 03 	sts	0x030A, r24
		if(buffer->dataindex >= buffer->size)
     3b6:	84 17       	cp	r24, r20
     3b8:	95 07       	cpc	r25, r21
     3ba:	30 f0       	brcs	.+12     	; 0x3c8 <uartReceiveByte+0x54>
		{
			buffer->dataindex -= buffer->size;
     3bc:	84 1b       	sub	r24, r20
     3be:	95 0b       	sbc	r25, r21
     3c0:	90 93 0b 03 	sts	0x030B, r25
     3c4:	80 93 0a 03 	sts	0x030A, r24
		}
		buffer->datalength--;
     3c8:	21 50       	subi	r18, 0x01	; 1
     3ca:	30 40       	sbci	r19, 0x00	; 0
     3cc:	30 93 09 03 	sts	0x0309, r19
     3d0:	20 93 08 03 	sts	0x0308, r18
	}
	// end critical section
	CRITICAL_SECTION_END;
     3d4:	6f bf       	out	0x3f, r22	; 63
		{
			// get byte from beginning of buffer
			*rxData = bufferGetFromFront(&uartRxBuffer);
     3d6:	ec 93       	st	X, r30
     3d8:	8f ef       	ldi	r24, 0xFF	; 255
     3da:	08 95       	ret
			return TRUE;
     3dc:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		// no buffer
		return FALSE;
	}
}
     3de:	08 95       	ret

000003e0 <uartGetByte>:
	uartReadyTx = FALSE;
}

// gets a single byte from the uart receive buffer (getchar-style)
int uartGetByte(void)
{
     3e0:	df 93       	push	r29
     3e2:	cf 93       	push	r28
     3e4:	0f 92       	push	r0
     3e6:	cd b7       	in	r28, 0x3d	; 61
     3e8:	de b7       	in	r29, 0x3e	; 62
	u08 c;
	if(uartReceiveByte(&c))
     3ea:	ce 01       	movw	r24, r28
     3ec:	01 96       	adiw	r24, 0x01	; 1
     3ee:	0e 94 ba 01 	call	0x374	; 0x374 <uartReceiveByte>
     3f2:	88 23       	and	r24, r24
     3f4:	19 f4       	brne	.+6      	; 0x3fc <uartGetByte+0x1c>
     3f6:	2f ef       	ldi	r18, 0xFF	; 255
     3f8:	3f ef       	ldi	r19, 0xFF	; 255
     3fa:	03 c0       	rjmp	.+6      	; 0x402 <uartGetByte+0x22>
		return c;
     3fc:	89 81       	ldd	r24, Y+1	; 0x01
     3fe:	28 2f       	mov	r18, r24
     400:	30 e0       	ldi	r19, 0x00	; 0
	else
		return -1;
}
     402:	c9 01       	movw	r24, r18
     404:	0f 90       	pop	r0
     406:	cf 91       	pop	r28
     408:	df 91       	pop	r29
     40a:	08 95       	ret

0000040c <uartFlushReceiveBuffer>:
	}
}

// flush all data out of the receive buffer
void uartFlushReceiveBuffer(void)
{
     40c:	10 92 09 03 	sts	0x0309, r1
     410:	10 92 08 03 	sts	0x0308, r1
	// flush all data from receive buffer
	//bufferFlush(&uartRxBuffer);
	// same effect as above
	uartRxBuffer.datalength = 0;
}
     414:	08 95       	ret

00000416 <uartReceiveBufferIsEmpty>:

// return true if uart receive buffer is empty
u08 uartReceiveBufferIsEmpty(void)
{
     416:	80 91 08 03 	lds	r24, 0x0308
     41a:	90 91 09 03 	lds	r25, 0x0309
     41e:	89 2b       	or	r24, r25
     420:	11 f0       	breq	.+4      	; 0x426 <uartReceiveBufferIsEmpty+0x10>
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	08 95       	ret
     426:	8f ef       	ldi	r24, 0xFF	; 255
	}
	else
	{
		return FALSE;
	}
}
     428:	08 95       	ret

0000042a <uartSendTxBuffer>:
	return bufferAddToEnd(&uartTxBuffer, data);
}

// start transmission of the current uart Tx buffer contents
void uartSendTxBuffer(void)
{
     42a:	8f ef       	ldi	r24, 0xFF	; 255
     42c:	80 93 14 03 	sts	0x0314, r24
// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
     430:	6f b7       	in	r22, 0x3f	; 63
     432:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
     434:	40 91 1d 03 	lds	r20, 0x031D
     438:	50 91 1e 03 	lds	r21, 0x031E
     43c:	41 15       	cp	r20, r1
     43e:	51 05       	cpc	r21, r1
     440:	11 f4       	brne	.+4      	; 0x446 <uartSendTxBuffer+0x1c>
     442:	e0 e0       	ldi	r30, 0x00	; 0
     444:	23 c0       	rjmp	.+70     	; 0x48c <uartSendTxBuffer+0x62>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
     446:	80 91 1f 03 	lds	r24, 0x031F
     44a:	90 91 20 03 	lds	r25, 0x0320
     44e:	e0 91 19 03 	lds	r30, 0x0319
     452:	f0 91 1a 03 	lds	r31, 0x031A
     456:	e8 0f       	add	r30, r24
     458:	f9 1f       	adc	r31, r25
     45a:	e0 81       	ld	r30, Z
		// move index down and decrement length
		buffer->dataindex++;
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	90 93 20 03 	sts	0x0320, r25
     462:	80 93 1f 03 	sts	0x031F, r24
		if(buffer->dataindex >= buffer->size)
     466:	20 91 1b 03 	lds	r18, 0x031B
     46a:	30 91 1c 03 	lds	r19, 0x031C
     46e:	82 17       	cp	r24, r18
     470:	93 07       	cpc	r25, r19
     472:	30 f0       	brcs	.+12     	; 0x480 <uartSendTxBuffer+0x56>
		{
			buffer->dataindex -= buffer->size;
     474:	82 1b       	sub	r24, r18
     476:	93 0b       	sbc	r25, r19
     478:	90 93 20 03 	sts	0x0320, r25
     47c:	80 93 1f 03 	sts	0x031F, r24
		}
		buffer->datalength--;
     480:	41 50       	subi	r20, 0x01	; 1
     482:	50 40       	sbci	r21, 0x00	; 0
     484:	50 93 1e 03 	sts	0x031E, r21
     488:	40 93 1d 03 	sts	0x031D, r20
	}
	// end critical section
	CRITICAL_SECTION_END;
     48c:	6f bf       	out	0x3f, r22	; 63

// transmits a byte over the uart
void uartSendByte(u08 txData)
{
	// wait for the transmitter to be ready
	while(!uartReadyTx);
     48e:	80 91 f7 02 	lds	r24, 0x02F7
     492:	88 23       	and	r24, r24
     494:	e1 f3       	breq	.-8      	; 0x48e <uartSendTxBuffer+0x64>
	// send byte
	outb(UDR, txData);
     496:	e0 93 c6 00 	sts	0x00C6, r30
	// set ready state to FALSE
	uartReadyTx = FALSE;
     49a:	10 92 f7 02 	sts	0x02F7, r1
{
	// turn on buffered transmit
	uartBufferedTx = TRUE;
	// send the first byte to get things going by interrupts
	uartSendByte(bufferGetFromFront(&uartTxBuffer));
}
     49e:	08 95       	ret

000004a0 <__vector_20>:
	}
}
*/
// UART Transmit Complete Interrupt Handler
UART_INTERRUPT_HANDLER(SIG_UART_TRANS)
{
     4a0:	1f 92       	push	r1
     4a2:	0f 92       	push	r0
     4a4:	0f b6       	in	r0, 0x3f	; 63
     4a6:	0f 92       	push	r0
     4a8:	11 24       	eor	r1, r1
     4aa:	2f 93       	push	r18
     4ac:	3f 93       	push	r19
     4ae:	4f 93       	push	r20
     4b0:	5f 93       	push	r21
     4b2:	6f 93       	push	r22
     4b4:	8f 93       	push	r24
     4b6:	9f 93       	push	r25
     4b8:	ef 93       	push	r30
     4ba:	ff 93       	push	r31
	// check if buffered tx is enabled
	if(uartBufferedTx)
     4bc:	80 91 14 03 	lds	r24, 0x0314
     4c0:	88 23       	and	r24, r24
     4c2:	91 f1       	breq	.+100    	; 0x528 <__stack+0x29>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
     4c4:	40 91 1d 03 	lds	r20, 0x031D
     4c8:	50 91 1e 03 	lds	r21, 0x031E
     4cc:	41 15       	cp	r20, r1
     4ce:	51 05       	cpc	r21, r1
     4d0:	49 f1       	breq	.+82     	; 0x524 <__stack+0x25>
// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
     4d2:	6f b7       	in	r22, 0x3f	; 63
     4d4:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
     4d6:	80 91 1f 03 	lds	r24, 0x031F
     4da:	90 91 20 03 	lds	r25, 0x0320
     4de:	e0 91 19 03 	lds	r30, 0x0319
     4e2:	f0 91 1a 03 	lds	r31, 0x031A
     4e6:	e8 0f       	add	r30, r24
     4e8:	f9 1f       	adc	r31, r25
     4ea:	e0 81       	ld	r30, Z
		// move index down and decrement length
		buffer->dataindex++;
     4ec:	01 96       	adiw	r24, 0x01	; 1
     4ee:	90 93 20 03 	sts	0x0320, r25
     4f2:	80 93 1f 03 	sts	0x031F, r24
		if(buffer->dataindex >= buffer->size)
     4f6:	20 91 1b 03 	lds	r18, 0x031B
     4fa:	30 91 1c 03 	lds	r19, 0x031C
     4fe:	82 17       	cp	r24, r18
     500:	93 07       	cpc	r25, r19
     502:	30 f0       	brcs	.+12     	; 0x510 <__stack+0x11>
		{
			buffer->dataindex -= buffer->size;
     504:	82 1b       	sub	r24, r18
     506:	93 0b       	sbc	r25, r19
     508:	90 93 20 03 	sts	0x0320, r25
     50c:	80 93 1f 03 	sts	0x031F, r24
		}
		buffer->datalength--;
     510:	41 50       	subi	r20, 0x01	; 1
     512:	50 40       	sbci	r21, 0x00	; 0
     514:	50 93 1e 03 	sts	0x031E, r21
     518:	40 93 1d 03 	sts	0x031D, r20
	}
	// end critical section
	CRITICAL_SECTION_END;
     51c:	6f bf       	out	0x3f, r22	; 63
		{
			// send byte from top of buffer
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
     51e:	e0 93 c6 00 	sts	0x00C6, r30
     522:	05 c0       	rjmp	.+10     	; 0x52e <__stack+0x2f>
		}
		else
		{
			// no data left
			uartBufferedTx = FALSE;
     524:	10 92 14 03 	sts	0x0314, r1
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
     528:	8f ef       	ldi	r24, 0xFF	; 255
     52a:	80 93 f7 02 	sts	0x02F7, r24
	}
}
     52e:	ff 91       	pop	r31
     530:	ef 91       	pop	r30
     532:	9f 91       	pop	r25
     534:	8f 91       	pop	r24
     536:	6f 91       	pop	r22
     538:	5f 91       	pop	r21
     53a:	4f 91       	pop	r20
     53c:	3f 91       	pop	r19
     53e:	2f 91       	pop	r18
     540:	0f 90       	pop	r0
     542:	0f be       	out	0x3f, r0	; 63
     544:	0f 90       	pop	r0
     546:	1f 90       	pop	r1
     548:	18 95       	reti

0000054a <rprintfInit>:

// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
     54a:	90 93 f6 02 	sts	0x02F6, r25
     54e:	80 93 f5 02 	sts	0x02F5, r24
	rputchar = putchar_func;
}
     552:	08 95       	ret

00000554 <rprintfChar>:

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
     554:	1f 93       	push	r17
     556:	18 2f       	mov	r17, r24
	// do LF -> CR/LF translation
	if(c == '\n')
     558:	8a 30       	cpi	r24, 0x0A	; 10
     55a:	31 f4       	brne	.+12     	; 0x568 <rprintfChar+0x14>
		rputchar('\r');
     55c:	e0 91 f5 02 	lds	r30, 0x02F5
     560:	f0 91 f6 02 	lds	r31, 0x02F6
     564:	8d e0       	ldi	r24, 0x0D	; 13
     566:	09 95       	icall
	// send character
	rputchar(c);
     568:	e0 91 f5 02 	lds	r30, 0x02F5
     56c:	f0 91 f6 02 	lds	r31, 0x02F6
     570:	81 2f       	mov	r24, r17
     572:	09 95       	icall
}
     574:	1f 91       	pop	r17
     576:	08 95       	ret

00000578 <rprintfStr>:

// *** rprintfStr ***
// prints a null-terminated string stored in RAM
void rprintfStr(char str[])
{
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	ec 01       	movw	r28, r24
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;
     57e:	00 97       	sbiw	r24, 0x00	; 0
     580:	21 f4       	brne	.+8      	; 0x58a <rprintfStr+0x12>
     582:	06 c0       	rjmp	.+12     	; 0x590 <rprintfStr+0x18>

	// print the string until a null-terminator
	while (*str)
		rprintfChar(*str++);
     584:	21 96       	adiw	r28, 0x01	; 1
     586:	0e 94 aa 02 	call	0x554	; 0x554 <rprintfChar>
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;

	// print the string until a null-terminator
	while (*str)
     58a:	88 81       	ld	r24, Y
     58c:	88 23       	and	r24, r24
     58e:	d1 f7       	brne	.-12     	; 0x584 <rprintfStr+0xc>
		rprintfChar(*str++);
}
     590:	df 91       	pop	r29
     592:	cf 91       	pop	r28
     594:	08 95       	ret

00000596 <rprintfStrLen>:
// *** rprintfStrLen ***
// prints a section of a string stored in RAM
// begins printing at position indicated by <start>
// prints number of characters indicated by <len>
void rprintfStrLen(char str[], unsigned int start, unsigned int len)
{
     596:	ef 92       	push	r14
     598:	ff 92       	push	r15
     59a:	0f 93       	push	r16
     59c:	1f 93       	push	r17
     59e:	cf 93       	push	r28
     5a0:	df 93       	push	r29
     5a2:	8c 01       	movw	r16, r24
     5a4:	7a 01       	movw	r14, r20
	register int i=0;

	// check to make sure we have a good pointer
	if (!str) return;
     5a6:	00 97       	sbiw	r24, 0x00	; 0
     5a8:	e9 f0       	breq	.+58     	; 0x5e4 <rprintfStrLen+0x4e>
     5aa:	20 e0       	ldi	r18, 0x00	; 0
     5ac:	30 e0       	ldi	r19, 0x00	; 0
	// spin through characters up to requested start
	// keep going as long as there's no null
	while((i++<start) && (*str++));
     5ae:	26 17       	cp	r18, r22
     5b0:	37 07       	cpc	r19, r23
     5b2:	38 f4       	brcc	.+14     	; 0x5c2 <rprintfStrLen+0x2c>
     5b4:	f8 01       	movw	r30, r16
     5b6:	81 91       	ld	r24, Z+
     5b8:	8f 01       	movw	r16, r30
     5ba:	2f 5f       	subi	r18, 0xFF	; 255
     5bc:	3f 4f       	sbci	r19, 0xFF	; 255
     5be:	88 23       	and	r24, r24
     5c0:	b1 f7       	brne	.-20     	; 0x5ae <rprintfStrLen+0x18>
     5c2:	c0 e0       	ldi	r28, 0x00	; 0
     5c4:	d0 e0       	ldi	r29, 0x00	; 0
     5c6:	0b c0       	rjmp	.+22     	; 0x5de <rprintfStrLen+0x48>
	// then print exactly len characters
	for(i=0; i<len; i++)
	{
		// print data out of the string as long as we haven't reached a null yet
		// at the null, start printing spaces
		if(*str)
     5c8:	f8 01       	movw	r30, r16
     5ca:	80 81       	ld	r24, Z
     5cc:	88 23       	and	r24, r24
     5ce:	19 f0       	breq	.+6      	; 0x5d6 <rprintfStrLen+0x40>
			rprintfChar(*str++);
     5d0:	0f 5f       	subi	r16, 0xFF	; 255
     5d2:	1f 4f       	sbci	r17, 0xFF	; 255
     5d4:	01 c0       	rjmp	.+2      	; 0x5d8 <rprintfStrLen+0x42>
		else
			rprintfChar(' ');
     5d6:	80 e2       	ldi	r24, 0x20	; 32
     5d8:	0e 94 aa 02 	call	0x554	; 0x554 <rprintfChar>
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}

	// then print exactly len characters
	for(i=0; i<len; i++)
     5dc:	21 96       	adiw	r28, 0x01	; 1
     5de:	ce 15       	cp	r28, r14
     5e0:	df 05       	cpc	r29, r15
     5e2:	90 f3       	brcs	.-28     	; 0x5c8 <rprintfStrLen+0x32>
			rprintfChar(*str++);
		else
			rprintfChar(' ');
	}

}
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	1f 91       	pop	r17
     5ea:	0f 91       	pop	r16
     5ec:	ff 90       	pop	r15
     5ee:	ef 90       	pop	r14
     5f0:	08 95       	ret

000005f2 <rprintfProgStr>:

// *** rprintfProgStr ***
// prints a null-terminated string stored in program ROM
void rprintfProgStr(const prog_char str[])
{
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	ec 01       	movw	r28, r24
	// print a string stored in program memory
	register char c;

	// check to make sure we have a good pointer
	if (!str) return;
     5f8:	00 97       	sbiw	r24, 0x00	; 0
     5fa:	19 f4       	brne	.+6      	; 0x602 <rprintfProgStr+0x10>
     5fc:	07 c0       	rjmp	.+14     	; 0x60c <rprintfProgStr+0x1a>
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
		rprintfChar(c);
     5fe:	0e 94 aa 02 	call	0x554	; 0x554 <rprintfChar>
     602:	fe 01       	movw	r30, r28

	// check to make sure we have a good pointer
	if (!str) return;
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
     604:	21 96       	adiw	r28, 0x01	; 1
     606:	84 91       	lpm	r24, Z+
     608:	88 23       	and	r24, r24
     60a:	c9 f7       	brne	.-14     	; 0x5fe <rprintfProgStr+0xc>
		rprintfChar(c);
}
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	08 95       	ret

00000612 <rprintfCRLF>:

// *** rprintfCRLF ***
// prints carriage return and line feed
void rprintfCRLF(void)
{
     612:	8a e0       	ldi	r24, 0x0A	; 10
     614:	0e 94 aa 02 	call	0x554	; 0x554 <rprintfChar>
	// print CR/LF
	//rprintfChar('\r');
	// LF -> CR/LF translation built-in to rprintfChar()
	rprintfChar('\n');
}
     618:	08 95       	ret

0000061a <rprintfu04>:

// *** rprintfu04 ***
// prints an unsigned 4-bit number in hex (1 digit)
void rprintfu04(unsigned char data)
{
     61a:	e8 2f       	mov	r30, r24
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	ef 70       	andi	r30, 0x0F	; 15
     620:	f0 70       	andi	r31, 0x00	; 0
     622:	ea 52       	subi	r30, 0x2A	; 42
     624:	fe 4f       	sbci	r31, 0xFE	; 254
     626:	e4 91       	lpm	r30, Z+
     628:	8e 2f       	mov	r24, r30
     62a:	0e 94 aa 02 	call	0x554	; 0x554 <rprintfChar>
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
}
     62e:	08 95       	ret

00000630 <rprintfu08>:

// *** rprintfu08 ***
// prints an unsigned 8-bit number in hex (2 digits)
void rprintfu08(unsigned char data)
{
     630:	1f 93       	push	r17
     632:	18 2f       	mov	r17, r24
	// print 8-bit hex value
	rprintfu04(data>>4);
     634:	82 95       	swap	r24
     636:	8f 70       	andi	r24, 0x0F	; 15
     638:	0e 94 0d 03 	call	0x61a	; 0x61a <rprintfu04>
	rprintfu04(data);
     63c:	81 2f       	mov	r24, r17
     63e:	0e 94 0d 03 	call	0x61a	; 0x61a <rprintfu04>
}
     642:	1f 91       	pop	r17
     644:	08 95       	ret

00000646 <rprintfu16>:

// *** rprintfu16 ***
// prints an unsigned 16-bit number in hex (4 digits)
void rprintfu16(unsigned short data)
{
     646:	1f 93       	push	r17
     648:	18 2f       	mov	r17, r24
	// print 16-bit hex value
	rprintfu08(data>>8);
     64a:	89 2f       	mov	r24, r25
     64c:	0e 94 18 03 	call	0x630	; 0x630 <rprintfu08>
	rprintfu08(data);
     650:	81 2f       	mov	r24, r17
     652:	0e 94 18 03 	call	0x630	; 0x630 <rprintfu08>
}
     656:	1f 91       	pop	r17
     658:	08 95       	ret

0000065a <rprintfu32>:

// *** rprintfu32 ***
// prints an unsigned 32-bit number in hex (8 digits)
void rprintfu32(unsigned long data)
{
     65a:	ef 92       	push	r14
     65c:	ff 92       	push	r15
     65e:	0f 93       	push	r16
     660:	1f 93       	push	r17
     662:	7b 01       	movw	r14, r22
     664:	8c 01       	movw	r16, r24
	// print 32-bit hex value
	rprintfu16(data>>16);
     666:	aa 27       	eor	r26, r26
     668:	bb 27       	eor	r27, r27
     66a:	0e 94 23 03 	call	0x646	; 0x646 <rprintfu16>
	rprintfu16(data);
     66e:	c7 01       	movw	r24, r14
     670:	0e 94 23 03 	call	0x646	; 0x646 <rprintfu16>
}
     674:	1f 91       	pop	r17
     676:	0f 91       	pop	r16
     678:	ff 90       	pop	r15
     67a:	ef 90       	pop	r14
     67c:	08 95       	ret

0000067e <rprintfNum>:
//	Examples:
//	uartPrintfNum(10, 6,  TRUE, ' ',   1234);  -->  " +1234"
//	uartPrintfNum(10, 6, FALSE, '0',   1234);  -->  "001234"
//	uartPrintfNum(16, 6, FALSE, '.', 0x5AA5);  -->  "..5AA5"
void rprintfNum(char base, char numDigits, char isSigned, char padchar, long n)
{
     67e:	2f 92       	push	r2
     680:	3f 92       	push	r3
     682:	4f 92       	push	r4
     684:	5f 92       	push	r5
     686:	6f 92       	push	r6
     688:	7f 92       	push	r7
     68a:	8f 92       	push	r8
     68c:	9f 92       	push	r9
     68e:	af 92       	push	r10
     690:	bf 92       	push	r11
     692:	cf 92       	push	r12
     694:	df 92       	push	r13
     696:	ef 92       	push	r14
     698:	ff 92       	push	r15
     69a:	0f 93       	push	r16
     69c:	1f 93       	push	r17
     69e:	df 93       	push	r29
     6a0:	cf 93       	push	r28
     6a2:	cd b7       	in	r28, 0x3d	; 61
     6a4:	de b7       	in	r29, 0x3e	; 62
     6a6:	a3 97       	sbiw	r28, 0x23	; 35
     6a8:	0f b6       	in	r0, 0x3f	; 63
     6aa:	f8 94       	cli
     6ac:	de bf       	out	0x3e, r29	; 62
     6ae:	0f be       	out	0x3f, r0	; 63
     6b0:	cd bf       	out	0x3d, r28	; 61
     6b2:	6a a3       	std	Y+34, r22	; 0x22
     6b4:	24 2e       	mov	r2, r20
     6b6:	2b a3       	std	Y+35, r18	; 0x23
     6b8:	37 01       	movw	r6, r14
     6ba:	48 01       	movw	r8, r16
	char *p, buf[32];
	unsigned long x;
	unsigned char count;

	// prepare negative number
	if( isSigned && (n < 0) )
     6bc:	44 23       	and	r20, r20
     6be:	51 f0       	breq	.+20     	; 0x6d4 <rprintfNum+0x56>
     6c0:	17 ff       	sbrs	r17, 7
     6c2:	08 c0       	rjmp	.+16     	; 0x6d4 <rprintfNum+0x56>
	{
		x = -n;
     6c4:	ee 24       	eor	r14, r14
     6c6:	ff 24       	eor	r15, r15
     6c8:	87 01       	movw	r16, r14
     6ca:	e6 18       	sub	r14, r6
     6cc:	f7 08       	sbc	r15, r7
     6ce:	08 09       	sbc	r16, r8
     6d0:	19 09       	sbc	r17, r9
     6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <rprintfNum+0x5a>
	}
	else
	{
	 	x = n;
     6d4:	84 01       	movw	r16, r8
     6d6:	73 01       	movw	r14, r6
	}

	// setup little string buffer
	count = (numDigits-1)-(isSigned?1:0);
     6d8:	2a a1       	ldd	r18, Y+34	; 0x22
     6da:	21 50       	subi	r18, 0x01	; 1
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	21 10       	cpse	r2, r1
     6e0:	91 e0       	ldi	r25, 0x01	; 1
     6e2:	29 1b       	sub	r18, r25
     6e4:	29 a3       	std	Y+33, r18	; 0x21
  	p = buf + sizeof (buf);
  	*--p = '\0';
     6e6:	18 a2       	std	Y+32, r1	; 0x20
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
     6e8:	a8 2e       	mov	r10, r24
     6ea:	bb 24       	eor	r11, r11
     6ec:	cc 24       	eor	r12, r12
     6ee:	dd 24       	eor	r13, r13
     6f0:	c8 01       	movw	r24, r16
     6f2:	b7 01       	movw	r22, r14
     6f4:	a6 01       	movw	r20, r12
     6f6:	95 01       	movw	r18, r10
     6f8:	0e 94 18 14 	call	0x2830	; 0x2830 <__udivmodsi4>
     6fc:	fb 01       	movw	r30, r22
     6fe:	ef 70       	andi	r30, 0x0F	; 15
     700:	f0 70       	andi	r31, 0x00	; 0
     702:	ea 52       	subi	r30, 0x2A	; 42
     704:	fe 4f       	sbci	r31, 0xFE	; 254
     706:	64 91       	lpm	r22, Z+
     708:	6f 8f       	std	Y+31, r22	; 0x1f
     70a:	c8 01       	movw	r24, r16
     70c:	b7 01       	movw	r22, r14
     70e:	a6 01       	movw	r20, r12
     710:	95 01       	movw	r18, r10
     712:	0e 94 18 14 	call	0x2830	; 0x2830 <__udivmodsi4>
     716:	c9 01       	movw	r24, r18
     718:	da 01       	movw	r26, r20
     71a:	7c 01       	movw	r14, r24
     71c:	8d 01       	movw	r16, r26
     71e:	be e1       	ldi	r27, 0x1E	; 30
     720:	4b 2e       	mov	r4, r27
     722:	51 2c       	mov	r5, r1
     724:	4c 0e       	add	r4, r28
     726:	5d 1e       	adc	r5, r29
     728:	39 a0       	ldd	r3, Y+33	; 0x21
     72a:	25 c0       	rjmp	.+74     	; 0x776 <rprintfNum+0xf8>
	// calculate remaining digits
	while(count--)
	{
		if(x != 0)
     72c:	e1 14       	cp	r14, r1
     72e:	f1 04       	cpc	r15, r1
     730:	01 05       	cpc	r16, r1
     732:	11 05       	cpc	r17, r1
     734:	c9 f0       	breq	.+50     	; 0x768 <rprintfNum+0xea>
		{
			// calculate next digit
			*--p = hexchar(x%base); x /= base;
     736:	c8 01       	movw	r24, r16
     738:	b7 01       	movw	r22, r14
     73a:	a6 01       	movw	r20, r12
     73c:	95 01       	movw	r18, r10
     73e:	0e 94 18 14 	call	0x2830	; 0x2830 <__udivmodsi4>
     742:	fb 01       	movw	r30, r22
     744:	ef 70       	andi	r30, 0x0F	; 15
     746:	f0 70       	andi	r31, 0x00	; 0
     748:	ea 52       	subi	r30, 0x2A	; 42
     74a:	fe 4f       	sbci	r31, 0xFE	; 254
     74c:	64 91       	lpm	r22, Z+
     74e:	f2 01       	movw	r30, r4
     750:	60 83       	st	Z, r22
     752:	c8 01       	movw	r24, r16
     754:	b7 01       	movw	r22, r14
     756:	a6 01       	movw	r20, r12
     758:	95 01       	movw	r18, r10
     75a:	0e 94 18 14 	call	0x2830	; 0x2830 <__udivmodsi4>
     75e:	c9 01       	movw	r24, r18
     760:	da 01       	movw	r26, r20
     762:	7c 01       	movw	r14, r24
     764:	8d 01       	movw	r16, r26
     766:	03 c0       	rjmp	.+6      	; 0x76e <rprintfNum+0xf0>
		}
		else
		{
			// no more digits left, pad out to desired length
			*--p = padchar;
     768:	2b a1       	ldd	r18, Y+35	; 0x23
     76a:	f2 01       	movw	r30, r4
     76c:	20 83       	st	Z, r18
     76e:	3a 94       	dec	r3
     770:	08 94       	sec
     772:	41 08       	sbc	r4, r1
     774:	51 08       	sbc	r5, r1
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
	// calculate remaining digits
	while(count--)
     776:	33 20       	and	r3, r3
     778:	c9 f6       	brne	.-78     	; 0x72c <rprintfNum+0xae>
     77a:	ce 01       	movw	r24, r28
     77c:	4f 96       	adiw	r24, 0x1f	; 31
     77e:	8c 01       	movw	r16, r24
     780:	e9 a1       	ldd	r30, Y+33	; 0x21
     782:	0e 1b       	sub	r16, r30
     784:	11 09       	sbc	r17, r1
			*--p = padchar;
		}
	}

	// apply signed notation if requested
	if( isSigned )
     786:	22 20       	and	r2, r2
     788:	f1 f0       	breq	.+60     	; 0x7c6 <rprintfNum+0x148>
	{
		if(n < 0)
     78a:	97 fe       	sbrs	r9, 7
     78c:	05 c0       	rjmp	.+10     	; 0x798 <rprintfNum+0x11a>
		{
   			*--p = '-';
     78e:	8d e2       	ldi	r24, 0x2D	; 45
     790:	f8 01       	movw	r30, r16
     792:	82 93       	st	-Z, r24
     794:	8f 01       	movw	r16, r30
     796:	17 c0       	rjmp	.+46     	; 0x7c6 <rprintfNum+0x148>
     798:	c8 01       	movw	r24, r16
     79a:	01 97       	sbiw	r24, 0x01	; 1
		}
		else if(n > 0)
     79c:	61 14       	cp	r6, r1
     79e:	71 04       	cpc	r7, r1
     7a0:	81 04       	cpc	r8, r1
     7a2:	91 04       	cpc	r9, r1
     7a4:	19 f0       	breq	.+6      	; 0x7ac <rprintfNum+0x12e>
		{
	   		*--p = '+';
     7a6:	8c 01       	movw	r16, r24
     7a8:	8b e2       	ldi	r24, 0x2B	; 43
     7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <rprintfNum+0x132>
		}
		else
		{
	   		*--p = ' ';
     7ac:	8c 01       	movw	r16, r24
     7ae:	80 e2       	ldi	r24, 0x20	; 32
     7b0:	f8 01       	movw	r30, r16
     7b2:	80 83       	st	Z, r24
     7b4:	08 c0       	rjmp	.+16     	; 0x7c6 <rprintfNum+0x148>

	// print the string right-justified
	count = numDigits;
	while(count--)
	{
		rprintfChar(*p++);
     7b6:	f8 01       	movw	r30, r16
     7b8:	81 91       	ld	r24, Z+
     7ba:	8f 01       	movw	r16, r30
     7bc:	0e 94 aa 02 	call	0x554	; 0x554 <rprintfChar>
     7c0:	fa a1       	ldd	r31, Y+34	; 0x22
     7c2:	f1 50       	subi	r31, 0x01	; 1
     7c4:	fa a3       	std	Y+34, r31	; 0x22
		}
	}

	// print the string right-justified
	count = numDigits;
	while(count--)
     7c6:	2a a1       	ldd	r18, Y+34	; 0x22
     7c8:	22 23       	and	r18, r18
     7ca:	a9 f7       	brne	.-22     	; 0x7b6 <rprintfNum+0x138>
	{
		rprintfChar(*p++);
	}
}
     7cc:	a3 96       	adiw	r28, 0x23	; 35
     7ce:	0f b6       	in	r0, 0x3f	; 63
     7d0:	f8 94       	cli
     7d2:	de bf       	out	0x3e, r29	; 62
     7d4:	0f be       	out	0x3f, r0	; 63
     7d6:	cd bf       	out	0x3d, r28	; 61
     7d8:	cf 91       	pop	r28
     7da:	df 91       	pop	r29
     7dc:	1f 91       	pop	r17
     7de:	0f 91       	pop	r16
     7e0:	ff 90       	pop	r15
     7e2:	ef 90       	pop	r14
     7e4:	df 90       	pop	r13
     7e6:	cf 90       	pop	r12
     7e8:	bf 90       	pop	r11
     7ea:	af 90       	pop	r10
     7ec:	9f 90       	pop	r9
     7ee:	8f 90       	pop	r8
     7f0:	7f 90       	pop	r7
     7f2:	6f 90       	pop	r6
     7f4:	5f 90       	pop	r5
     7f6:	4f 90       	pop	r4
     7f8:	3f 90       	pop	r3
     7fa:	2f 90       	pop	r2
     7fc:	08 95       	ret

000007fe <rprintfFloat>:

#ifdef RPRINTF_FLOAT
// *** rprintfFloat ***
// floating-point print
void rprintfFloat(char numDigits, double x)
{
     7fe:	4f 92       	push	r4
     800:	5f 92       	push	r5
     802:	6f 92       	push	r6
     804:	7f 92       	push	r7
     806:	8f 92       	push	r8
     808:	9f 92       	push	r9
     80a:	af 92       	push	r10
     80c:	bf 92       	push	r11
     80e:	cf 92       	push	r12
     810:	df 92       	push	r13
     812:	ef 92       	push	r14
     814:	ff 92       	push	r15
     816:	0f 93       	push	r16
     818:	1f 93       	push	r17
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
     81e:	48 2e       	mov	r4, r24
     820:	5a 01       	movw	r10, r20
     822:	6b 01       	movw	r12, r22
	double place = 1.0;
	
	// save sign
	negative = (x<0);
	// convert to absolute value
	x = (x>0)?(x):(-x);
     824:	20 e0       	ldi	r18, 0x00	; 0
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	40 e0       	ldi	r20, 0x00	; 0
     82a:	50 e0       	ldi	r21, 0x00	; 0
     82c:	c6 01       	movw	r24, r12
     82e:	b5 01       	movw	r22, r10
     830:	0e 94 54 10 	call	0x20a8	; 0x20a8 <__gtsf2>
     834:	18 16       	cp	r1, r24
     836:	1c f4       	brge	.+6      	; 0x83e <rprintfFloat+0x40>
     838:	35 01       	movw	r6, r10
     83a:	46 01       	movw	r8, r12
     83c:	06 c0       	rjmp	.+12     	; 0x84a <rprintfFloat+0x4c>
     83e:	35 01       	movw	r6, r10
     840:	46 01       	movw	r8, r12
     842:	97 fa       	bst	r9, 7
     844:	90 94       	com	r9
     846:	97 f8       	bld	r9, 7
     848:	90 94       	com	r9
     84a:	55 24       	eor	r5, r5
     84c:	0f 2e       	mov	r0, r31
     84e:	f0 e0       	ldi	r31, 0x00	; 0
     850:	ef 2e       	mov	r14, r31
     852:	f0 e0       	ldi	r31, 0x00	; 0
     854:	ff 2e       	mov	r15, r31
     856:	f0 e8       	ldi	r31, 0x80	; 128
     858:	0f 2f       	mov	r16, r31
     85a:	ff e3       	ldi	r31, 0x3F	; 63
     85c:	1f 2f       	mov	r17, r31
     85e:	f0 2d       	mov	r31, r0
	
	// find starting digit place
	for(i=0; i<15; i++)
	{
		if((x/place) < 10.0)
     860:	a8 01       	movw	r20, r16
     862:	97 01       	movw	r18, r14
     864:	c4 01       	movw	r24, r8
     866:	b3 01       	movw	r22, r6
     868:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <__divsf3>
     86c:	20 e0       	ldi	r18, 0x00	; 0
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	40 e2       	ldi	r20, 0x20	; 32
     872:	51 e4       	ldi	r21, 0x41	; 65
     874:	0e 94 b4 10 	call	0x2168	; 0x2168 <__ltsf2>
     878:	87 fd       	sbrc	r24, 7
     87a:	0e c0       	rjmp	.+28     	; 0x898 <rprintfFloat+0x9a>
			break;
		else
			place *= 10.0;
     87c:	20 e0       	ldi	r18, 0x00	; 0
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	40 e2       	ldi	r20, 0x20	; 32
     882:	51 e4       	ldi	r21, 0x41	; 65
     884:	c8 01       	movw	r24, r16
     886:	b7 01       	movw	r22, r14
     888:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__mulsf3>
     88c:	7b 01       	movw	r14, r22
     88e:	8c 01       	movw	r16, r24
	negative = (x<0);
	// convert to absolute value
	x = (x>0)?(x):(-x);
	
	// find starting digit place
	for(i=0; i<15; i++)
     890:	53 94       	inc	r5
     892:	8f e0       	ldi	r24, 0x0F	; 15
     894:	58 16       	cp	r5, r24
     896:	21 f7       	brne	.-56     	; 0x860 <rprintfFloat+0x62>
			break;
		else
			place *= 10.0;
	}
	// print polarity character
	if(negative)
     898:	20 e0       	ldi	r18, 0x00	; 0
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	40 e0       	ldi	r20, 0x00	; 0
     89e:	50 e0       	ldi	r21, 0x00	; 0
     8a0:	c6 01       	movw	r24, r12
     8a2:	b5 01       	movw	r22, r10
     8a4:	0e 94 b4 10 	call	0x2168	; 0x2168 <__ltsf2>
     8a8:	88 23       	and	r24, r24
     8aa:	14 f4       	brge	.+4      	; 0x8b0 <rprintfFloat+0xb2>
		rprintfChar('-');
     8ac:	8d e2       	ldi	r24, 0x2D	; 45
     8ae:	01 c0       	rjmp	.+2      	; 0x8b2 <rprintfFloat+0xb4>
	else
		rprintfChar('+');
     8b0:	8b e2       	ldi	r24, 0x2B	; 43
     8b2:	0e 94 aa 02 	call	0x554	; 0x554 <rprintfChar>
     8b6:	dd 24       	eor	r13, r13
     8b8:	aa 24       	eor	r10, r10
     8ba:	56 c0       	rjmp	.+172    	; 0x968 <rprintfFloat+0x16a>

	// print digits
	for(i=0; i<numDigits; i++)
	{
		digit = (x/place);
     8bc:	a8 01       	movw	r20, r16
     8be:	97 01       	movw	r18, r14
     8c0:	c4 01       	movw	r24, r8
     8c2:	b3 01       	movw	r22, r6
     8c4:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <__divsf3>
     8c8:	0e 94 aa 0c 	call	0x1954	; 0x1954 <__fixunssfsi>
     8cc:	b6 2e       	mov	r11, r22

		if(digit | firstplace | (place == 1.0))
     8ce:	d6 2a       	or	r13, r22
     8d0:	cd 2d       	mov	r28, r13
     8d2:	d0 e0       	ldi	r29, 0x00	; 0
     8d4:	cc 24       	eor	r12, r12
     8d6:	dd 24       	eor	r13, r13
     8d8:	20 e0       	ldi	r18, 0x00	; 0
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	40 e8       	ldi	r20, 0x80	; 128
     8de:	5f e3       	ldi	r21, 0x3F	; 63
     8e0:	c8 01       	movw	r24, r16
     8e2:	b7 01       	movw	r22, r14
     8e4:	0e 94 24 10 	call	0x2048	; 0x2048 <__eqsf2>
     8e8:	88 23       	and	r24, r24
     8ea:	19 f4       	brne	.+6      	; 0x8f2 <rprintfFloat+0xf4>
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	c8 2e       	mov	r12, r24
     8f0:	d1 2c       	mov	r13, r1
     8f2:	cc 29       	or	r28, r12
     8f4:	dd 29       	or	r29, r13
     8f6:	cd 2b       	or	r28, r29
     8f8:	39 f0       	breq	.+14     	; 0x908 <rprintfFloat+0x10a>
		{
			firstplace = TRUE;
			rprintfChar(digit+0x30);
     8fa:	8b 2d       	mov	r24, r11
     8fc:	80 5d       	subi	r24, 0xD0	; 208
     8fe:	0e 94 aa 02 	call	0x554	; 0x554 <rprintfChar>
     902:	dd 24       	eor	r13, r13
     904:	da 94       	dec	r13
     906:	04 c0       	rjmp	.+8      	; 0x910 <rprintfFloat+0x112>
		}
		else
			rprintfChar(' ');
     908:	80 e2       	ldi	r24, 0x20	; 32
     90a:	0e 94 aa 02 	call	0x554	; 0x554 <rprintfChar>
     90e:	dd 24       	eor	r13, r13
		
		if(place == 1.0)
     910:	20 e0       	ldi	r18, 0x00	; 0
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	40 e8       	ldi	r20, 0x80	; 128
     916:	5f e3       	ldi	r21, 0x3F	; 63
     918:	c8 01       	movw	r24, r16
     91a:	b7 01       	movw	r22, r14
     91c:	0e 94 24 10 	call	0x2048	; 0x2048 <__eqsf2>
     920:	88 23       	and	r24, r24
     922:	19 f4       	brne	.+6      	; 0x92a <rprintfFloat+0x12c>
		{
			rprintfChar('.');
     924:	8e e2       	ldi	r24, 0x2E	; 46
     926:	0e 94 aa 02 	call	0x554	; 0x554 <rprintfChar>
		}
		
		x -= (digit*place);
     92a:	6b 2d       	mov	r22, r11
     92c:	70 e0       	ldi	r23, 0x00	; 0
     92e:	88 27       	eor	r24, r24
     930:	77 fd       	sbrc	r23, 7
     932:	80 95       	com	r24
     934:	98 2f       	mov	r25, r24
     936:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__floatsisf>
     93a:	a8 01       	movw	r20, r16
     93c:	97 01       	movw	r18, r14
     93e:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__mulsf3>
     942:	9b 01       	movw	r18, r22
     944:	ac 01       	movw	r20, r24
     946:	c4 01       	movw	r24, r8
     948:	b3 01       	movw	r22, r6
     94a:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <__subsf3>
     94e:	3b 01       	movw	r6, r22
     950:	4c 01       	movw	r8, r24
		place /= 10.0;
     952:	20 e0       	ldi	r18, 0x00	; 0
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	40 e2       	ldi	r20, 0x20	; 32
     958:	51 e4       	ldi	r21, 0x41	; 65
     95a:	c8 01       	movw	r24, r16
     95c:	b7 01       	movw	r22, r14
     95e:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <__divsf3>
     962:	7b 01       	movw	r14, r22
     964:	8c 01       	movw	r16, r24
		rprintfChar('-');
	else
		rprintfChar('+');

	// print digits
	for(i=0; i<numDigits; i++)
     966:	a3 94       	inc	r10
     968:	a4 14       	cp	r10, r4
     96a:	08 f4       	brcc	.+2      	; 0x96e <rprintfFloat+0x170>
     96c:	a7 cf       	rjmp	.-178    	; 0x8bc <rprintfFloat+0xbe>
		}
		
		x -= (digit*place);
		place /= 10.0;
	}
}
     96e:	df 91       	pop	r29
     970:	cf 91       	pop	r28
     972:	1f 91       	pop	r17
     974:	0f 91       	pop	r16
     976:	ff 90       	pop	r15
     978:	ef 90       	pop	r14
     97a:	df 90       	pop	r13
     97c:	cf 90       	pop	r12
     97e:	bf 90       	pop	r11
     980:	af 90       	pop	r10
     982:	9f 90       	pop	r9
     984:	8f 90       	pop	r8
     986:	7f 90       	pop	r7
     988:	6f 90       	pop	r6
     98a:	5f 90       	pop	r5
     98c:	4f 90       	pop	r4
     98e:	08 95       	ret

00000990 <lcdInitHW>:
/*************************************************************/
/********************** LOCAL FUNCTIONS **********************/
/*************************************************************/

void lcdInitHW(void)
{
     990:	28 98       	cbi	0x05, 0	; 5
	// initialize I/O ports
	// if I/O interface is in use
#ifdef LCD_PORT_INTERFACE
	// initialize LCD control lines
	cbi(LCD_CTRL_PORT, LCD_CTRL_RS);
	cbi(LCD_CTRL_PORT, LCD_CTRL_RW);
     992:	29 98       	cbi	0x05, 1	; 5
	cbi(LCD_CTRL_PORT, LCD_CTRL_E);
     994:	2a 98       	cbi	0x05, 2	; 5
	// initialize LCD control lines to output
	sbi(LCD_CTRL_DDR, LCD_CTRL_RS);
     996:	20 9a       	sbi	0x04, 0	; 4
	sbi(LCD_CTRL_DDR, LCD_CTRL_RW);
     998:	21 9a       	sbi	0x04, 1	; 4
	sbi(LCD_CTRL_DDR, LCD_CTRL_E);
     99a:	22 9a       	sbi	0x04, 2	; 4
	// initialize LCD data port to input
	// initialize LCD data lines to pull-up
	#ifdef LCD_DATA_4BIT
		// using lower nybble on control port:
		#ifdef LCD_DATA_4BIT_LOWER
			outb(LCD_DATA_DDR, inb(LCD_DATA_DDR)&0xF0);		// set data I/O lines to input (4bit)
     99c:	87 b1       	in	r24, 0x07	; 7
     99e:	80 7f       	andi	r24, 0xF0	; 240
     9a0:	87 b9       	out	0x07, r24	; 7
			outb(LCD_DATA_POUT, inb(LCD_DATA_POUT)|0x0F);	// set pull-ups to on (4bit)
     9a2:	88 b1       	in	r24, 0x08	; 8
     9a4:	8f 60       	ori	r24, 0x0F	; 15
     9a6:	88 b9       	out	0x08, r24	; 8
	#endif
#else
	// enable external memory bus if not already enabled
	sbi(MCUCR, SRE);			// enable bus interface
#endif
}
     9a8:	08 95       	ret

000009aa <lcdBusyWait>:

void lcdBusyWait(void)
{
     9aa:	28 98       	cbi	0x05, 0	; 5
		// using upper nybble on control port:
		// outb(LCD_DATA_DDR, inb(LCD_DATA_DDR)&0x0F);	// set data I/O lines to input (4bit)
		// outb(LCD_DATA_POUT, inb(LCD_DATA_POUT)|0xF0);	// set pull-ups to on (4bit)
		
		// using lower nybble on control port:
		outb(LCD_DATA_DDR, inb(LCD_DATA_DDR)&0xF0);	// set data I/O lines to input (4bit)
     9ac:	87 b1       	in	r24, 0x07	; 7
     9ae:	80 7f       	andi	r24, 0xF0	; 240
     9b0:	87 b9       	out	0x07, r24	; 7
		outb(LCD_DATA_POUT, inb(LCD_DATA_POUT)|0x0F);	// set pull-ups to on (4bit)
     9b2:	88 b1       	in	r24, 0x08	; 8
     9b4:	8f 60       	ori	r24, 0x0F	; 15
     9b6:	88 b9       	out	0x08, r24	; 8
	#else
		outb(LCD_DATA_DDR, 0x00);					// set data I/O lines to input (8bit)
		outb(LCD_DATA_POUT, 0xFF);					// set pull-ups to on (8bit)
	#endif
	sbi(LCD_CTRL_PORT, LCD_CTRL_RW);				// set R/W to "read"
     9b8:	29 9a       	sbi	0x05, 1	; 5
	sbi(LCD_CTRL_PORT, LCD_CTRL_E);					// set "E" line
     9ba:	2a 9a       	sbi	0x05, 2	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     9bc:	8a e1       	ldi	r24, 0x1A	; 26
     9be:	8a 95       	dec	r24
     9c0:	f1 f7       	brne	.-4      	; 0x9be <lcdBusyWait+0x14>
	LCD_DELAY;								// wait
	while(inb(LCD_DATA_PIN) & 1<<LCD_BUSY)
	{
		cbi(LCD_CTRL_PORT, LCD_CTRL_E);		// clear "E" line
     9c2:	9a e1       	ldi	r25, 0x1A	; 26
     9c4:	1c c0       	rjmp	.+56     	; 0x9fe <lcdBusyWait+0x54>
     9c6:	2a 98       	cbi	0x05, 2	; 5
     9c8:	89 2f       	mov	r24, r25
     9ca:	8a 95       	dec	r24
     9cc:	f1 f7       	brne	.-4      	; 0x9ca <lcdBusyWait+0x20>
		LCD_DELAY;									// wait
		LCD_DELAY;									// wait
		sbi(LCD_CTRL_PORT, LCD_CTRL_E);		// set "E" line
     9ce:	89 2f       	mov	r24, r25
     9d0:	8a 95       	dec	r24
     9d2:	f1 f7       	brne	.-4      	; 0x9d0 <lcdBusyWait+0x26>
     9d4:	2a 9a       	sbi	0x05, 2	; 5
     9d6:	89 2f       	mov	r24, r25
     9d8:	8a 95       	dec	r24
     9da:	f1 f7       	brne	.-4      	; 0x9d8 <lcdBusyWait+0x2e>
		LCD_DELAY;									// wait
		LCD_DELAY;									// wait
		#ifdef LCD_DATA_4BIT						// do an extra clock for 4 bit reads
			cbi(LCD_CTRL_PORT, LCD_CTRL_E);	// clear "E" line
     9dc:	89 2f       	mov	r24, r25
     9de:	8a 95       	dec	r24
     9e0:	f1 f7       	brne	.-4      	; 0x9de <lcdBusyWait+0x34>
     9e2:	2a 98       	cbi	0x05, 2	; 5
     9e4:	89 2f       	mov	r24, r25
     9e6:	8a 95       	dec	r24
     9e8:	f1 f7       	brne	.-4      	; 0x9e6 <lcdBusyWait+0x3c>
			LCD_DELAY;								// wait
			LCD_DELAY;								// wait
			sbi(LCD_CTRL_PORT, LCD_CTRL_E);	// set "E" line
     9ea:	89 2f       	mov	r24, r25
     9ec:	8a 95       	dec	r24
     9ee:	f1 f7       	brne	.-4      	; 0x9ec <lcdBusyWait+0x42>
     9f0:	2a 9a       	sbi	0x05, 2	; 5
     9f2:	89 2f       	mov	r24, r25
     9f4:	8a 95       	dec	r24
     9f6:	f1 f7       	brne	.-4      	; 0x9f4 <lcdBusyWait+0x4a>
		outb(LCD_DATA_POUT, 0xFF);					// set pull-ups to on (8bit)
	#endif
	sbi(LCD_CTRL_PORT, LCD_CTRL_RW);				// set R/W to "read"
	sbi(LCD_CTRL_PORT, LCD_CTRL_E);					// set "E" line
	LCD_DELAY;								// wait
	while(inb(LCD_DATA_PIN) & 1<<LCD_BUSY)
     9f8:	89 2f       	mov	r24, r25
     9fa:	8a 95       	dec	r24
     9fc:	f1 f7       	brne	.-4      	; 0x9fa <lcdBusyWait+0x50>
     9fe:	33 99       	sbic	0x06, 3	; 6
     a00:	e2 cf       	rjmp	.-60     	; 0x9c6 <lcdBusyWait+0x1c>
			sbi(LCD_CTRL_PORT, LCD_CTRL_E);	// set "E" line
			LCD_DELAY;								// wait
			LCD_DELAY;								// wait
		#endif
	}
	cbi(LCD_CTRL_PORT, LCD_CTRL_E);			// clear "E" line
     a02:	2a 98       	cbi	0x05, 2	; 5
	// sbi(MCUCR, SRW);			// enable RAM waitstate
	// wait until LCD busy bit goes to zero
	while( (*((volatile unsigned char *) (LCD_CTRL_ADDR))) & (1<<LCD_BUSY) );
	// cbi(MCUCR, SRW);			// disable RAM waitstate
#endif
}
     a04:	08 95       	ret

00000a06 <lcdControlWrite>:

void lcdControlWrite(u08 data) 
{
     a06:	1f 93       	push	r17
     a08:	18 2f       	mov	r17, r24
// write the control byte to the display controller
#ifdef LCD_PORT_INTERFACE
	lcdBusyWait();							// wait until LCD not busy
     a0a:	0e 94 d5 04 	call	0x9aa	; 0x9aa <lcdBusyWait>
	cbi(LCD_CTRL_PORT, LCD_CTRL_RS);			// set RS to "control"
     a0e:	28 98       	cbi	0x05, 0	; 5
	cbi(LCD_CTRL_PORT, LCD_CTRL_RW);			// set R/W to "write"
     a10:	29 98       	cbi	0x05, 1	; 5
	#ifdef LCD_DATA_4BIT
		// 4 bit write
		sbi(LCD_CTRL_PORT, LCD_CTRL_E);	// set "E" line
     a12:	2a 9a       	sbi	0x05, 2	; 5
		// using higher bits on control port:
		// outb(LCD_DATA_DDR, inb(LCD_DATA_DDR)|0xF0);	// set data I/O lines to output (4bit)
		// outb(LCD_DATA_POUT, (inb(LCD_DATA_POUT)&0x0F) | (data&0xF0) );	// output data, high 4 bits
		
		// using lower bits on control port:
		outb(LCD_DATA_DDR, inb(LCD_DATA_DDR)|0x0F);	// set data I/O lines to output (4bit)
     a14:	87 b1       	in	r24, 0x07	; 7
     a16:	8f 60       	ori	r24, 0x0F	; 15
     a18:	87 b9       	out	0x07, r24	; 7
		outb(LCD_DATA_POUT, (inb(LCD_DATA_POUT)&0xF0) | (data>>4) );	// output data, high 4 bits
     a1a:	88 b1       	in	r24, 0x08	; 8
     a1c:	91 2f       	mov	r25, r17
     a1e:	92 95       	swap	r25
     a20:	9f 70       	andi	r25, 0x0F	; 15
     a22:	80 7f       	andi	r24, 0xF0	; 240
     a24:	98 2b       	or	r25, r24
     a26:	98 b9       	out	0x08, r25	; 8
     a28:	9a e1       	ldi	r25, 0x1A	; 26
     a2a:	89 2f       	mov	r24, r25
     a2c:	8a 95       	dec	r24
     a2e:	f1 f7       	brne	.-4      	; 0xa2c <lcdControlWrite+0x26>
		
		LCD_DELAY;								// wait
		LCD_DELAY;								// wait
		cbi(LCD_CTRL_PORT, LCD_CTRL_E);	// clear "E" line
     a30:	89 2f       	mov	r24, r25
     a32:	8a 95       	dec	r24
     a34:	f1 f7       	brne	.-4      	; 0xa32 <lcdControlWrite+0x2c>
     a36:	2a 98       	cbi	0x05, 2	; 5
     a38:	89 2f       	mov	r24, r25
     a3a:	8a 95       	dec	r24
     a3c:	f1 f7       	brne	.-4      	; 0xa3a <lcdControlWrite+0x34>
		LCD_DELAY;								// wait
		LCD_DELAY;								// wait
		sbi(LCD_CTRL_PORT, LCD_CTRL_E);	// set "E" line
     a3e:	89 2f       	mov	r24, r25
     a40:	8a 95       	dec	r24
     a42:	f1 f7       	brne	.-4      	; 0xa40 <lcdControlWrite+0x3a>
     a44:	2a 9a       	sbi	0x05, 2	; 5
		
		// using higher bits on control port:
		// outb(LCD_DATA_POUT, (inb(LCD_DATA_POUT)&0x0F) | (data<<4) );	// output data, low 4 bits
		
		// using lower bits on control port:
		outb(LCD_DATA_POUT, (inb(LCD_DATA_POUT)&0xF0) | (data&0x0F) );	// output data, low 4 bits
     a46:	88 b1       	in	r24, 0x08	; 8
     a48:	1f 70       	andi	r17, 0x0F	; 15
     a4a:	80 7f       	andi	r24, 0xF0	; 240
     a4c:	81 2b       	or	r24, r17
     a4e:	88 b9       	out	0x08, r24	; 8
     a50:	89 2f       	mov	r24, r25
     a52:	8a 95       	dec	r24
     a54:	f1 f7       	brne	.-4      	; 0xa52 <lcdControlWrite+0x4c>
		LCD_DELAY;								// wait
		LCD_DELAY;								// wait
		cbi(LCD_CTRL_PORT, LCD_CTRL_E);	// clear "E" line
     a56:	9a 95       	dec	r25
     a58:	f1 f7       	brne	.-4      	; 0xa56 <lcdControlWrite+0x50>
     a5a:	2a 98       	cbi	0x05, 2	; 5
		// using higher bits on control port:
		// outb(LCD_DATA_DDR, inb(LCD_DATA_DDR)&0x0F);		// set data I/O lines to input (4bit)
		// outb(LCD_DATA_POUT, inb(LCD_DATA_POUT)|0xF0);	// set pull-ups to on (4bit)

		// using lower bits on control port:
		outb(LCD_DATA_DDR, inb(LCD_DATA_DDR)&0xF0);		// set data I/O lines to input (4bit)
     a5c:	87 b1       	in	r24, 0x07	; 7
     a5e:	80 7f       	andi	r24, 0xF0	; 240
     a60:	87 b9       	out	0x07, r24	; 7
		outb(LCD_DATA_POUT, inb(LCD_DATA_POUT)|0x0F);	// set pull-ups to on (4bit)
     a62:	88 b1       	in	r24, 0x08	; 8
     a64:	8f 60       	ori	r24, 0x0F	; 15
     a66:	88 b9       	out	0x08, r24	; 8
	//sbi(MCUCR, SRW);			// enable RAM waitstate
	lcdBusyWait();				// wait until LCD not busy
	*((volatile unsigned char *) (LCD_CTRL_ADDR)) = data;
	//cbi(MCUCR, SRW);			// disable RAM waitstate
#endif
}
     a68:	1f 91       	pop	r17
     a6a:	08 95       	ret

00000a6c <lcdControlRead>:

u08 lcdControlRead(void)
{
     a6c:	0e 94 d5 04 	call	0x9aa	; 0x9aa <lcdBusyWait>
		// using higher bits on control port:
		// outb(LCD_DATA_DDR, inb(LCD_DATA_DDR)&0x0F);		// set data I/O lines to input (4bit)
		// outb(LCD_DATA_POUT, inb(LCD_DATA_POUT)|0xF0);	// set pull-ups to on (4bit)
		
		// using lower bits on control port:
		outb(LCD_DATA_DDR, inb(LCD_DATA_DDR)&0xF0);		// set data I/O lines to input (4bit)
     a70:	87 b1       	in	r24, 0x07	; 7
     a72:	80 7f       	andi	r24, 0xF0	; 240
     a74:	87 b9       	out	0x07, r24	; 7
		outb(LCD_DATA_POUT, inb(LCD_DATA_POUT)|0x0F);	// set pull-ups to on (4bit)
     a76:	88 b1       	in	r24, 0x08	; 8
     a78:	8f 60       	ori	r24, 0x0F	; 15
     a7a:	88 b9       	out	0x08, r24	; 8
	#else
		outb(LCD_DATA_DDR, 0x00);			// set data I/O lines to input (8bit)
		outb(LCD_DATA_POUT, 0xFF);			// set pull-ups to on (8bit)
	#endif
	cbi(LCD_CTRL_PORT, LCD_CTRL_RS);		// set RS to "control"
     a7c:	28 98       	cbi	0x05, 0	; 5
	sbi(LCD_CTRL_PORT, LCD_CTRL_RW);		// set R/W to "read"
     a7e:	29 9a       	sbi	0x05, 1	; 5
	#ifdef LCD_DATA_4BIT
		// 4 bit read
		sbi(LCD_CTRL_PORT, LCD_CTRL_E);	// set "E" line
     a80:	2a 9a       	sbi	0x05, 2	; 5
     a82:	8a e1       	ldi	r24, 0x1A	; 26
     a84:	98 2f       	mov	r25, r24
     a86:	9a 95       	dec	r25
     a88:	f1 f7       	brne	.-4      	; 0xa86 <lcdControlRead+0x1a>
		
		// using higher bits on control port:
		// data = inb(LCD_DATA_PIN)&0xF0;	// input data, high 4 bits
		
		// using lower bits on control port:
		data = inb(LCD_DATA_PIN)<<4;	// input data, high 4 bits
     a8a:	98 2f       	mov	r25, r24
     a8c:	9a 95       	dec	r25
     a8e:	f1 f7       	brne	.-4      	; 0xa8c <lcdControlRead+0x20>
     a90:	96 b1       	in	r25, 0x06	; 6
		
		cbi(LCD_CTRL_PORT, LCD_CTRL_E);	// clear "E" line
     a92:	2a 98       	cbi	0x05, 2	; 5
     a94:	28 2f       	mov	r18, r24
     a96:	2a 95       	dec	r18
     a98:	f1 f7       	brne	.-4      	; 0xa96 <lcdControlRead+0x2a>
		LCD_DELAY;						// wait
		LCD_DELAY;						// wait
		sbi(LCD_CTRL_PORT, LCD_CTRL_E);	// set "E" line
     a9a:	28 2f       	mov	r18, r24
     a9c:	2a 95       	dec	r18
     a9e:	f1 f7       	brne	.-4      	; 0xa9c <lcdControlRead+0x30>
     aa0:	2a 9a       	sbi	0x05, 2	; 5
     aa2:	28 2f       	mov	r18, r24
     aa4:	2a 95       	dec	r18
     aa6:	f1 f7       	brne	.-4      	; 0xaa4 <lcdControlRead+0x38>
		
		// using higher bits on control port:
		// data |= inb(LCD_DATA_PIN)>>4;	// input data, low 4 bits
		
		// using lower nybble on control port:
		data |= inb(LCD_DATA_PIN)&0x0F;	// input data, low 4 bits
     aa8:	8a 95       	dec	r24
     aaa:	f1 f7       	brne	.-4      	; 0xaa8 <lcdControlRead+0x3c>
     aac:	86 b1       	in	r24, 0x06	; 6
     aae:	8f 70       	andi	r24, 0x0F	; 15
     ab0:	92 95       	swap	r25
     ab2:	90 7f       	andi	r25, 0xF0	; 240

		cbi(LCD_CTRL_PORT, LCD_CTRL_E);	// clear "E" line
     ab4:	2a 98       	cbi	0x05, 2	; 5
	lcdBusyWait();				// wait until LCD not busy
	data = *((volatile unsigned char *) (LCD_CTRL_ADDR));
	//cbi(MCUCR, SRW);			// disable RAM waitstate
#endif
	return data;
}
     ab6:	89 2b       	or	r24, r25
     ab8:	08 95       	ret

00000aba <lcdDataWrite>:

void lcdDataWrite(u08 data) 
{
     aba:	1f 93       	push	r17
     abc:	18 2f       	mov	r17, r24
// write a data byte to the display
#ifdef LCD_PORT_INTERFACE
	lcdBusyWait();							// wait until LCD not busy
     abe:	0e 94 d5 04 	call	0x9aa	; 0x9aa <lcdBusyWait>
	sbi(LCD_CTRL_PORT, LCD_CTRL_RS);		// set RS to "data"
     ac2:	28 9a       	sbi	0x05, 0	; 5
	cbi(LCD_CTRL_PORT, LCD_CTRL_RW);		// set R/W to "write"
     ac4:	29 98       	cbi	0x05, 1	; 5
	#ifdef LCD_DATA_4BIT
		// 4 bit write
		sbi(LCD_CTRL_PORT, LCD_CTRL_E);	// set "E" line
     ac6:	2a 9a       	sbi	0x05, 2	; 5
		// using upper nybble on control port:
		// outb(LCD_DATA_DDR, inb(LCD_DATA_DDR)|0xF0);	// set data I/O lines to output (4bit)
		// outb(LCD_DATA_POUT, (inb(LCD_DATA_POUT)&0x0F) | (data&0xF0) );	// output data, high 4 bits
		
		// using lower nybble on control port:
		outb(LCD_DATA_DDR, inb(LCD_DATA_DDR)|0x0F);	// set data I/O lines to output (4bit)
     ac8:	87 b1       	in	r24, 0x07	; 7
     aca:	8f 60       	ori	r24, 0x0F	; 15
     acc:	87 b9       	out	0x07, r24	; 7
		outb(LCD_DATA_POUT, (inb(LCD_DATA_POUT)&0xF0) | (data>>4) );	// output data, high 4 bits
     ace:	88 b1       	in	r24, 0x08	; 8
     ad0:	91 2f       	mov	r25, r17
     ad2:	92 95       	swap	r25
     ad4:	9f 70       	andi	r25, 0x0F	; 15
     ad6:	80 7f       	andi	r24, 0xF0	; 240
     ad8:	98 2b       	or	r25, r24
     ada:	98 b9       	out	0x08, r25	; 8
     adc:	9a e1       	ldi	r25, 0x1A	; 26
     ade:	89 2f       	mov	r24, r25
     ae0:	8a 95       	dec	r24
     ae2:	f1 f7       	brne	.-4      	; 0xae0 <lcdDataWrite+0x26>
		
		LCD_DELAY;								// wait
		LCD_DELAY;								// wait
		cbi(LCD_CTRL_PORT, LCD_CTRL_E);	// clear "E" line
     ae4:	89 2f       	mov	r24, r25
     ae6:	8a 95       	dec	r24
     ae8:	f1 f7       	brne	.-4      	; 0xae6 <lcdDataWrite+0x2c>
     aea:	2a 98       	cbi	0x05, 2	; 5
     aec:	89 2f       	mov	r24, r25
     aee:	8a 95       	dec	r24
     af0:	f1 f7       	brne	.-4      	; 0xaee <lcdDataWrite+0x34>
		LCD_DELAY;								// wait
		LCD_DELAY;								// wait
		sbi(LCD_CTRL_PORT, LCD_CTRL_E);	// set "E" line
     af2:	89 2f       	mov	r24, r25
     af4:	8a 95       	dec	r24
     af6:	f1 f7       	brne	.-4      	; 0xaf4 <lcdDataWrite+0x3a>
     af8:	2a 9a       	sbi	0x05, 2	; 5

		// using upper nybble on control port:
		// outb(LCD_DATA_POUT, (inb(LCD_DATA_POUT)&0x0F) | (data<<4) );	// output data, low 4 bits

		// using lower nybble on control port:
		outb(LCD_DATA_POUT, (inb(LCD_DATA_POUT)&0xF0) | (data&0x0F) );	// output data, low 4 bits
     afa:	88 b1       	in	r24, 0x08	; 8
     afc:	1f 70       	andi	r17, 0x0F	; 15
     afe:	80 7f       	andi	r24, 0xF0	; 240
     b00:	81 2b       	or	r24, r17
     b02:	88 b9       	out	0x08, r24	; 8
     b04:	89 2f       	mov	r24, r25
     b06:	8a 95       	dec	r24
     b08:	f1 f7       	brne	.-4      	; 0xb06 <lcdDataWrite+0x4c>

		LCD_DELAY;								// wait
		LCD_DELAY;								// wait
		cbi(LCD_CTRL_PORT, LCD_CTRL_E);	// clear "E" line
     b0a:	9a 95       	dec	r25
     b0c:	f1 f7       	brne	.-4      	; 0xb0a <lcdDataWrite+0x50>
     b0e:	2a 98       	cbi	0x05, 2	; 5
		// using upper nybble on control port:
		// outb(LCD_DATA_DDR, inb(LCD_DATA_DDR)&0x0F);		// set data I/O lines to input (4bit)
		// outb(LCD_DATA_POUT, inb(LCD_DATA_POUT)|0xF0);	// set pull-ups to on (4bit)

		// using lower nybble on control port:
		outb(LCD_DATA_DDR, inb(LCD_DATA_DDR)&0xF0);		// set data I/O lines to input (4bit)
     b10:	87 b1       	in	r24, 0x07	; 7
     b12:	80 7f       	andi	r24, 0xF0	; 240
     b14:	87 b9       	out	0x07, r24	; 7
		outb(LCD_DATA_POUT, inb(LCD_DATA_POUT)|0x0F);	// set pull-ups to on (4bit)
     b16:	88 b1       	in	r24, 0x08	; 8
     b18:	8f 60       	ori	r24, 0x0F	; 15
     b1a:	88 b9       	out	0x08, r24	; 8
	//sbi(MCUCR, SRW);			// enable RAM waitstate
	lcdBusyWait();				// wait until LCD not busy
	*((volatile unsigned char *) (LCD_DATA_ADDR)) = data;
	//cbi(MCUCR, SRW);			// disable RAM waitstate
#endif
}
     b1c:	1f 91       	pop	r17
     b1e:	08 95       	ret

00000b20 <lcdDataRead>:

u08 lcdDataRead(void)
{
     b20:	0e 94 d5 04 	call	0x9aa	; 0x9aa <lcdBusyWait>
		// using upper nybble on control port:
		// outb(LCD_DATA_DDR, inb(LCD_DATA_DDR)&0x0F);		// set data I/O lines to input (4bit)
		// outb(LCD_DATA_POUT, inb(LCD_DATA_POUT)|0xF0);	// set pull-ups to on (4bit)

		// using lower nybble on control port:
		outb(LCD_DATA_DDR, inb(LCD_DATA_DDR)&0xF0);		// set data I/O lines to input (4bit)
     b24:	87 b1       	in	r24, 0x07	; 7
     b26:	80 7f       	andi	r24, 0xF0	; 240
     b28:	87 b9       	out	0x07, r24	; 7
		outb(LCD_DATA_POUT, inb(LCD_DATA_POUT)|0x0F);	// set pull-ups to on (4bit)
     b2a:	88 b1       	in	r24, 0x08	; 8
     b2c:	8f 60       	ori	r24, 0x0F	; 15
     b2e:	88 b9       	out	0x08, r24	; 8
	#else
		outb(LCD_DATA_DDR, 0x00);			// set data I/O lines to input (8bit)
		outb(LCD_DATA_POUT, 0xFF);			// set pull-ups to on (8bit)
	#endif
	sbi(LCD_CTRL_PORT, LCD_CTRL_RS);		// set RS to "data"
     b30:	28 9a       	sbi	0x05, 0	; 5
	sbi(LCD_CTRL_PORT, LCD_CTRL_RW);		// set R/W to "read"
     b32:	29 9a       	sbi	0x05, 1	; 5
	#ifdef LCD_DATA_4BIT
		// 4 bit read
		sbi(LCD_CTRL_PORT, LCD_CTRL_E);	// set "E" line
     b34:	2a 9a       	sbi	0x05, 2	; 5
     b36:	8a e1       	ldi	r24, 0x1A	; 26
     b38:	98 2f       	mov	r25, r24
     b3a:	9a 95       	dec	r25
     b3c:	f1 f7       	brne	.-4      	; 0xb3a <lcdDataRead+0x1a>
		
		// using upper nybble on control port:
		// data = inb(LCD_DATA_PIN)&0xF0;	// input data, high 4 bits
		
		// using lower nybble on control port:
		data = inb(LCD_DATA_PIN)<<4;	// input data, high 4 bits
     b3e:	98 2f       	mov	r25, r24
     b40:	9a 95       	dec	r25
     b42:	f1 f7       	brne	.-4      	; 0xb40 <lcdDataRead+0x20>
     b44:	96 b1       	in	r25, 0x06	; 6
		
		cbi(LCD_CTRL_PORT, LCD_CTRL_E);	// clear "E" line
     b46:	2a 98       	cbi	0x05, 2	; 5
     b48:	28 2f       	mov	r18, r24
     b4a:	2a 95       	dec	r18
     b4c:	f1 f7       	brne	.-4      	; 0xb4a <lcdDataRead+0x2a>
		LCD_DELAY;								// wait
		LCD_DELAY;								// wait
		sbi(LCD_CTRL_PORT, LCD_CTRL_E);	// set "E" line
     b4e:	28 2f       	mov	r18, r24
     b50:	2a 95       	dec	r18
     b52:	f1 f7       	brne	.-4      	; 0xb50 <lcdDataRead+0x30>
     b54:	2a 9a       	sbi	0x05, 2	; 5
     b56:	28 2f       	mov	r18, r24
     b58:	2a 95       	dec	r18
     b5a:	f1 f7       	brne	.-4      	; 0xb58 <lcdDataRead+0x38>
		
		// using upper nybble on control port:
		// data |= inb(LCD_DATA_PIN)>>4;			// input data, low 4 bits
		
		// using lower nybble on control port:
		data |= inb(LCD_DATA_PIN)&0x0F;			// input data, low 4 bits
     b5c:	8a 95       	dec	r24
     b5e:	f1 f7       	brne	.-4      	; 0xb5c <lcdDataRead+0x3c>
     b60:	86 b1       	in	r24, 0x06	; 6
     b62:	8f 70       	andi	r24, 0x0F	; 15
     b64:	92 95       	swap	r25
     b66:	90 7f       	andi	r25, 0xF0	; 240
		
		cbi(LCD_CTRL_PORT, LCD_CTRL_E);	// clear "E" line
     b68:	2a 98       	cbi	0x05, 2	; 5
	lcdBusyWait();				// wait until LCD not busy
	data = *((volatile unsigned char *) (LCD_DATA_ADDR));
	//cbi(MCUCR, SRW);			// disable RAM waitstate
#endif
	return data;
}
     b6a:	89 2b       	or	r24, r25
     b6c:	08 95       	ret

00000b6e <lcdInit>:
/*************************************************************/
/********************* PUBLIC FUNCTIONS **********************/
/*************************************************************/

void lcdInit()
{
     b6e:	0e 94 c8 04 	call	0x990	; 0x990 <lcdInitHW>
	// initialize hardware
	lcdInitHW();
	// LCD function set
	lcdControlWrite(LCD_FUNCTION_DEFAULT);
     b72:	88 e2       	ldi	r24, 0x28	; 40
     b74:	0e 94 03 05 	call	0xa06	; 0xa06 <lcdControlWrite>
	// clear LCD
	lcdControlWrite(1<<LCD_CLR);
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	0e 94 03 05 	call	0xa06	; 0xa06 <lcdControlWrite>
     b7e:	88 e5       	ldi	r24, 0x58	; 88
     b80:	92 e0       	ldi	r25, 0x02	; 2
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b82:	20 e9       	ldi	r18, 0x90	; 144
     b84:	31 e0       	ldi	r19, 0x01	; 1
     b86:	f9 01       	movw	r30, r18
     b88:	31 97       	sbiw	r30, 0x01	; 1
     b8a:	f1 f7       	brne	.-4      	; 0xb88 <lcdInit+0x1a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b8c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b8e:	d9 f7       	brne	.-10     	; 0xb86 <lcdInit+0x18>
	_delay_ms(60);	// wait 60ms
	// set entry mode
	lcdControlWrite(1<<LCD_ENTRY_MODE | 1<<LCD_ENTRY_INC);
     b90:	86 e0       	ldi	r24, 0x06	; 6
     b92:	0e 94 03 05 	call	0xa06	; 0xa06 <lcdControlWrite>
	// set display to on
	//lcdControlWrite(1<<LCD_ON_CTRL | 1<<LCD_ON_DISPLAY | 1<<LCD_ON_BLINK);
	lcdControlWrite(1<<LCD_ON_CTRL | 1<<LCD_ON_DISPLAY );
     b96:	8c e0       	ldi	r24, 0x0C	; 12
     b98:	0e 94 03 05 	call	0xa06	; 0xa06 <lcdControlWrite>
	// move cursor to home
	lcdControlWrite(1<<LCD_HOME);
     b9c:	82 e0       	ldi	r24, 0x02	; 2
     b9e:	0e 94 03 05 	call	0xa06	; 0xa06 <lcdControlWrite>
	// set data address to 0
	lcdControlWrite(1<<LCD_DDRAM | 0x00);
     ba2:	80 e8       	ldi	r24, 0x80	; 128
     ba4:	0e 94 03 05 	call	0xa06	; 0xa06 <lcdControlWrite>
	// lcdLoadCustomChar((u08*)LcdCustomChar,3,3);
	// lcdLoadCustomChar((u08*)LcdCustomChar,4,4);
	// lcdLoadCustomChar((u08*)LcdCustomChar,5,5);
	// lcdLoadCustomChar((u08*)LcdCustomChar,6,6);
	// lcdLoadCustomChar((u08*)LcdCustomChar,7,7);
}
     ba8:	08 95       	ret

00000baa <lcdHome>:

void lcdHome(void)
{
     baa:	82 e0       	ldi	r24, 0x02	; 2
     bac:	0e 94 03 05 	call	0xa06	; 0xa06 <lcdControlWrite>
	// move cursor to home
	lcdControlWrite(1<<LCD_HOME);
}
     bb0:	08 95       	ret

00000bb2 <lcdClear>:

void lcdClear(void)
{
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	0e 94 03 05 	call	0xa06	; 0xa06 <lcdControlWrite>
	// clear LCD
	lcdControlWrite(1<<LCD_CLR);
}
     bb8:	08 95       	ret

00000bba <lcdGotoXY>:

void lcdGotoXY(u08 x, u08 y)
{
     bba:	62 30       	cpi	r22, 0x02	; 2
     bbc:	31 f0       	breq	.+12     	; 0xbca <lcdGotoXY+0x10>
     bbe:	63 30       	cpi	r22, 0x03	; 3
     bc0:	31 f0       	breq	.+12     	; 0xbce <lcdGotoXY+0x14>
     bc2:	61 30       	cpi	r22, 0x01	; 1
     bc4:	29 f4       	brne	.+10     	; 0xbd0 <lcdGotoXY+0x16>

	// remap lines into proper order
	switch(y)
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     bc6:	80 5c       	subi	r24, 0xC0	; 192
     bc8:	03 c0       	rjmp	.+6      	; 0xbd0 <lcdGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     bca:	8c 5e       	subi	r24, 0xEC	; 236
     bcc:	01 c0       	rjmp	.+2      	; 0xbd0 <lcdGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     bce:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}

	// set data address
	lcdControlWrite(1<<LCD_DDRAM | DDRAMAddr);
     bd0:	80 68       	ori	r24, 0x80	; 128
     bd2:	0e 94 03 05 	call	0xa06	; 0xa06 <lcdControlWrite>
}
     bd6:	08 95       	ret

00000bd8 <lcdLoadCustomChar>:

void lcdLoadCustomChar(u08* lcdCustomCharArray, u08 romCharNum, u08 lcdCharNum)
{
     bd8:	ff 92       	push	r15
     bda:	0f 93       	push	r16
     bdc:	1f 93       	push	r17
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
     be2:	ec 01       	movw	r28, r24
     be4:	16 2f       	mov	r17, r22
     be6:	04 2f       	mov	r16, r20
	register u08 i;
	u08 saveDDRAMAddr;

	// backup the current cursor position
	saveDDRAMAddr = lcdControlRead() & 0x7F;
     be8:	0e 94 36 05 	call	0xa6c	; 0xa6c <lcdControlRead>
     bec:	f8 2e       	mov	r15, r24

	// multiply the character index by 8
	lcdCharNum = (lcdCharNum<<3);	// each character occupies 8 bytes
     bee:	00 0f       	add	r16, r16
     bf0:	00 0f       	add	r16, r16
     bf2:	00 0f       	add	r16, r16
     bf4:	11 0f       	add	r17, r17
     bf6:	11 0f       	add	r17, r17
     bf8:	11 0f       	add	r17, r17
     bfa:	c1 0f       	add	r28, r17
     bfc:	d1 1d       	adc	r29, r1
     bfe:	10 e0       	ldi	r17, 0x00	; 0

	// copy the 8 bytes into CG (character generator) RAM
	for(i=0; i<8; i++)
	{
		// set CG RAM address
		lcdControlWrite((1<<LCD_CGRAM) | (lcdCharNum+i));
     c00:	81 2f       	mov	r24, r17
     c02:	80 0f       	add	r24, r16
     c04:	80 64       	ori	r24, 0x40	; 64
     c06:	0e 94 03 05 	call	0xa06	; 0xa06 <lcdControlWrite>
		// write character data
		lcdDataWrite( pgm_read_byte(lcdCustomCharArray+romCharNum+i) );
     c0a:	fe 01       	movw	r30, r28
     c0c:	84 91       	lpm	r24, Z+
     c0e:	0e 94 5d 05 	call	0xaba	; 0xaba <lcdDataWrite>
	// multiply the character index by 8
	lcdCharNum = (lcdCharNum<<3);	// each character occupies 8 bytes
	romCharNum = (romCharNum<<3);	// each character occupies 8 bytes

	// copy the 8 bytes into CG (character generator) RAM
	for(i=0; i<8; i++)
     c12:	1f 5f       	subi	r17, 0xFF	; 255
     c14:	21 96       	adiw	r28, 0x01	; 1
     c16:	18 30       	cpi	r17, 0x08	; 8
     c18:	99 f7       	brne	.-26     	; 0xc00 <lcdLoadCustomChar+0x28>
		// write character data
		lcdDataWrite( pgm_read_byte(lcdCustomCharArray+romCharNum+i) );
	}

	// restore the previous cursor position
	lcdControlWrite(1<<LCD_DDRAM | saveDDRAMAddr);
     c1a:	8f 2d       	mov	r24, r15
     c1c:	80 68       	ori	r24, 0x80	; 128
     c1e:	0e 94 03 05 	call	0xa06	; 0xa06 <lcdControlWrite>

}
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	1f 91       	pop	r17
     c28:	0f 91       	pop	r16
     c2a:	ff 90       	pop	r15
     c2c:	08 95       	ret

00000c2e <lcdPrintData>:

void lcdPrintData(char* data, u08 nBytes)
{
     c2e:	0f 93       	push	r16
     c30:	1f 93       	push	r17
     c32:	cf 93       	push	r28
     c34:	df 93       	push	r29
     c36:	06 2f       	mov	r16, r22
	register u08 i;

	// check to make sure we have a good pointer
	if (!data) return;
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	49 f0       	breq	.+18     	; 0xc4e <lcdPrintData+0x20>
     c3c:	ec 01       	movw	r28, r24
     c3e:	10 e0       	ldi	r17, 0x00	; 0
     c40:	04 c0       	rjmp	.+8      	; 0xc4a <lcdPrintData+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		lcdDataWrite(data[i]);
     c42:	89 91       	ld	r24, Y+
     c44:	0e 94 5d 05 	call	0xaba	; 0xaba <lcdDataWrite>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     c48:	1f 5f       	subi	r17, 0xFF	; 255
     c4a:	10 17       	cp	r17, r16
     c4c:	d0 f3       	brcs	.-12     	; 0xc42 <lcdPrintData+0x14>
	{
		lcdDataWrite(data[i]);
	}
}
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	1f 91       	pop	r17
     c54:	0f 91       	pop	r16
     c56:	08 95       	ret

00000c58 <lcdProgressBar>:

void lcdProgressBar(u16 progress, u16 maxprogress, u08 length)
{
     c58:	7f 92       	push	r7
     c5a:	8f 92       	push	r8
     c5c:	9f 92       	push	r9
     c5e:	af 92       	push	r10
     c60:	bf 92       	push	r11
     c62:	cf 92       	push	r12
     c64:	df 92       	push	r13
     c66:	ef 92       	push	r14
     c68:	ff 92       	push	r15
     c6a:	0f 93       	push	r16
     c6c:	1f 93       	push	r17
     c6e:	74 2e       	mov	r7, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     c70:	9c 01       	movw	r18, r24
     c72:	22 0f       	add	r18, r18
     c74:	33 1f       	adc	r19, r19
     c76:	28 0f       	add	r18, r24
     c78:	39 1f       	adc	r19, r25
     c7a:	22 0f       	add	r18, r18
     c7c:	33 1f       	adc	r19, r19
     c7e:	87 2d       	mov	r24, r7
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	ac 01       	movw	r20, r24
     c84:	24 9f       	mul	r18, r20
     c86:	c0 01       	movw	r24, r0
     c88:	25 9f       	mul	r18, r21
     c8a:	90 0d       	add	r25, r0
     c8c:	34 9f       	mul	r19, r20
     c8e:	90 0d       	add	r25, r0
     c90:	11 24       	eor	r1, r1
     c92:	0e 94 04 14 	call	0x2808	; 0x2808 <__udivmodhi4>
     c96:	5b 01       	movw	r10, r22
     c98:	cc 24       	eor	r12, r12
     c9a:	dd 24       	eor	r13, r13
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     c9c:	c6 01       	movw	r24, r12
     c9e:	b5 01       	movw	r22, r10
     ca0:	26 e0       	ldi	r18, 0x06	; 6
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	40 e0       	ldi	r20, 0x00	; 0
     ca6:	50 e0       	ldi	r21, 0x00	; 0
     ca8:	0e 94 18 14 	call	0x2830	; 0x2830 <__udivmodsi4>
     cac:	86 2e       	mov	r8, r22
     cae:	99 24       	eor	r9, r9
     cb0:	ee 24       	eor	r14, r14
     cb2:	ff 24       	eor	r15, r15
     cb4:	87 01       	movw	r16, r14
     cb6:	1f c0       	rjmp	.+62     	; 0xcf6 <lcdProgressBar+0x9e>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(u16)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
     cb8:	d8 01       	movw	r26, r16
     cba:	c7 01       	movw	r24, r14
     cbc:	05 96       	adiw	r24, 0x05	; 5
     cbe:	a1 1d       	adc	r26, r1
     cc0:	b1 1d       	adc	r27, r1
     cc2:	a8 16       	cp	r10, r24
     cc4:	b9 06       	cpc	r11, r25
     cc6:	ca 06       	cpc	r12, r26
     cc8:	db 06       	cpc	r13, r27
     cca:	10 f0       	brcs	.+4      	; 0xcd0 <lcdProgressBar+0x78>
     ccc:	85 e0       	ldi	r24, 0x05	; 5
     cce:	08 c0       	rjmp	.+16     	; 0xce0 <lcdProgressBar+0x88>
		{
			// this is a partial or empty block
			if( ((i*(u16)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     cd0:	ae 14       	cp	r10, r14
     cd2:	bf 04       	cpc	r11, r15
     cd4:	c0 06       	cpc	r12, r16
     cd6:	d1 06       	cpc	r13, r17
     cd8:	10 f0       	brcs	.+4      	; 0xcde <lcdProgressBar+0x86>
     cda:	88 2d       	mov	r24, r8
     cdc:	01 c0       	rjmp	.+2      	; 0xce0 <lcdProgressBar+0x88>
     cde:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		lcdDataWrite(c);
     ce0:	0e 94 5d 05 	call	0xaba	; 0xaba <lcdDataWrite>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     ce4:	93 94       	inc	r9
     ce6:	86 e0       	ldi	r24, 0x06	; 6
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	a0 e0       	ldi	r26, 0x00	; 0
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e8 0e       	add	r14, r24
     cf0:	f9 1e       	adc	r15, r25
     cf2:	0a 1f       	adc	r16, r26
     cf4:	1b 1f       	adc	r17, r27
     cf6:	97 14       	cp	r9, r7
     cf8:	f8 f2       	brcs	.-66     	; 0xcb8 <lcdProgressBar+0x60>
		
		// write character to display
		lcdDataWrite(c);
	}

}
     cfa:	1f 91       	pop	r17
     cfc:	0f 91       	pop	r16
     cfe:	ff 90       	pop	r15
     d00:	ef 90       	pop	r14
     d02:	df 90       	pop	r13
     d04:	cf 90       	pop	r12
     d06:	bf 90       	pop	r11
     d08:	af 90       	pop	r10
     d0a:	9f 90       	pop	r9
     d0c:	8f 90       	pop	r8
     d0e:	7f 90       	pop	r7
     d10:	08 95       	ret

00000d12 <vt100Init>:

// Global variables

// Functions
void vt100Init(void)
{
     d12:	83 ed       	ldi	r24, 0xD3	; 211
     d14:	91 e0       	ldi	r25, 0x01	; 1
     d16:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <rprintfProgStr>
	// initializes terminal to "power-on" settings
	// ESC c
	rprintfProgStrM("\x1B\x63");
}
     d1a:	08 95       	ret

00000d1c <vt100ClearScreen>:

void vt100ClearScreen(void)
{
     d1c:	8e ec       	ldi	r24, 0xCE	; 206
     d1e:	91 e0       	ldi	r25, 0x01	; 1
     d20:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <rprintfProgStr>
	// ESC [ 2 J
	rprintfProgStrM("\x1B[2J");
}
     d24:	08 95       	ret

00000d26 <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
     d26:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
     d28:	8f b7       	in	r24, 0x3f	; 63
     d2a:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
     d2c:	71 83       	std	Z+1, r23	; 0x01
     d2e:	60 83       	st	Z, r22
	buffer->size = size;
     d30:	53 83       	std	Z+3, r21	; 0x03
     d32:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
     d34:	17 82       	std	Z+7, r1	; 0x07
     d36:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
     d38:	15 82       	std	Z+5, r1	; 0x05
     d3a:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
     d3c:	8f bf       	out	0x3f, r24	; 63
}
     d3e:	08 95       	ret

00000d40 <bufferGetFromFront>:

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
     d40:	dc 01       	movw	r26, r24
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
     d42:	4f b7       	in	r20, 0x3f	; 63
     d44:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
     d46:	14 96       	adiw	r26, 0x04	; 4
     d48:	8d 91       	ld	r24, X+
     d4a:	9c 91       	ld	r25, X
     d4c:	15 97       	sbiw	r26, 0x05	; 5
     d4e:	89 2b       	or	r24, r25
     d50:	11 f4       	brne	.+4      	; 0xd56 <bufferGetFromFront+0x16>
     d52:	e0 e0       	ldi	r30, 0x00	; 0
     d54:	25 c0       	rjmp	.+74     	; 0xda0 <bufferGetFromFront+0x60>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
     d56:	16 96       	adiw	r26, 0x06	; 6
     d58:	8d 91       	ld	r24, X+
     d5a:	9c 91       	ld	r25, X
     d5c:	17 97       	sbiw	r26, 0x07	; 7
     d5e:	ed 91       	ld	r30, X+
     d60:	fc 91       	ld	r31, X
     d62:	11 97       	sbiw	r26, 0x01	; 1
     d64:	e8 0f       	add	r30, r24
     d66:	f9 1f       	adc	r31, r25
     d68:	e0 81       	ld	r30, Z
		// move index down and decrement length
		buffer->dataindex++;
     d6a:	01 96       	adiw	r24, 0x01	; 1
     d6c:	17 96       	adiw	r26, 0x07	; 7
     d6e:	9c 93       	st	X, r25
     d70:	8e 93       	st	-X, r24
     d72:	16 97       	sbiw	r26, 0x06	; 6
		if(buffer->dataindex >= buffer->size)
     d74:	12 96       	adiw	r26, 0x02	; 2
     d76:	2d 91       	ld	r18, X+
     d78:	3c 91       	ld	r19, X
     d7a:	13 97       	sbiw	r26, 0x03	; 3
     d7c:	82 17       	cp	r24, r18
     d7e:	93 07       	cpc	r25, r19
     d80:	30 f0       	brcs	.+12     	; 0xd8e <bufferGetFromFront+0x4e>
		{
			buffer->dataindex -= buffer->size;
     d82:	82 1b       	sub	r24, r18
     d84:	93 0b       	sbc	r25, r19
     d86:	17 96       	adiw	r26, 0x07	; 7
     d88:	9c 93       	st	X, r25
     d8a:	8e 93       	st	-X, r24
     d8c:	16 97       	sbiw	r26, 0x06	; 6
		}
		buffer->datalength--;
     d8e:	14 96       	adiw	r26, 0x04	; 4
     d90:	8d 91       	ld	r24, X+
     d92:	9c 91       	ld	r25, X
     d94:	15 97       	sbiw	r26, 0x05	; 5
     d96:	01 97       	sbiw	r24, 0x01	; 1
     d98:	15 96       	adiw	r26, 0x05	; 5
     d9a:	9c 93       	st	X, r25
     d9c:	8e 93       	st	-X, r24
     d9e:	14 97       	sbiw	r26, 0x04	; 4
	}
	// end critical section
	CRITICAL_SECTION_END;
     da0:	4f bf       	out	0x3f, r20	; 63
	// return
	return data;
}
     da2:	8e 2f       	mov	r24, r30
     da4:	08 95       	ret

00000da6 <bufferDumpFromFront>:

void bufferDumpFromFront(cBuffer* buffer, unsigned short numbytes)
{
     da6:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
     da8:	4f b7       	in	r20, 0x3f	; 63
     daa:	f8 94       	cli
	// dump numbytes from the front of the buffer
	// are we dumping less than the entire buffer?
	if(numbytes < buffer->datalength)
     dac:	84 81       	ldd	r24, Z+4	; 0x04
     dae:	95 81       	ldd	r25, Z+5	; 0x05
     db0:	68 17       	cp	r22, r24
     db2:	79 07       	cpc	r23, r25
     db4:	b0 f4       	brcc	.+44     	; 0xde2 <bufferDumpFromFront+0x3c>
	{
		// move index down by numbytes and decrement length by numbytes
		buffer->dataindex += numbytes;
     db6:	86 81       	ldd	r24, Z+6	; 0x06
     db8:	97 81       	ldd	r25, Z+7	; 0x07
     dba:	86 0f       	add	r24, r22
     dbc:	97 1f       	adc	r25, r23
     dbe:	97 83       	std	Z+7, r25	; 0x07
     dc0:	86 83       	std	Z+6, r24	; 0x06
		if(buffer->dataindex >= buffer->size)
     dc2:	22 81       	ldd	r18, Z+2	; 0x02
     dc4:	33 81       	ldd	r19, Z+3	; 0x03
     dc6:	82 17       	cp	r24, r18
     dc8:	93 07       	cpc	r25, r19
     dca:	20 f0       	brcs	.+8      	; 0xdd4 <bufferDumpFromFront+0x2e>
		{
			buffer->dataindex -= buffer->size;
     dcc:	82 1b       	sub	r24, r18
     dce:	93 0b       	sbc	r25, r19
     dd0:	97 83       	std	Z+7, r25	; 0x07
     dd2:	86 83       	std	Z+6, r24	; 0x06
		}
		buffer->datalength -= numbytes;
     dd4:	84 81       	ldd	r24, Z+4	; 0x04
     dd6:	95 81       	ldd	r25, Z+5	; 0x05
     dd8:	86 1b       	sub	r24, r22
     dda:	97 0b       	sbc	r25, r23
     ddc:	95 83       	std	Z+5, r25	; 0x05
     dde:	84 83       	std	Z+4, r24	; 0x04
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <bufferDumpFromFront+0x40>
	}
	else
	{
		// flush the whole buffer
		buffer->datalength = 0;
     de2:	15 82       	std	Z+5, r1	; 0x05
     de4:	14 82       	std	Z+4, r1	; 0x04
	}
	// end critical section
	CRITICAL_SECTION_END;
     de6:	4f bf       	out	0x3f, r20	; 63
}
     de8:	08 95       	ret

00000dea <bufferGetAtIndex>:

unsigned char bufferGetAtIndex(cBuffer* buffer, unsigned short index)
{
     dea:	fc 01       	movw	r30, r24
     dec:	cb 01       	movw	r24, r22
	// begin critical section
	CRITICAL_SECTION_START;
     dee:	2f b7       	in	r18, 0x3f	; 63
     df0:	f8 94       	cli
	// return character at index in buffer
	unsigned char data = buffer->dataptr[(buffer->dataindex+index)%(buffer->size)];
	// end critical section
	CRITICAL_SECTION_END;
     df2:	2f bf       	out	0x3f, r18	; 63
     df4:	26 81       	ldd	r18, Z+6	; 0x06
     df6:	37 81       	ldd	r19, Z+7	; 0x07
     df8:	62 81       	ldd	r22, Z+2	; 0x02
     dfa:	73 81       	ldd	r23, Z+3	; 0x03
     dfc:	82 0f       	add	r24, r18
     dfe:	93 1f       	adc	r25, r19
     e00:	0e 94 04 14 	call	0x2808	; 0x2808 <__udivmodhi4>
     e04:	01 90       	ld	r0, Z+
     e06:	f0 81       	ld	r31, Z
     e08:	e0 2d       	mov	r30, r0
     e0a:	e8 0f       	add	r30, r24
     e0c:	f9 1f       	adc	r31, r25
	return data;
}
     e0e:	80 81       	ld	r24, Z
     e10:	08 95       	ret

00000e12 <bufferAddToEnd>:

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
     e12:	1f 93       	push	r17
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	ec 01       	movw	r28, r24
     e1a:	16 2f       	mov	r17, r22
	// begin critical section
	CRITICAL_SECTION_START;
     e1c:	4f b7       	in	r20, 0x3f	; 63
     e1e:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
     e20:	2c 81       	ldd	r18, Y+4	; 0x04
     e22:	3d 81       	ldd	r19, Y+5	; 0x05
     e24:	6a 81       	ldd	r22, Y+2	; 0x02
     e26:	7b 81       	ldd	r23, Y+3	; 0x03
     e28:	26 17       	cp	r18, r22
     e2a:	37 07       	cpc	r19, r23
     e2c:	98 f4       	brcc	.+38     	; 0xe54 <bufferAddToEnd+0x42>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
     e2e:	8e 81       	ldd	r24, Y+6	; 0x06
     e30:	9f 81       	ldd	r25, Y+7	; 0x07
     e32:	82 0f       	add	r24, r18
     e34:	93 1f       	adc	r25, r19
     e36:	0e 94 04 14 	call	0x2808	; 0x2808 <__udivmodhi4>
     e3a:	e8 81       	ld	r30, Y
     e3c:	f9 81       	ldd	r31, Y+1	; 0x01
     e3e:	e8 0f       	add	r30, r24
     e40:	f9 1f       	adc	r31, r25
     e42:	10 83       	st	Z, r17
		// increment the length
		buffer->datalength++;
     e44:	8c 81       	ldd	r24, Y+4	; 0x04
     e46:	9d 81       	ldd	r25, Y+5	; 0x05
     e48:	01 96       	adiw	r24, 0x01	; 1
     e4a:	9d 83       	std	Y+5, r25	; 0x05
     e4c:	8c 83       	std	Y+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
     e4e:	4f bf       	out	0x3f, r20	; 63
     e50:	8f ef       	ldi	r24, 0xFF	; 255
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <bufferAddToEnd+0x46>
		// return success
		return -1;
	}
	// end critical section
	CRITICAL_SECTION_END;
     e54:	4f bf       	out	0x3f, r20	; 63
     e56:	80 e0       	ldi	r24, 0x00	; 0
	// return failure
	return 0;
}
     e58:	df 91       	pop	r29
     e5a:	cf 91       	pop	r28
     e5c:	1f 91       	pop	r17
     e5e:	08 95       	ret

00000e60 <__vector_18>:

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(SIG_UART_RECV)
{
     e60:	1f 92       	push	r1
     e62:	0f 92       	push	r0
     e64:	0f b6       	in	r0, 0x3f	; 63
     e66:	0f 92       	push	r0
     e68:	11 24       	eor	r1, r1
     e6a:	2f 93       	push	r18
     e6c:	3f 93       	push	r19
     e6e:	4f 93       	push	r20
     e70:	5f 93       	push	r21
     e72:	6f 93       	push	r22
     e74:	7f 93       	push	r23
     e76:	8f 93       	push	r24
     e78:	9f 93       	push	r25
     e7a:	af 93       	push	r26
     e7c:	bf 93       	push	r27
     e7e:	ef 93       	push	r30
     e80:	ff 93       	push	r31
	u08 c;
	
	// get received char
	c = inb(UDR);
     e82:	60 91 c6 00 	lds	r22, 0x00C6

	// if there's a user function to handle this receive event
	if(UartRxFunc)
     e86:	80 91 f3 02 	lds	r24, 0x02F3
     e8a:	90 91 f4 02 	lds	r25, 0x02F4
     e8e:	89 2b       	or	r24, r25
     e90:	39 f0       	breq	.+14     	; 0xea0 <__vector_18+0x40>
	{
		// call it and pass the received data
		UartRxFunc(c);
     e92:	e0 91 f3 02 	lds	r30, 0x02F3
     e96:	f0 91 f4 02 	lds	r31, 0x02F4
     e9a:	86 2f       	mov	r24, r22
     e9c:	09 95       	icall
     e9e:	0f c0       	rjmp	.+30     	; 0xebe <__vector_18+0x5e>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
     ea0:	84 e0       	ldi	r24, 0x04	; 4
     ea2:	93 e0       	ldi	r25, 0x03	; 3
     ea4:	0e 94 09 07 	call	0xe12	; 0xe12 <bufferAddToEnd>
     ea8:	88 23       	and	r24, r24
     eaa:	49 f4       	brne	.+18     	; 0xebe <__vector_18+0x5e>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
     eac:	80 91 21 03 	lds	r24, 0x0321
     eb0:	90 91 22 03 	lds	r25, 0x0322
     eb4:	01 96       	adiw	r24, 0x01	; 1
     eb6:	90 93 22 03 	sts	0x0322, r25
     eba:	80 93 21 03 	sts	0x0321, r24
		}
	}
}
     ebe:	ff 91       	pop	r31
     ec0:	ef 91       	pop	r30
     ec2:	bf 91       	pop	r27
     ec4:	af 91       	pop	r26
     ec6:	9f 91       	pop	r25
     ec8:	8f 91       	pop	r24
     eca:	7f 91       	pop	r23
     ecc:	6f 91       	pop	r22
     ece:	5f 91       	pop	r21
     ed0:	4f 91       	pop	r20
     ed2:	3f 91       	pop	r19
     ed4:	2f 91       	pop	r18
     ed6:	0f 90       	pop	r0
     ed8:	0f be       	out	0x3f, r0	; 63
     eda:	0f 90       	pop	r0
     edc:	1f 90       	pop	r1
     ede:	18 95       	reti

00000ee0 <uartAddToTxBuffer>:
	}
}

// add byte to end of uart Tx buffer
u08 uartAddToTxBuffer(u08 data)
{
     ee0:	68 2f       	mov	r22, r24
     ee2:	89 e1       	ldi	r24, 0x19	; 25
     ee4:	93 e0       	ldi	r25, 0x03	; 3
     ee6:	0e 94 09 07 	call	0xe12	; 0xe12 <bufferAddToEnd>
	// add data byte to the end of the tx buffer
	return bufferAddToEnd(&uartTxBuffer, data);
}
     eea:	08 95       	ret

00000eec <bufferIsNotFull>:

unsigned short bufferIsNotFull(cBuffer* buffer)
{
     eec:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
     eee:	8f b7       	in	r24, 0x3f	; 63
     ef0:	f8 94       	cli
	// check to see if the buffer has room
	// return true if there is room
	unsigned short bytesleft = (buffer->size - buffer->datalength);
	// end critical section
	CRITICAL_SECTION_END;
     ef2:	8f bf       	out	0x3f, r24	; 63
     ef4:	22 81       	ldd	r18, Z+2	; 0x02
     ef6:	33 81       	ldd	r19, Z+3	; 0x03
     ef8:	84 81       	ldd	r24, Z+4	; 0x04
     efa:	95 81       	ldd	r25, Z+5	; 0x05
     efc:	28 1b       	sub	r18, r24
     efe:	39 0b       	sbc	r19, r25
	return bytesleft;
}
     f00:	c9 01       	movw	r24, r18
     f02:	08 95       	ret

00000f04 <bufferFlush>:

void bufferFlush(cBuffer* buffer)
{
     f04:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
     f06:	8f b7       	in	r24, 0x3f	; 63
     f08:	f8 94       	cli
	// flush contents of the buffer
	buffer->datalength = 0;
     f0a:	15 82       	std	Z+5, r1	; 0x05
     f0c:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
     f0e:	8f bf       	out	0x3f, r24	; 63
}
     f10:	08 95       	ret

00000f12 <__vector_7>:
double Ls;
double Cs;

// because of the 1024 prescaler and 125 CPC, at 16MHz, 
// this routine gets called at 125Hz
ISR(TIMER2_COMPA_vect) {
     f12:	1f 92       	push	r1
     f14:	0f 92       	push	r0
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	0f 92       	push	r0
     f1a:	11 24       	eor	r1, r1
     f1c:	2f 93       	push	r18
     f1e:	3f 93       	push	r19
     f20:	4f 93       	push	r20
     f22:	5f 93       	push	r21
     f24:	8f 93       	push	r24
     f26:	9f 93       	push	r25
     f28:	af 93       	push	r26
     f2a:	bf 93       	push	r27
	freq_count_16 = TCNT1; // get the count contained in the counter, NOW
     f2c:	20 91 84 00 	lds	r18, 0x0084
     f30:	30 91 85 00 	lds	r19, 0x0085
     f34:	30 93 72 02 	sts	0x0272, r19
     f38:	20 93 71 02 	sts	0x0271, r18
	if(timer2_div25 == 24) { // because of div by 25, this routine gets called at 5Hz
     f3c:	80 91 6f 02 	lds	r24, 0x026F
     f40:	90 91 70 02 	lds	r25, 0x0270
     f44:	48 97       	sbiw	r24, 0x18	; 24
     f46:	01 f5       	brne	.+64     	; 0xf88 <__vector_7+0x76>
		TCNT1 = 0;
     f48:	10 92 85 00 	sts	0x0085, r1
     f4c:	10 92 84 00 	sts	0x0084, r1
		running = freq_count_16 + (65536 * freq_24);
     f50:	80 91 6e 02 	lds	r24, 0x026E
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	a0 e0       	ldi	r26, 0x00	; 0
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	dc 01       	movw	r26, r24
     f5c:	99 27       	eor	r25, r25
     f5e:	88 27       	eor	r24, r24
     f60:	40 e0       	ldi	r20, 0x00	; 0
     f62:	50 e0       	ldi	r21, 0x00	; 0
     f64:	82 0f       	add	r24, r18
     f66:	93 1f       	adc	r25, r19
     f68:	a4 1f       	adc	r26, r20
     f6a:	b5 1f       	adc	r27, r21
     f6c:	80 93 fc 02 	sts	0x02FC, r24
     f70:	90 93 fd 02 	sts	0x02FD, r25
     f74:	a0 93 fe 02 	sts	0x02FE, r26
     f78:	b0 93 ff 02 	sts	0x02FF, r27

		// reset things AFTER sending to display!
		timer2_div25 = 0;
     f7c:	10 92 70 02 	sts	0x0270, r1
     f80:	10 92 6f 02 	sts	0x026F, r1
		freq_24 = 0;
     f84:	10 92 6e 02 	sts	0x026E, r1

	}

	timer2_div25++;
     f88:	80 91 6f 02 	lds	r24, 0x026F
     f8c:	90 91 70 02 	lds	r25, 0x0270
     f90:	01 96       	adiw	r24, 0x01	; 1
     f92:	90 93 70 02 	sts	0x0270, r25
     f96:	80 93 6f 02 	sts	0x026F, r24
	
}
     f9a:	bf 91       	pop	r27
     f9c:	af 91       	pop	r26
     f9e:	9f 91       	pop	r25
     fa0:	8f 91       	pop	r24
     fa2:	5f 91       	pop	r21
     fa4:	4f 91       	pop	r20
     fa6:	3f 91       	pop	r19
     fa8:	2f 91       	pop	r18
     faa:	0f 90       	pop	r0
     fac:	0f be       	out	0x3f, r0	; 63
     fae:	0f 90       	pop	r0
     fb0:	1f 90       	pop	r1
     fb2:	18 95       	reti

00000fb4 <__vector_13>:

// this timer will overflow twice or so
ISR(TIMER1_OVF_vect) {
     fb4:	1f 92       	push	r1
     fb6:	0f 92       	push	r0
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	0f 92       	push	r0
     fbc:	11 24       	eor	r1, r1
     fbe:	8f 93       	push	r24
	freq_24++;
     fc0:	80 91 6e 02 	lds	r24, 0x026E
     fc4:	8f 5f       	subi	r24, 0xFF	; 255
     fc6:	80 93 6e 02 	sts	0x026E, r24
}
     fca:	8f 91       	pop	r24
     fcc:	0f 90       	pop	r0
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	0f 90       	pop	r0
     fd2:	1f 90       	pop	r1
     fd4:	18 95       	reti

00000fd6 <init>:

void init(void) {
     fd6:	e1 e8       	ldi	r30, 0x81	; 129
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	87 60       	ori	r24, 0x07	; 7
     fde:	80 83       	st	Z, r24

	// set up the 16 bit timer as an external frequency counter:
	TCCR1B |= (1 << CS10)|(1 << CS11)|(1 << CS12); // External clock, rising edge
	TIMSK1 |= (1 << TOIE1); // Enable overflow interrupt, it will overflow a few times in counting frequency
     fe0:	ef e6       	ldi	r30, 0x6F	; 111
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	81 60       	ori	r24, 0x01	; 1
     fe8:	80 83       	st	Z, r24
	
	// set up the 8 bit timer as a timebase for the frequency counter:
	TCCR2A |= (1 << WGM21);
     fea:	e0 eb       	ldi	r30, 0xB0	; 176
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	82 60       	ori	r24, 0x02	; 2
     ff2:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS22)|(1 << CS21)|(1 << CS20); // CTC mode, 1024-bit prescale
     ff4:	e1 eb       	ldi	r30, 0xB1	; 177
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	87 60       	ori	r24, 0x07	; 7
     ffc:	80 83       	st	Z, r24
	OCR2A = 125; // something we can factor into .2 second delays (at 16MHz) with some arithmetic
     ffe:	8d e7       	ldi	r24, 0x7D	; 125
    1000:	80 93 b3 00 	sts	0x00B3, r24
	TIMSK2 |= (1 << OCIE2A);
    1004:	e0 e7       	ldi	r30, 0x70	; 112
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	82 60       	ori	r24, 0x02	; 2
    100c:	80 83       	st	Z, r24

	// set up inputs and outputs:
	// enable  PD2 output, PD3 & PD4 inputs
	sbi(DDRD, PD6); // flashing LED to show we're running
    100e:	56 9a       	sbi	0x0a, 6	; 10
	sbi(DDRD, PD3);	// calibration relay
    1010:	53 9a       	sbi	0x0a, 3	; 10
	cbi(DDRD, PD4); // switch to indicate L or C, use pullup
    1012:	54 98       	cbi	0x0a, 4	; 10
	cbi(DDRD, PD7);	// pushbutton zeroing
    1014:	57 98       	cbi	0x0a, 7	; 10
	sbi(PORTD, PD4); // pullup on L/C switch
    1016:	5c 9a       	sbi	0x0b, 4	; 11
	sbi(PORTD, PD7); // pullup on zero pushbutton
    1018:	5f 9a       	sbi	0x0b, 7	; 11


}
    101a:	08 95       	ret

0000101c <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
    101c:	7f 92       	push	r7
    101e:	8f 92       	push	r8
    1020:	9f 92       	push	r9
    1022:	af 92       	push	r10
    1024:	bf 92       	push	r11
    1026:	cf 92       	push	r12
    1028:	df 92       	push	r13
    102a:	ef 92       	push	r14
    102c:	ff 92       	push	r15
    102e:	0f 93       	push	r16
    1030:	1f 93       	push	r17
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	78 88       	ldd	r7, Y+16	; 0x10
    103c:	c9 88       	ldd	r12, Y+17	; 0x11
    103e:	da 88       	ldd	r13, Y+18	; 0x12
    1040:	f3 e1       	ldi	r31, 0x13	; 19
    1042:	ef 2e       	mov	r14, r31
    1044:	f1 2c       	mov	r15, r1
    1046:	ec 0e       	add	r14, r28
    1048:	fd 1e       	adc	r15, r29
    104a:	14 c0       	rjmp	.+40     	; 0x1074 <rprintf1RamRom+0x58>
	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
		{	// Until '%' or '\0'
			if (!format_flag)
    104c:	88 23       	and	r24, r24
    104e:	81 f4       	brne	.+32     	; 0x1070 <rprintf1RamRom+0x54>
				div_val /= base;
			} while (div_val);
		}
	}
	va_end(ap);
}
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	1f 91       	pop	r17
    105a:	0f 91       	pop	r16
    105c:	ff 90       	pop	r15
    105e:	ef 90       	pop	r14
    1060:	df 90       	pop	r13
    1062:	cf 90       	pop	r12
    1064:	bf 90       	pop	r11
    1066:	af 90       	pop	r10
    1068:	9f 90       	pop	r9
    106a:	8f 90       	pop	r8
    106c:	7f 90       	pop	r7
    106e:	08 95       	ret
			if (!format_flag)
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
    1070:	0e 94 aa 02 	call	0x554	; 0x554 <rprintfChar>
    1074:	96 01       	movw	r18, r12
    1076:	2f 5f       	subi	r18, 0xFF	; 255
    1078:	3f 4f       	sbci	r19, 0xFF	; 255
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
    107a:	77 20       	and	r7, r7
    107c:	21 f0       	breq	.+8      	; 0x1086 <rprintf1RamRom+0x6a>
    107e:	f6 01       	movw	r30, r12
    1080:	69 01       	movw	r12, r18
    1082:	84 91       	lpm	r24, Z+
    1084:	03 c0       	rjmp	.+6      	; 0x108c <rprintf1RamRom+0x70>
    1086:	f6 01       	movw	r30, r12
    1088:	80 81       	ld	r24, Z
    108a:	69 01       	movw	r12, r18
    108c:	85 32       	cpi	r24, 0x25	; 37
    108e:	f1 f6       	brne	.-68     	; 0x104c <rprintf1RamRom+0x30>
    1090:	2f 5f       	subi	r18, 0xFF	; 255
    1092:	3f 4f       	sbci	r19, 0xFF	; 255
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
    1094:	77 20       	and	r7, r7
    1096:	21 f0       	breq	.+8      	; 0x10a0 <rprintf1RamRom+0x84>
    1098:	f6 01       	movw	r30, r12
    109a:	69 01       	movw	r12, r18
    109c:	84 91       	lpm	r24, Z+
    109e:	03 c0       	rjmp	.+6      	; 0x10a6 <rprintf1RamRom+0x8a>
    10a0:	f6 01       	movw	r30, r12
    10a2:	80 81       	ld	r24, Z
    10a4:	69 01       	movw	r12, r18
    10a6:	84 36       	cpi	r24, 0x64	; 100
    10a8:	29 f0       	breq	.+10     	; 0x10b4 <rprintf1RamRom+0x98>
    10aa:	88 37       	cpi	r24, 0x78	; 120
    10ac:	81 f0       	breq	.+32     	; 0x10ce <rprintf1RamRom+0xb2>
    10ae:	83 36       	cpi	r24, 0x63	; 99
    10b0:	f9 f6       	brne	.-66     	; 0x1070 <rprintf1RamRom+0x54>
    10b2:	06 c0       	rjmp	.+12     	; 0x10c0 <rprintf1RamRom+0xa4>
    10b4:	00 e1       	ldi	r16, 0x10	; 16
    10b6:	17 e2       	ldi	r17, 0x27	; 39
    10b8:	ea e0       	ldi	r30, 0x0A	; 10
    10ba:	ae 2e       	mov	r10, r30
    10bc:	b1 2c       	mov	r11, r1
    10be:	0c c0       	rjmp	.+24     	; 0x10d8 <rprintf1RamRom+0xbc>
		{
			case 'c': format_flag = va_arg(ap,int);
    10c0:	f7 01       	movw	r30, r14
    10c2:	80 81       	ld	r24, Z
    10c4:	22 e0       	ldi	r18, 0x02	; 2
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	e2 0e       	add	r14, r18
    10ca:	f3 1e       	adc	r15, r19
    10cc:	d1 cf       	rjmp	.-94     	; 0x1070 <rprintf1RamRom+0x54>
			default:  rprintfChar(format_flag); continue;
    10ce:	00 e0       	ldi	r16, 0x00	; 0
    10d0:	10 e1       	ldi	r17, 0x10	; 16
    10d2:	70 e1       	ldi	r23, 0x10	; 16
    10d4:	a7 2e       	mov	r10, r23
    10d6:	b1 2c       	mov	r11, r1
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
    10d8:	62 e0       	ldi	r22, 0x02	; 2
    10da:	86 2e       	mov	r8, r22
    10dc:	91 2c       	mov	r9, r1
    10de:	8e 0c       	add	r8, r14
    10e0:	9f 1c       	adc	r9, r15
    10e2:	f7 01       	movw	r30, r14
    10e4:	e0 80       	ld	r14, Z
    10e6:	f1 80       	ldd	r15, Z+1	; 0x01
			if (format_flag == 'd')
    10e8:	84 36       	cpi	r24, 0x64	; 100
    10ea:	b1 f4       	brne	.+44     	; 0x1118 <rprintf1RamRom+0xfc>
			{
				if (((int)u_val) < 0)
    10ec:	f7 fe       	sbrs	r15, 7
    10ee:	11 c0       	rjmp	.+34     	; 0x1112 <rprintf1RamRom+0xf6>
				{
					u_val = - u_val;
    10f0:	f0 94       	com	r15
    10f2:	e1 94       	neg	r14
    10f4:	f1 08       	sbc	r15, r1
    10f6:	f3 94       	inc	r15
					rprintfChar('-');
    10f8:	8d e2       	ldi	r24, 0x2D	; 45
    10fa:	0e 94 aa 02 	call	0x554	; 0x554 <rprintfChar>
    10fe:	09 c0       	rjmp	.+18     	; 0x1112 <rprintf1RamRom+0xf6>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
    1100:	c8 01       	movw	r24, r16
    1102:	6a e0       	ldi	r22, 0x0A	; 10
    1104:	70 e0       	ldi	r23, 0x00	; 0
    1106:	0e 94 04 14 	call	0x2808	; 0x2808 <__udivmodhi4>
    110a:	8b 01       	movw	r16, r22
    110c:	62 30       	cpi	r22, 0x02	; 2
    110e:	71 05       	cpc	r23, r1
    1110:	18 f0       	brcs	.+6      	; 0x1118 <rprintf1RamRom+0xfc>
    1112:	e0 16       	cp	r14, r16
    1114:	f1 06       	cpc	r15, r17
    1116:	a0 f3       	brcs	.-24     	; 0x1100 <rprintf1RamRom+0xe4>
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
    1118:	c7 01       	movw	r24, r14
    111a:	b8 01       	movw	r22, r16
    111c:	0e 94 04 14 	call	0x2808	; 0x2808 <__udivmodhi4>
    1120:	86 2f       	mov	r24, r22
    1122:	0e 94 0d 03 	call	0x61a	; 0x61a <rprintfu04>
				u_val %= div_val;
    1126:	c7 01       	movw	r24, r14
    1128:	b8 01       	movw	r22, r16
    112a:	0e 94 04 14 	call	0x2808	; 0x2808 <__udivmodhi4>
    112e:	7c 01       	movw	r14, r24
				div_val /= base;
    1130:	c8 01       	movw	r24, r16
    1132:	b5 01       	movw	r22, r10
    1134:	0e 94 04 14 	call	0x2808	; 0x2808 <__udivmodhi4>
    1138:	8b 01       	movw	r16, r22
			} while (div_val);
    113a:	61 15       	cp	r22, r1
    113c:	71 05       	cpc	r23, r1
    113e:	61 f7       	brne	.-40     	; 0x1118 <rprintf1RamRom+0xfc>
    1140:	74 01       	movw	r14, r8
    1142:	98 cf       	rjmp	.-208    	; 0x1074 <rprintf1RamRom+0x58>

00001144 <main>:



//----- Begin Code ------------------------------------------------------------
int main(void)
{
    1144:	2f 92       	push	r2
    1146:	3f 92       	push	r3
    1148:	4f 92       	push	r4
    114a:	5f 92       	push	r5
    114c:	6f 92       	push	r6
    114e:	7f 92       	push	r7
    1150:	8f 92       	push	r8
    1152:	9f 92       	push	r9
    1154:	af 92       	push	r10
    1156:	bf 92       	push	r11
    1158:	cf 92       	push	r12
    115a:	df 92       	push	r13
    115c:	ef 92       	push	r14
    115e:	ff 92       	push	r15
    1160:	0f 93       	push	r16
    1162:	1f 93       	push	r17
    1164:	cf 93       	push	r28
    1166:	df 93       	push	r29
	char *cal_message3 = "calibrating...  ";
	char *blank_lcd_line = "                ";	

	
	// initialize LCD
	lcdInit();
    1168:	0e 94 b7 05 	call	0xb6e	; 0xb6e <lcdInit>


	// init timers and I/O:
	init();
    116c:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <init>
	sei();  // enable global interrupts
    1170:	78 94       	sei
// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
	rputchar = putchar_func;
    1172:	8d e5       	ldi	r24, 0x5D	; 93
    1174:	95 e0       	ldi	r25, 0x05	; 5
    1176:	90 93 f6 02 	sts	0x02F6, r25
    117a:	80 93 f5 02 	sts	0x02F5, r24

	// direct printf output to LCD
	rprintfInit(lcdDataWrite);

	// print vanity message on LCD for a second:
	rprintfStr(welcome_msg1);
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	91 e0       	ldi	r25, 0x01	; 1
    1182:	0e 94 bc 02 	call	0x578	; 0x578 <rprintfStr>
	lcdGotoXY(0,1);
    1186:	61 e0       	ldi	r22, 0x01	; 1
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	0e 94 dd 05 	call	0xbba	; 0xbba <lcdGotoXY>
	rprintfStr(welcome_msg2);
    118e:	81 e1       	ldi	r24, 0x11	; 17
    1190:	91 e0       	ldi	r25, 0x01	; 1
    1192:	0e 94 bc 02 	call	0x578	; 0x578 <rprintfStr>
    1196:	80 e1       	ldi	r24, 0x10	; 16
    1198:	97 e2       	ldi	r25, 0x27	; 39
    119a:	20 e9       	ldi	r18, 0x90	; 144
    119c:	31 e0       	ldi	r19, 0x01	; 1
    119e:	f9 01       	movw	r30, r18
    11a0:	31 97       	sbiw	r30, 0x01	; 1
    11a2:	f1 f7       	brne	.-4      	; 0x11a0 <main+0x5c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11a6:	d9 f7       	brne	.-10     	; 0x119e <main+0x5a>
	_delay_ms(1000);
	
	// initialize the UART (serial port)
	uartInit();
    11a8:	0e 94 64 01 	call	0x2c8	; 0x2c8 <uartInit>
    11ac:	c0 eb       	ldi	r28, 0xB0	; 176
    11ae:	d1 e0       	ldi	r29, 0x01	; 1
    11b0:	d0 93 f6 02 	sts	0x02F6, r29
    11b4:	c0 93 f5 02 	sts	0x02F5, r28
	// make all rprintf statements use uart for output
	rprintfInit(uartSendByte);
	// print a little intro message so we know things are working
	rprintfStr(welcome_msg1);
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	91 e0       	ldi	r25, 0x01	; 1
    11bc:	0e 94 bc 02 	call	0x578	; 0x578 <rprintfStr>
	rprintf("\r\nhttp://www.");
    11c0:	83 ea       	ldi	r24, 0xA3	; 163
    11c2:	91 e0       	ldi	r25, 0x01	; 1
    11c4:	9f 93       	push	r25
    11c6:	8f 93       	push	r24
    11c8:	11 e0       	ldi	r17, 0x01	; 1
    11ca:	1f 93       	push	r17
    11cc:	0e 94 0e 08 	call	0x101c	; 0x101c <rprintf1RamRom>
	rprintfStr(welcome_msg2);
    11d0:	81 e1       	ldi	r24, 0x11	; 17
    11d2:	91 e0       	ldi	r25, 0x01	; 1
    11d4:	0e 94 bc 02 	call	0x578	; 0x578 <rprintfStr>
	rprintf("\r\n");
    11d8:	80 ea       	ldi	r24, 0xA0	; 160
    11da:	91 e0       	ldi	r25, 0x01	; 1
    11dc:	9f 93       	push	r25
    11de:	8f 93       	push	r24
    11e0:	1f 93       	push	r17
    11e2:	0e 94 0e 08 	call	0x101c	; 0x101c <rprintf1RamRom>


	// instruct about setting mode switch to C for calibration
	if(bit_is_clear(PIND, 4)) {
    11e6:	8d b7       	in	r24, 0x3d	; 61
    11e8:	9e b7       	in	r25, 0x3e	; 62
    11ea:	06 96       	adiw	r24, 0x06	; 6
    11ec:	0f b6       	in	r0, 0x3f	; 63
    11ee:	f8 94       	cli
    11f0:	9e bf       	out	0x3e, r25	; 62
    11f2:	0f be       	out	0x3f, r0	; 63
    11f4:	8d bf       	out	0x3d, r24	; 61
    11f6:	4c 99       	sbic	0x09, 4	; 9
    11f8:	2c c0       	rjmp	.+88     	; 0x1252 <main+0x10e>
    11fa:	8d e5       	ldi	r24, 0x5D	; 93
    11fc:	95 e0       	ldi	r25, 0x05	; 5
    11fe:	90 93 f6 02 	sts	0x02F6, r25
    1202:	80 93 f5 02 	sts	0x02F5, r24
		rprintfInit(lcdDataWrite);
		lcdGotoXY(0,0);
    1206:	60 e0       	ldi	r22, 0x00	; 0
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	0e 94 dd 05 	call	0xbba	; 0xbba <lcdGotoXY>
		rprintfStr(cal_message1);
    120e:	82 e2       	ldi	r24, 0x22	; 34
    1210:	91 e0       	ldi	r25, 0x01	; 1
    1212:	0e 94 bc 02 	call	0x578	; 0x578 <rprintfStr>
		lcdGotoXY(0,1);
    1216:	61 e0       	ldi	r22, 0x01	; 1
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	0e 94 dd 05 	call	0xbba	; 0xbba <lcdGotoXY>
		rprintfStr(cal_message2);
    121e:	83 e3       	ldi	r24, 0x33	; 51
    1220:	91 e0       	ldi	r25, 0x01	; 1
    1222:	0e 94 bc 02 	call	0x578	; 0x578 <rprintfStr>
    1226:	d0 93 f6 02 	sts	0x02F6, r29
    122a:	c0 93 f5 02 	sts	0x02F5, r28
		
		rprintfInit(uartSendByte);
		rprintfStr(cal_message1);
    122e:	82 e2       	ldi	r24, 0x22	; 34
    1230:	91 e0       	ldi	r25, 0x01	; 1
    1232:	0e 94 bc 02 	call	0x578	; 0x578 <rprintfStr>
		rprintfStr(cal_message2);
    1236:	83 e3       	ldi	r24, 0x33	; 51
    1238:	91 e0       	ldi	r25, 0x01	; 1
    123a:	0e 94 bc 02 	call	0x578	; 0x578 <rprintfStr>
		rprintf("\r\n");
    123e:	8d e9       	ldi	r24, 0x9D	; 157
    1240:	91 e0       	ldi	r25, 0x01	; 1
    1242:	9f 93       	push	r25
    1244:	8f 93       	push	r24
    1246:	1f 93       	push	r17
    1248:	0e 94 0e 08 	call	0x101c	; 0x101c <rprintf1RamRom>
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
	}
	while(bit_is_clear(PIND, 4)) {
    1252:	4c 9b       	sbis	0x09, 4	; 9
    1254:	fe cf       	rjmp	.-4      	; 0x1252 <main+0x10e>
		// wait for user to switch mode to C
	}
	
	// send out the calibration message:
	rprintfStr(cal_message3);
    1256:	84 e4       	ldi	r24, 0x44	; 68
    1258:	91 e0       	ldi	r25, 0x01	; 1
    125a:	0e 94 bc 02 	call	0x578	; 0x578 <rprintfStr>
	rprintf("\r\n");
    125e:	8a e9       	ldi	r24, 0x9A	; 154
    1260:	91 e0       	ldi	r25, 0x01	; 1
    1262:	9f 93       	push	r25
    1264:	8f 93       	push	r24
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	8f 93       	push	r24
    126a:	0e 94 0e 08 	call	0x101c	; 0x101c <rprintf1RamRom>
    126e:	8d e5       	ldi	r24, 0x5D	; 93
    1270:	95 e0       	ldi	r25, 0x05	; 5
    1272:	90 93 f6 02 	sts	0x02F6, r25
    1276:	80 93 f5 02 	sts	0x02F5, r24
	rprintfInit(lcdDataWrite);
	lcdGotoXY(0,0);
    127a:	60 e0       	ldi	r22, 0x00	; 0
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	0e 94 dd 05 	call	0xbba	; 0xbba <lcdGotoXY>
	rprintfStr(cal_message3);
    1282:	84 e4       	ldi	r24, 0x44	; 68
    1284:	91 e0       	ldi	r25, 0x01	; 1
    1286:	0e 94 bc 02 	call	0x578	; 0x578 <rprintfStr>
	lcdGotoXY(0,1);
    128a:	61 e0       	ldi	r22, 0x01	; 1
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	0e 94 dd 05 	call	0xbba	; 0xbba <lcdGotoXY>
	rprintfStr(blank_lcd_line);
    1292:	85 e5       	ldi	r24, 0x55	; 85
    1294:	91 e0       	ldi	r25, 0x01	; 1
    1296:	0e 94 bc 02 	call	0x578	; 0x578 <rprintfStr>
    129a:	80 eb       	ldi	r24, 0xB0	; 176
    129c:	91 e0       	ldi	r25, 0x01	; 1
    129e:	90 93 f6 02 	sts	0x02F6, r25
    12a2:	80 93 f5 02 	sts	0x02F5, r24
    12a6:	20 e8       	ldi	r18, 0x80	; 128
    12a8:	3e e3       	ldi	r19, 0x3E	; 62
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	40 e9       	ldi	r20, 0x90	; 144
    12b2:	51 e0       	ldi	r21, 0x01	; 1
    12b4:	ca 01       	movw	r24, r20
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	f1 f7       	brne	.-4      	; 0x12b6 <main+0x172>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ba:	21 50       	subi	r18, 0x01	; 1
    12bc:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12be:	d1 f7       	brne	.-12     	; 0x12b4 <main+0x170>

	rprintfInit(uartSendByte);

	_delay_ms(1600);
	F1 = running;			// get open frequency
    12c0:	80 91 fc 02 	lds	r24, 0x02FC
    12c4:	90 91 fd 02 	lds	r25, 0x02FD
    12c8:	a0 91 fe 02 	lds	r26, 0x02FE
    12cc:	b0 91 ff 02 	lds	r27, 0x02FF
    12d0:	80 93 00 03 	sts	0x0300, r24
    12d4:	90 93 01 03 	sts	0x0301, r25
    12d8:	a0 93 02 03 	sts	0x0302, r26
    12dc:	b0 93 03 03 	sts	0x0303, r27
	rprintfNum(10, 10, 0, ' ', F1 * 5);
    12e0:	7c 01       	movw	r14, r24
    12e2:	8d 01       	movw	r16, r26
    12e4:	32 e0       	ldi	r19, 0x02	; 2
    12e6:	ee 0c       	add	r14, r14
    12e8:	ff 1c       	adc	r15, r15
    12ea:	00 1f       	adc	r16, r16
    12ec:	11 1f       	adc	r17, r17
    12ee:	3a 95       	dec	r19
    12f0:	d1 f7       	brne	.-12     	; 0x12e6 <main+0x1a2>
    12f2:	e8 0e       	add	r14, r24
    12f4:	f9 1e       	adc	r15, r25
    12f6:	0a 1f       	adc	r16, r26
    12f8:	1b 1f       	adc	r17, r27
    12fa:	20 e2       	ldi	r18, 0x20	; 32
    12fc:	40 e0       	ldi	r20, 0x00	; 0
    12fe:	6a e0       	ldi	r22, 0x0A	; 10
    1300:	8a e0       	ldi	r24, 0x0A	; 10
    1302:	0e 94 3f 03 	call	0x67e	; 0x67e <rprintfNum>
	rprintf("\r\n");
    1306:	87 e9       	ldi	r24, 0x97	; 151
    1308:	91 e0       	ldi	r25, 0x01	; 1
    130a:	9f 93       	push	r25
    130c:	8f 93       	push	r24
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	8f 93       	push	r24
    1312:	0e 94 0e 08 	call	0x101c	; 0x101c <rprintf1RamRom>
	sbi(PORTD, PD3); 		// energize relay
    1316:	5b 9a       	sbi	0x0b, 3	; 11
    1318:	20 e1       	ldi	r18, 0x10	; 16
    131a:	37 e2       	ldi	r19, 0x27	; 39
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	40 e9       	ldi	r20, 0x90	; 144
    1324:	51 e0       	ldi	r21, 0x01	; 1
    1326:	ca 01       	movw	r24, r20
    1328:	01 97       	sbiw	r24, 0x01	; 1
    132a:	f1 f7       	brne	.-4      	; 0x1328 <main+0x1e4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    132c:	21 50       	subi	r18, 0x01	; 1
    132e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1330:	d1 f7       	brne	.-12     	; 0x1326 <main+0x1e2>
	_delay_ms(1000);			// stabilize
	F2 = running;			// get test frequency
    1332:	80 91 fc 02 	lds	r24, 0x02FC
    1336:	90 91 fd 02 	lds	r25, 0x02FD
    133a:	a0 91 fe 02 	lds	r26, 0x02FE
    133e:	b0 91 ff 02 	lds	r27, 0x02FF
    1342:	80 93 15 03 	sts	0x0315, r24
    1346:	90 93 16 03 	sts	0x0316, r25
    134a:	a0 93 17 03 	sts	0x0317, r26
    134e:	b0 93 18 03 	sts	0x0318, r27
	rprintfNum(10, 10, 0, ' ', F2 * 5);
    1352:	7c 01       	movw	r14, r24
    1354:	8d 01       	movw	r16, r26
    1356:	22 e0       	ldi	r18, 0x02	; 2
    1358:	ee 0c       	add	r14, r14
    135a:	ff 1c       	adc	r15, r15
    135c:	00 1f       	adc	r16, r16
    135e:	11 1f       	adc	r17, r17
    1360:	2a 95       	dec	r18
    1362:	d1 f7       	brne	.-12     	; 0x1358 <main+0x214>
    1364:	e8 0e       	add	r14, r24
    1366:	f9 1e       	adc	r15, r25
    1368:	0a 1f       	adc	r16, r26
    136a:	1b 1f       	adc	r17, r27
    136c:	20 e2       	ldi	r18, 0x20	; 32
    136e:	40 e0       	ldi	r20, 0x00	; 0
    1370:	6a e0       	ldi	r22, 0x0A	; 10
    1372:	8a e0       	ldi	r24, 0x0A	; 10
    1374:	0e 94 3f 03 	call	0x67e	; 0x67e <rprintfNum>
	rprintf("\r\n");
    1378:	84 e9       	ldi	r24, 0x94	; 148
    137a:	91 e0       	ldi	r25, 0x01	; 1
    137c:	9f 93       	push	r25
    137e:	8f 93       	push	r24
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	8f 93       	push	r24
    1384:	0e 94 0e 08 	call	0x101c	; 0x101c <rprintf1RamRom>
	cbi(PORTD, PD3);		// turn off relay
    1388:	5b 98       	cbi	0x0b, 3	; 11
		
	// do some floating point:
	Cs = square(F2 * 5) * (.00000000092 / (square(F1 * 5) - square(F2 * 5))); // this should fit in a 64-bit value
    138a:	20 91 00 03 	lds	r18, 0x0300
    138e:	30 91 01 03 	lds	r19, 0x0301
    1392:	40 91 02 03 	lds	r20, 0x0302
    1396:	50 91 03 03 	lds	r21, 0x0303
    139a:	ca 01       	movw	r24, r20
    139c:	b9 01       	movw	r22, r18
    139e:	f2 e0       	ldi	r31, 0x02	; 2
    13a0:	66 0f       	add	r22, r22
    13a2:	77 1f       	adc	r23, r23
    13a4:	88 1f       	adc	r24, r24
    13a6:	99 1f       	adc	r25, r25
    13a8:	fa 95       	dec	r31
    13aa:	d1 f7       	brne	.-12     	; 0x13a0 <main+0x25c>
    13ac:	62 0f       	add	r22, r18
    13ae:	73 1f       	adc	r23, r19
    13b0:	84 1f       	adc	r24, r20
    13b2:	95 1f       	adc	r25, r21
    13b4:	0e 94 96 11 	call	0x232c	; 0x232c <__floatunsisf>
    13b8:	0e 94 71 14 	call	0x28e2	; 0x28e2 <square>
    13bc:	5b 01       	movw	r10, r22
    13be:	6c 01       	movw	r12, r24
    13c0:	20 91 15 03 	lds	r18, 0x0315
    13c4:	30 91 16 03 	lds	r19, 0x0316
    13c8:	40 91 17 03 	lds	r20, 0x0317
    13cc:	50 91 18 03 	lds	r21, 0x0318
    13d0:	ca 01       	movw	r24, r20
    13d2:	b9 01       	movw	r22, r18
    13d4:	e2 e0       	ldi	r30, 0x02	; 2
    13d6:	66 0f       	add	r22, r22
    13d8:	77 1f       	adc	r23, r23
    13da:	88 1f       	adc	r24, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	ea 95       	dec	r30
    13e0:	d1 f7       	brne	.-12     	; 0x13d6 <main+0x292>
    13e2:	62 0f       	add	r22, r18
    13e4:	73 1f       	adc	r23, r19
    13e6:	84 1f       	adc	r24, r20
    13e8:	95 1f       	adc	r25, r21
    13ea:	0e 94 96 11 	call	0x232c	; 0x232c <__floatunsisf>
    13ee:	0e 94 71 14 	call	0x28e2	; 0x28e2 <square>
    13f2:	7b 01       	movw	r14, r22
    13f4:	8c 01       	movw	r16, r24
    13f6:	9b 01       	movw	r18, r22
    13f8:	ac 01       	movw	r20, r24
    13fa:	c6 01       	movw	r24, r12
    13fc:	b5 01       	movw	r22, r10
    13fe:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <__subsf3>
    1402:	9b 01       	movw	r18, r22
    1404:	ac 01       	movw	r20, r24
    1406:	6f e3       	ldi	r22, 0x3F	; 63
    1408:	73 ee       	ldi	r23, 0xE3	; 227
    140a:	8c e7       	ldi	r24, 0x7C	; 124
    140c:	90 e3       	ldi	r25, 0x30	; 48
    140e:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <__divsf3>
    1412:	9b 01       	movw	r18, r22
    1414:	ac 01       	movw	r20, r24
    1416:	c8 01       	movw	r24, r16
    1418:	b7 01       	movw	r22, r14
    141a:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__mulsf3>
    141e:	7b 01       	movw	r14, r22
    1420:	8c 01       	movw	r16, r24
    1422:	60 93 10 03 	sts	0x0310, r22
    1426:	70 93 11 03 	sts	0x0311, r23
    142a:	80 93 12 03 	sts	0x0312, r24
    142e:	90 93 13 03 	sts	0x0313, r25
	Ls = 1 / (4 * square(M_PI) * square(F1 * 5) * Cs);
    1432:	6b ed       	ldi	r22, 0xDB	; 219
    1434:	7f e0       	ldi	r23, 0x0F	; 15
    1436:	89 e4       	ldi	r24, 0x49	; 73
    1438:	90 e4       	ldi	r25, 0x40	; 64
    143a:	0e 94 71 14 	call	0x28e2	; 0x28e2 <square>
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	40 e8       	ldi	r20, 0x80	; 128
    1444:	50 e4       	ldi	r21, 0x40	; 64
    1446:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__mulsf3>
    144a:	a6 01       	movw	r20, r12
    144c:	95 01       	movw	r18, r10
    144e:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__mulsf3>
    1452:	a8 01       	movw	r20, r16
    1454:	97 01       	movw	r18, r14
    1456:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__mulsf3>
    145a:	9b 01       	movw	r18, r22
    145c:	ac 01       	movw	r20, r24
    145e:	60 e0       	ldi	r22, 0x00	; 0
    1460:	70 e0       	ldi	r23, 0x00	; 0
    1462:	80 e8       	ldi	r24, 0x80	; 128
    1464:	9f e3       	ldi	r25, 0x3F	; 63
    1466:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <__divsf3>
    146a:	60 93 23 03 	sts	0x0323, r22
    146e:	70 93 24 03 	sts	0x0324, r23
    1472:	80 93 25 03 	sts	0x0325, r24
    1476:	90 93 26 03 	sts	0x0326, r25
    147a:	8d e5       	ldi	r24, 0x5D	; 93
    147c:	95 e0       	ldi	r25, 0x05	; 5
    147e:	90 93 f6 02 	sts	0x02F6, r25
    1482:	80 93 f5 02 	sts	0x02F5, r24
	// everything out of the lcd for now:
	rprintfInit(lcdDataWrite);
	

	// enable  PC5 as output
	sbi(DDRC, PC5);
    1486:	3d 9a       	sbi	0x07, 5	; 7
    1488:	20 ed       	ldi	r18, 0xD0	; 208
    148a:	37 e0       	ldi	r19, 0x07	; 7
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
		if(bit_is_clear(PIND, 4)) { // inductance measurement mode
			if(running < 3) {
				rprintf("Not an inductor                 \r");
			} else {
				Lt = (square(F1 * 5) / (square(running * 5)) - 1) * Ls;
				rprintf("Lx: ");
    1492:	4d e6       	ldi	r20, 0x6D	; 109
    1494:	44 2e       	mov	r4, r20
    1496:	41 e0       	ldi	r20, 0x01	; 1
    1498:	54 2e       	mov	r5, r20
				else {
					rprintfFloat(4, Lt * 1000000000);
					rprintf("nH");
				}
					
				rprintf("             \r");
    149a:	95 e5       	ldi	r25, 0x55	; 85
    149c:	29 2e       	mov	r2, r25
    149e:	91 e0       	ldi	r25, 0x01	; 1
    14a0:	39 2e       	mov	r3, r25
					rprintf("mH");
				}
				
				else if(Lt > .0000001) {
					rprintfFloat(4, Lt * 1000000);
					rprintf("uH");
    14a2:	c7 e6       	ldi	r28, 0x67	; 103
    14a4:	d1 e0       	ldi	r29, 0x01	; 1
			} else {
				Lt = (square(F1 * 5) / (square(running * 5)) - 1) * Ls;
				rprintf("Lx: ");
				if(Lt > .0001) {
					rprintfFloat(4, Lt * 1000);
					rprintf("mH");
    14a6:	8a e6       	ldi	r24, 0x6A	; 106
    14a8:	c8 2e       	mov	r12, r24
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	d8 2e       	mov	r13, r24
	while (1) {
		_delay_ms(200);
		lcdGotoXY(0,0);
		if(bit_is_clear(PIND, 4)) { // inductance measurement mode
			if(running < 3) {
				rprintf("Not an inductor                 \r");
    14ae:	02 e7       	ldi	r16, 0x72	; 114
    14b0:	80 2e       	mov	r8, r16
    14b2:	01 e0       	ldi	r16, 0x01	; 1
    14b4:	90 2e       	mov	r9, r16
    14b6:	10 e9       	ldi	r17, 0x90	; 144
    14b8:	61 2e       	mov	r6, r17
    14ba:	11 e0       	ldi	r17, 0x01	; 1
    14bc:	71 2e       	mov	r7, r17
    14be:	05 c0       	rjmp	.+10     	; 0x14ca <main+0x386>
    14c0:	c3 01       	movw	r24, r6
    14c2:	01 97       	sbiw	r24, 0x01	; 1
    14c4:	f1 f7       	brne	.-4      	; 0x14c2 <main+0x37e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c6:	21 50       	subi	r18, 0x01	; 1
    14c8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ca:	21 15       	cp	r18, r1
    14cc:	31 05       	cpc	r19, r1
    14ce:	c1 f7       	brne	.-16     	; 0x14c0 <main+0x37c>

	// enable  PC5 as output
	sbi(DDRC, PC5);
	while (1) {
		_delay_ms(200);
		lcdGotoXY(0,0);
    14d0:	60 e0       	ldi	r22, 0x00	; 0
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	0e 94 dd 05 	call	0xbba	; 0xbba <lcdGotoXY>
		if(bit_is_clear(PIND, 4)) { // inductance measurement mode
    14d8:	4c 99       	sbic	0x09, 4	; 9
    14da:	c1 c0       	rjmp	.+386    	; 0x165e <main+0x51a>
			if(running < 3) {
    14dc:	80 91 fc 02 	lds	r24, 0x02FC
    14e0:	90 91 fd 02 	lds	r25, 0x02FD
    14e4:	a0 91 fe 02 	lds	r26, 0x02FE
    14e8:	b0 91 ff 02 	lds	r27, 0x02FF
    14ec:	03 97       	sbiw	r24, 0x03	; 3
    14ee:	a1 05       	cpc	r26, r1
    14f0:	b1 05       	cpc	r27, r1
    14f2:	18 f4       	brcc	.+6      	; 0x14fa <main+0x3b6>
				rprintf("Not an inductor                 \r");
    14f4:	9f 92       	push	r9
    14f6:	8f 92       	push	r8
    14f8:	91 c1       	rjmp	.+802    	; 0x181c <main+0x6d8>
			} else {
				Lt = (square(F1 * 5) / (square(running * 5)) - 1) * Ls;
    14fa:	20 91 00 03 	lds	r18, 0x0300
    14fe:	30 91 01 03 	lds	r19, 0x0301
    1502:	40 91 02 03 	lds	r20, 0x0302
    1506:	50 91 03 03 	lds	r21, 0x0303
    150a:	ca 01       	movw	r24, r20
    150c:	b9 01       	movw	r22, r18
    150e:	b2 e0       	ldi	r27, 0x02	; 2
    1510:	66 0f       	add	r22, r22
    1512:	77 1f       	adc	r23, r23
    1514:	88 1f       	adc	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	ba 95       	dec	r27
    151a:	d1 f7       	brne	.-12     	; 0x1510 <main+0x3cc>
    151c:	62 0f       	add	r22, r18
    151e:	73 1f       	adc	r23, r19
    1520:	84 1f       	adc	r24, r20
    1522:	95 1f       	adc	r25, r21
    1524:	0e 94 96 11 	call	0x232c	; 0x232c <__floatunsisf>
    1528:	0e 94 71 14 	call	0x28e2	; 0x28e2 <square>
    152c:	7b 01       	movw	r14, r22
    152e:	8c 01       	movw	r16, r24
    1530:	20 91 fc 02 	lds	r18, 0x02FC
    1534:	30 91 fd 02 	lds	r19, 0x02FD
    1538:	40 91 fe 02 	lds	r20, 0x02FE
    153c:	50 91 ff 02 	lds	r21, 0x02FF
    1540:	ca 01       	movw	r24, r20
    1542:	b9 01       	movw	r22, r18
    1544:	a2 e0       	ldi	r26, 0x02	; 2
    1546:	66 0f       	add	r22, r22
    1548:	77 1f       	adc	r23, r23
    154a:	88 1f       	adc	r24, r24
    154c:	99 1f       	adc	r25, r25
    154e:	aa 95       	dec	r26
    1550:	d1 f7       	brne	.-12     	; 0x1546 <main+0x402>
    1552:	62 0f       	add	r22, r18
    1554:	73 1f       	adc	r23, r19
    1556:	84 1f       	adc	r24, r20
    1558:	95 1f       	adc	r25, r21
    155a:	0e 94 96 11 	call	0x232c	; 0x232c <__floatunsisf>
    155e:	0e 94 71 14 	call	0x28e2	; 0x28e2 <square>
    1562:	9b 01       	movw	r18, r22
    1564:	ac 01       	movw	r20, r24
    1566:	c8 01       	movw	r24, r16
    1568:	b7 01       	movw	r22, r14
    156a:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <__divsf3>
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	40 e8       	ldi	r20, 0x80	; 128
    1574:	5f e3       	ldi	r21, 0x3F	; 63
    1576:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <__subsf3>
    157a:	20 91 23 03 	lds	r18, 0x0323
    157e:	30 91 24 03 	lds	r19, 0x0324
    1582:	40 91 25 03 	lds	r20, 0x0325
    1586:	50 91 26 03 	lds	r21, 0x0326
    158a:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__mulsf3>
    158e:	60 93 0c 03 	sts	0x030C, r22
    1592:	70 93 0d 03 	sts	0x030D, r23
    1596:	80 93 0e 03 	sts	0x030E, r24
    159a:	90 93 0f 03 	sts	0x030F, r25
				rprintf("Lx: ");
    159e:	5f 92       	push	r5
    15a0:	4f 92       	push	r4
    15a2:	aa 24       	eor	r10, r10
    15a4:	a3 94       	inc	r10
    15a6:	af 92       	push	r10
    15a8:	0e 94 0e 08 	call	0x101c	; 0x101c <rprintf1RamRom>
				if(Lt > .0001) {
    15ac:	e0 90 0c 03 	lds	r14, 0x030C
    15b0:	f0 90 0d 03 	lds	r15, 0x030D
    15b4:	00 91 0e 03 	lds	r16, 0x030E
    15b8:	10 91 0f 03 	lds	r17, 0x030F
    15bc:	0f 90       	pop	r0
    15be:	0f 90       	pop	r0
    15c0:	0f 90       	pop	r0
    15c2:	27 e1       	ldi	r18, 0x17	; 23
    15c4:	37 eb       	ldi	r19, 0xB7	; 183
    15c6:	41 ed       	ldi	r20, 0xD1	; 209
    15c8:	58 e3       	ldi	r21, 0x38	; 56
    15ca:	c8 01       	movw	r24, r16
    15cc:	b7 01       	movw	r22, r14
    15ce:	0e 94 54 10 	call	0x20a8	; 0x20a8 <__gtsf2>
    15d2:	18 16       	cp	r1, r24
    15d4:	84 f4       	brge	.+32     	; 0x15f6 <main+0x4b2>
					rprintfFloat(4, Lt * 1000);
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	4a e7       	ldi	r20, 0x7A	; 122
    15dc:	54 e4       	ldi	r21, 0x44	; 68
    15de:	c8 01       	movw	r24, r16
    15e0:	b7 01       	movw	r22, r14
    15e2:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__mulsf3>
    15e6:	ab 01       	movw	r20, r22
    15e8:	bc 01       	movw	r22, r24
    15ea:	84 e0       	ldi	r24, 0x04	; 4
    15ec:	0e 94 ff 03 	call	0x7fe	; 0x7fe <rprintfFloat>
					rprintf("mH");
    15f0:	df 92       	push	r13
    15f2:	cf 92       	push	r12
    15f4:	2b c0       	rjmp	.+86     	; 0x164c <main+0x508>
				}
				
				else if(Lt > .0000001) {
    15f6:	25 e9       	ldi	r18, 0x95	; 149
    15f8:	3f eb       	ldi	r19, 0xBF	; 191
    15fa:	46 ed       	ldi	r20, 0xD6	; 214
    15fc:	53 e3       	ldi	r21, 0x33	; 51
    15fe:	c8 01       	movw	r24, r16
    1600:	b7 01       	movw	r22, r14
    1602:	0e 94 54 10 	call	0x20a8	; 0x20a8 <__gtsf2>
    1606:	18 16       	cp	r1, r24
    1608:	84 f4       	brge	.+32     	; 0x162a <main+0x4e6>
					rprintfFloat(4, Lt * 1000000);
    160a:	20 e0       	ldi	r18, 0x00	; 0
    160c:	34 e2       	ldi	r19, 0x24	; 36
    160e:	44 e7       	ldi	r20, 0x74	; 116
    1610:	59 e4       	ldi	r21, 0x49	; 73
    1612:	c8 01       	movw	r24, r16
    1614:	b7 01       	movw	r22, r14
    1616:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__mulsf3>
    161a:	ab 01       	movw	r20, r22
    161c:	bc 01       	movw	r22, r24
    161e:	84 e0       	ldi	r24, 0x04	; 4
    1620:	0e 94 ff 03 	call	0x7fe	; 0x7fe <rprintfFloat>
					rprintf("uH");
    1624:	df 93       	push	r29
    1626:	cf 93       	push	r28
    1628:	11 c0       	rjmp	.+34     	; 0x164c <main+0x508>
				}
					
				else {
					rprintfFloat(4, Lt * 1000000000);
    162a:	28 e2       	ldi	r18, 0x28	; 40
    162c:	3b e6       	ldi	r19, 0x6B	; 107
    162e:	4e e6       	ldi	r20, 0x6E	; 110
    1630:	5e e4       	ldi	r21, 0x4E	; 78
    1632:	c8 01       	movw	r24, r16
    1634:	b7 01       	movw	r22, r14
    1636:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__mulsf3>
    163a:	ab 01       	movw	r20, r22
    163c:	bc 01       	movw	r22, r24
    163e:	84 e0       	ldi	r24, 0x04	; 4
    1640:	0e 94 ff 03 	call	0x7fe	; 0x7fe <rprintfFloat>
					rprintf("nH");
    1644:	84 e6       	ldi	r24, 0x64	; 100
    1646:	91 e0       	ldi	r25, 0x01	; 1
    1648:	9f 93       	push	r25
    164a:	8f 93       	push	r24
    164c:	af 92       	push	r10
    164e:	0e 94 0e 08 	call	0x101c	; 0x101c <rprintf1RamRom>
    1652:	0f 90       	pop	r0
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
				}
					
				rprintf("             \r");
    1658:	3f 92       	push	r3
    165a:	2f 92       	push	r2
    165c:	df c0       	rjmp	.+446    	; 0x181c <main+0x6d8>
			}
		} else {					// capacitance measurement mode
			if(running < 300) {
    165e:	80 91 fc 02 	lds	r24, 0x02FC
    1662:	90 91 fd 02 	lds	r25, 0x02FD
    1666:	a0 91 fe 02 	lds	r26, 0x02FE
    166a:	b0 91 ff 02 	lds	r27, 0x02FF
    166e:	8c 52       	subi	r24, 0x2C	; 44
    1670:	91 40       	sbci	r25, 0x01	; 1
    1672:	a0 40       	sbci	r26, 0x00	; 0
    1674:	b0 40       	sbci	r27, 0x00	; 0
    1676:	18 f4       	brcc	.+6      	; 0x167e <main+0x53a>
				rprintf("Not a capacitor                 \r");
    1678:	83 e3       	ldi	r24, 0x33	; 51
    167a:	91 e0       	ldi	r25, 0x01	; 1
    167c:	cd c0       	rjmp	.+410    	; 0x1818 <main+0x6d4>
			} else {
				Ct = (square(F1 * 5) / (square(running * 5)) - 1) * Cs;
    167e:	20 91 00 03 	lds	r18, 0x0300
    1682:	30 91 01 03 	lds	r19, 0x0301
    1686:	40 91 02 03 	lds	r20, 0x0302
    168a:	50 91 03 03 	lds	r21, 0x0303
    168e:	ca 01       	movw	r24, r20
    1690:	b9 01       	movw	r22, r18
    1692:	f2 e0       	ldi	r31, 0x02	; 2
    1694:	66 0f       	add	r22, r22
    1696:	77 1f       	adc	r23, r23
    1698:	88 1f       	adc	r24, r24
    169a:	99 1f       	adc	r25, r25
    169c:	fa 95       	dec	r31
    169e:	d1 f7       	brne	.-12     	; 0x1694 <main+0x550>
    16a0:	62 0f       	add	r22, r18
    16a2:	73 1f       	adc	r23, r19
    16a4:	84 1f       	adc	r24, r20
    16a6:	95 1f       	adc	r25, r21
    16a8:	0e 94 96 11 	call	0x232c	; 0x232c <__floatunsisf>
    16ac:	0e 94 71 14 	call	0x28e2	; 0x28e2 <square>
    16b0:	7b 01       	movw	r14, r22
    16b2:	8c 01       	movw	r16, r24
    16b4:	20 91 fc 02 	lds	r18, 0x02FC
    16b8:	30 91 fd 02 	lds	r19, 0x02FD
    16bc:	40 91 fe 02 	lds	r20, 0x02FE
    16c0:	50 91 ff 02 	lds	r21, 0x02FF
    16c4:	ca 01       	movw	r24, r20
    16c6:	b9 01       	movw	r22, r18
    16c8:	e2 e0       	ldi	r30, 0x02	; 2
    16ca:	66 0f       	add	r22, r22
    16cc:	77 1f       	adc	r23, r23
    16ce:	88 1f       	adc	r24, r24
    16d0:	99 1f       	adc	r25, r25
    16d2:	ea 95       	dec	r30
    16d4:	d1 f7       	brne	.-12     	; 0x16ca <main+0x586>
    16d6:	62 0f       	add	r22, r18
    16d8:	73 1f       	adc	r23, r19
    16da:	84 1f       	adc	r24, r20
    16dc:	95 1f       	adc	r25, r21
    16de:	0e 94 96 11 	call	0x232c	; 0x232c <__floatunsisf>
    16e2:	0e 94 71 14 	call	0x28e2	; 0x28e2 <square>
    16e6:	9b 01       	movw	r18, r22
    16e8:	ac 01       	movw	r20, r24
    16ea:	c8 01       	movw	r24, r16
    16ec:	b7 01       	movw	r22, r14
    16ee:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <__divsf3>
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	40 e8       	ldi	r20, 0x80	; 128
    16f8:	5f e3       	ldi	r21, 0x3F	; 63
    16fa:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <__subsf3>
    16fe:	20 91 10 03 	lds	r18, 0x0310
    1702:	30 91 11 03 	lds	r19, 0x0311
    1706:	40 91 12 03 	lds	r20, 0x0312
    170a:	50 91 13 03 	lds	r21, 0x0313
    170e:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__mulsf3>
    1712:	60 93 f8 02 	sts	0x02F8, r22
    1716:	70 93 f9 02 	sts	0x02F9, r23
    171a:	80 93 fa 02 	sts	0x02FA, r24
    171e:	90 93 fb 02 	sts	0x02FB, r25
				rprintf("Cx: ");
    1722:	8e e2       	ldi	r24, 0x2E	; 46
    1724:	91 e0       	ldi	r25, 0x01	; 1
    1726:	9f 93       	push	r25
    1728:	8f 93       	push	r24
    172a:	aa 24       	eor	r10, r10
    172c:	a3 94       	inc	r10
    172e:	af 92       	push	r10
    1730:	0e 94 0e 08 	call	0x101c	; 0x101c <rprintf1RamRom>
				if(Ct > .0001) {
    1734:	e0 90 f8 02 	lds	r14, 0x02F8
    1738:	f0 90 f9 02 	lds	r15, 0x02F9
    173c:	00 91 fa 02 	lds	r16, 0x02FA
    1740:	10 91 fb 02 	lds	r17, 0x02FB
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	27 e1       	ldi	r18, 0x17	; 23
    174c:	37 eb       	ldi	r19, 0xB7	; 183
    174e:	41 ed       	ldi	r20, 0xD1	; 209
    1750:	58 e3       	ldi	r21, 0x38	; 56
    1752:	c8 01       	movw	r24, r16
    1754:	b7 01       	movw	r22, r14
    1756:	0e 94 54 10 	call	0x20a8	; 0x20a8 <__gtsf2>
    175a:	18 16       	cp	r1, r24
    175c:	84 f4       	brge	.+32     	; 0x177e <main+0x63a>
					rprintfFloat(4, Ct * 1000);
    175e:	20 e0       	ldi	r18, 0x00	; 0
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	4a e7       	ldi	r20, 0x7A	; 122
    1764:	54 e4       	ldi	r21, 0x44	; 68
    1766:	c8 01       	movw	r24, r16
    1768:	b7 01       	movw	r22, r14
    176a:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__mulsf3>
    176e:	ab 01       	movw	r20, r22
    1770:	bc 01       	movw	r22, r24
    1772:	84 e0       	ldi	r24, 0x04	; 4
    1774:	0e 94 ff 03 	call	0x7fe	; 0x7fe <rprintfFloat>
					rprintf("mF");
    1778:	8b e2       	ldi	r24, 0x2B	; 43
    177a:	91 e0       	ldi	r25, 0x01	; 1
    177c:	43 c0       	rjmp	.+134    	; 0x1804 <main+0x6c0>
				}
				
				else if(Ct > .0000001) {
    177e:	25 e9       	ldi	r18, 0x95	; 149
    1780:	3f eb       	ldi	r19, 0xBF	; 191
    1782:	46 ed       	ldi	r20, 0xD6	; 214
    1784:	53 e3       	ldi	r21, 0x33	; 51
    1786:	c8 01       	movw	r24, r16
    1788:	b7 01       	movw	r22, r14
    178a:	0e 94 54 10 	call	0x20a8	; 0x20a8 <__gtsf2>
    178e:	18 16       	cp	r1, r24
    1790:	84 f4       	brge	.+32     	; 0x17b2 <main+0x66e>
					rprintfFloat(4, Ct * 1000000);
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	34 e2       	ldi	r19, 0x24	; 36
    1796:	44 e7       	ldi	r20, 0x74	; 116
    1798:	59 e4       	ldi	r21, 0x49	; 73
    179a:	c8 01       	movw	r24, r16
    179c:	b7 01       	movw	r22, r14
    179e:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__mulsf3>
    17a2:	ab 01       	movw	r20, r22
    17a4:	bc 01       	movw	r22, r24
    17a6:	84 e0       	ldi	r24, 0x04	; 4
    17a8:	0e 94 ff 03 	call	0x7fe	; 0x7fe <rprintfFloat>
					rprintf("uF");
    17ac:	88 e2       	ldi	r24, 0x28	; 40
    17ae:	91 e0       	ldi	r25, 0x01	; 1
    17b0:	29 c0       	rjmp	.+82     	; 0x1804 <main+0x6c0>
				}
					
				else if(Ct > .0000000001){
    17b2:	2f ef       	ldi	r18, 0xFF	; 255
    17b4:	36 ee       	ldi	r19, 0xE6	; 230
    17b6:	4b ed       	ldi	r20, 0xDB	; 219
    17b8:	5e e2       	ldi	r21, 0x2E	; 46
    17ba:	c8 01       	movw	r24, r16
    17bc:	b7 01       	movw	r22, r14
    17be:	0e 94 54 10 	call	0x20a8	; 0x20a8 <__gtsf2>
    17c2:	18 16       	cp	r1, r24
    17c4:	84 f4       	brge	.+32     	; 0x17e6 <main+0x6a2>
					rprintfFloat(4, Ct * 1000000000);
    17c6:	28 e2       	ldi	r18, 0x28	; 40
    17c8:	3b e6       	ldi	r19, 0x6B	; 107
    17ca:	4e e6       	ldi	r20, 0x6E	; 110
    17cc:	5e e4       	ldi	r21, 0x4E	; 78
    17ce:	c8 01       	movw	r24, r16
    17d0:	b7 01       	movw	r22, r14
    17d2:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__mulsf3>
    17d6:	ab 01       	movw	r20, r22
    17d8:	bc 01       	movw	r22, r24
    17da:	84 e0       	ldi	r24, 0x04	; 4
    17dc:	0e 94 ff 03 	call	0x7fe	; 0x7fe <rprintfFloat>
					rprintf("nF");
    17e0:	85 e2       	ldi	r24, 0x25	; 37
    17e2:	91 e0       	ldi	r25, 0x01	; 1
    17e4:	0f c0       	rjmp	.+30     	; 0x1804 <main+0x6c0>
				}

				else {
					rprintfFloat(4, Ct * 1000000000000);
    17e6:	25 ea       	ldi	r18, 0xA5	; 165
    17e8:	34 ed       	ldi	r19, 0xD4	; 212
    17ea:	48 e6       	ldi	r20, 0x68	; 104
    17ec:	53 e5       	ldi	r21, 0x53	; 83
    17ee:	c8 01       	movw	r24, r16
    17f0:	b7 01       	movw	r22, r14
    17f2:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__mulsf3>
    17f6:	ab 01       	movw	r20, r22
    17f8:	bc 01       	movw	r22, r24
    17fa:	84 e0       	ldi	r24, 0x04	; 4
    17fc:	0e 94 ff 03 	call	0x7fe	; 0x7fe <rprintfFloat>
					rprintf("pF");
    1800:	82 e2       	ldi	r24, 0x22	; 34
    1802:	91 e0       	ldi	r25, 0x01	; 1
    1804:	9f 93       	push	r25
    1806:	8f 93       	push	r24
    1808:	af 92       	push	r10
    180a:	0e 94 0e 08 	call	0x101c	; 0x101c <rprintf1RamRom>
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
				}
					
				rprintf("             \r");
    1814:	83 e1       	ldi	r24, 0x13	; 19
    1816:	91 e0       	ldi	r25, 0x01	; 1
    1818:	9f 93       	push	r25
    181a:	8f 93       	push	r24
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	8f 93       	push	r24
    1820:	0e 94 0e 08 	call	0x101c	; 0x101c <rprintf1RamRom>
    1824:	0f 90       	pop	r0
    1826:	0f 90       	pop	r0
    1828:	0f 90       	pop	r0
			}
		}

		if(bit_is_clear(PIND, 7)) {
    182a:	4f 99       	sbic	0x09, 7	; 9
    182c:	2b c0       	rjmp	.+86     	; 0x1884 <main+0x740>
			lcdGotoXY(0,0);
    182e:	60 e0       	ldi	r22, 0x00	; 0
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	0e 94 dd 05 	call	0xbba	; 0xbba <lcdGotoXY>
			rprintf("zeroed                \r");
    1836:	8b ef       	ldi	r24, 0xFB	; 251
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	9f 93       	push	r25
    183c:	8f 93       	push	r24
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	8f 93       	push	r24
    1842:	0e 94 0e 08 	call	0x101c	; 0x101c <rprintf1RamRom>
			lcdGotoXY(0,1);
    1846:	61 e0       	ldi	r22, 0x01	; 1
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	0e 94 dd 05 	call	0xbba	; 0xbba <lcdGotoXY>
			rprintfStr(blank_lcd_line);
    184e:	85 e5       	ldi	r24, 0x55	; 85
    1850:	91 e0       	ldi	r25, 0x01	; 1
    1852:	0e 94 bc 02 	call	0x578	; 0x578 <rprintfStr>
			lcdGotoXY(0,0);
    1856:	60 e0       	ldi	r22, 0x00	; 0
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	0e 94 dd 05 	call	0xbba	; 0xbba <lcdGotoXY>
			F1 = running;
    185e:	80 91 fc 02 	lds	r24, 0x02FC
    1862:	90 91 fd 02 	lds	r25, 0x02FD
    1866:	a0 91 fe 02 	lds	r26, 0x02FE
    186a:	b0 91 ff 02 	lds	r27, 0x02FF
    186e:	80 93 00 03 	sts	0x0300, r24
    1872:	90 93 01 03 	sts	0x0301, r25
    1876:	a0 93 02 03 	sts	0x0302, r26
    187a:	b0 93 03 03 	sts	0x0303, r27
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
		}

		while(bit_is_clear(PIND, 7)) {
    1884:	4f 9b       	sbis	0x09, 7	; 9
    1886:	fe cf       	rjmp	.-4      	; 0x1884 <main+0x740>
			// do nothing till the user lets go of the zero button
		}

		// display the 
		lcdGotoXY(0,1);
    1888:	61 e0       	ldi	r22, 0x01	; 1
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	0e 94 dd 05 	call	0xbba	; 0xbba <lcdGotoXY>
		rprintfNum(10, 6, 0, ' ', running * 5);
    1890:	80 91 fc 02 	lds	r24, 0x02FC
    1894:	90 91 fd 02 	lds	r25, 0x02FD
    1898:	a0 91 fe 02 	lds	r26, 0x02FE
    189c:	b0 91 ff 02 	lds	r27, 0x02FF
    18a0:	7c 01       	movw	r14, r24
    18a2:	8d 01       	movw	r16, r26
    18a4:	22 e0       	ldi	r18, 0x02	; 2
    18a6:	ee 0c       	add	r14, r14
    18a8:	ff 1c       	adc	r15, r15
    18aa:	00 1f       	adc	r16, r16
    18ac:	11 1f       	adc	r17, r17
    18ae:	2a 95       	dec	r18
    18b0:	d1 f7       	brne	.-12     	; 0x18a6 <main+0x762>
    18b2:	e8 0e       	add	r14, r24
    18b4:	f9 1e       	adc	r15, r25
    18b6:	0a 1f       	adc	r16, r26
    18b8:	1b 1f       	adc	r17, r27
    18ba:	20 e2       	ldi	r18, 0x20	; 32
    18bc:	40 e0       	ldi	r20, 0x00	; 0
    18be:	66 e0       	ldi	r22, 0x06	; 6
    18c0:	8a e0       	ldi	r24, 0x0A	; 10
    18c2:	0e 94 3f 03 	call	0x67e	; 0x67e <rprintfNum>
		rprintf("Hz        ");
    18c6:	80 ef       	ldi	r24, 0xF0	; 240
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	9f 93       	push	r25
    18cc:	8f 93       	push	r24
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	8f 93       	push	r24
    18d2:	0e 94 0e 08 	call	0x101c	; 0x101c <rprintf1RamRom>
    18d6:	20 ed       	ldi	r18, 0xD0	; 208
    18d8:	37 e0       	ldi	r19, 0x07	; 7
    18da:	0f 90       	pop	r0
    18dc:	0f 90       	pop	r0
    18de:	0f 90       	pop	r0
    18e0:	ef cd       	rjmp	.-1058   	; 0x14c0 <main+0x37c>

000018e2 <vt100SetCursorPos>:
		// ESC [ ? 25 l
		rprintf("\x1B[?25l");
}

void vt100SetCursorPos(u08 line, u08 col)
{
    18e2:	70 e0       	ldi	r23, 0x00	; 0
    18e4:	7f 93       	push	r23
    18e6:	6f 93       	push	r22
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	9f 93       	push	r25
    18ec:	8f 93       	push	r24
    18ee:	81 eb       	ldi	r24, 0xB1	; 177
    18f0:	91 e0       	ldi	r25, 0x01	; 1
    18f2:	9f 93       	push	r25
    18f4:	8f 93       	push	r24
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	8f 93       	push	r24
    18fa:	0e 94 0e 08 	call	0x101c	; 0x101c <rprintf1RamRom>
    18fe:	8d b7       	in	r24, 0x3d	; 61
    1900:	9e b7       	in	r25, 0x3e	; 62
    1902:	07 96       	adiw	r24, 0x07	; 7
    1904:	0f b6       	in	r0, 0x3f	; 63
    1906:	f8 94       	cli
    1908:	9e bf       	out	0x3e, r25	; 62
    190a:	0f be       	out	0x3f, r0	; 63
    190c:	8d bf       	out	0x3d, r24	; 61
	// ESC [ Pl ; Pc H
	rprintf("\x1B[%d;%dH",line,col);
}
    190e:	08 95       	ret

00001910 <vt100SetCursorMode>:
	// ESC [ Ps m
	rprintf("\x1B[%dm",attr);
}

void vt100SetCursorMode(u08 visible)
{
    1910:	88 23       	and	r24, r24
    1912:	19 f0       	breq	.+6      	; 0x191a <vt100SetCursorMode+0xa>
	if(visible)
		// ESC [ ? 25 h
		rprintf("\x1B[?25h");
    1914:	81 ec       	ldi	r24, 0xC1	; 193
    1916:	91 e0       	ldi	r25, 0x01	; 1
    1918:	02 c0       	rjmp	.+4      	; 0x191e <vt100SetCursorMode+0xe>
	else
		// ESC [ ? 25 l
		rprintf("\x1B[?25l");
    191a:	8a eb       	ldi	r24, 0xBA	; 186
    191c:	91 e0       	ldi	r25, 0x01	; 1
    191e:	9f 93       	push	r25
    1920:	8f 93       	push	r24
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	8f 93       	push	r24
    1926:	0e 94 0e 08 	call	0x101c	; 0x101c <rprintf1RamRom>
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	08 95       	ret

00001932 <vt100SetAttr>:
	// ESC [ 2 J
	rprintfProgStrM("\x1B[2J");
}

void vt100SetAttr(u08 attr)
{
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	9f 93       	push	r25
    1936:	8f 93       	push	r24
    1938:	88 ec       	ldi	r24, 0xC8	; 200
    193a:	91 e0       	ldi	r25, 0x01	; 1
    193c:	9f 93       	push	r25
    193e:	8f 93       	push	r24
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	8f 93       	push	r24
    1944:	0e 94 0e 08 	call	0x101c	; 0x101c <rprintf1RamRom>
    1948:	0f 90       	pop	r0
    194a:	0f 90       	pop	r0
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
	// ESC [ Ps m
	rprintf("\x1B[%dm",attr);
}
    1952:	08 95       	ret

00001954 <__fixunssfsi>:
    1954:	ef 92       	push	r14
    1956:	ff 92       	push	r15
    1958:	0f 93       	push	r16
    195a:	1f 93       	push	r17
    195c:	7b 01       	movw	r14, r22
    195e:	8c 01       	movw	r16, r24
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	40 e0       	ldi	r20, 0x00	; 0
    1966:	5f e4       	ldi	r21, 0x4F	; 79
    1968:	0e 94 84 10 	call	0x2108	; 0x2108 <__gesf2>
    196c:	88 23       	and	r24, r24
    196e:	8c f0       	brlt	.+34     	; 0x1992 <__fixunssfsi+0x3e>
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	40 e0       	ldi	r20, 0x00	; 0
    1976:	5f e4       	ldi	r21, 0x4F	; 79
    1978:	c8 01       	movw	r24, r16
    197a:	b7 01       	movw	r22, r14
    197c:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <__subsf3>
    1980:	0e 94 42 11 	call	0x2284	; 0x2284 <__fixsfsi>
    1984:	9b 01       	movw	r18, r22
    1986:	ac 01       	movw	r20, r24
    1988:	20 50       	subi	r18, 0x00	; 0
    198a:	30 40       	sbci	r19, 0x00	; 0
    198c:	40 40       	sbci	r20, 0x00	; 0
    198e:	50 48       	sbci	r21, 0x80	; 128
    1990:	06 c0       	rjmp	.+12     	; 0x199e <__fixunssfsi+0x4a>
    1992:	c8 01       	movw	r24, r16
    1994:	b7 01       	movw	r22, r14
    1996:	0e 94 42 11 	call	0x2284	; 0x2284 <__fixsfsi>
    199a:	9b 01       	movw	r18, r22
    199c:	ac 01       	movw	r20, r24
    199e:	b9 01       	movw	r22, r18
    19a0:	ca 01       	movw	r24, r20
    19a2:	1f 91       	pop	r17
    19a4:	0f 91       	pop	r16
    19a6:	ff 90       	pop	r15
    19a8:	ef 90       	pop	r14
    19aa:	08 95       	ret

000019ac <_fpadd_parts>:
    19ac:	a0 e0       	ldi	r26, 0x00	; 0
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	ec ed       	ldi	r30, 0xDC	; 220
    19b2:	fc e0       	ldi	r31, 0x0C	; 12
    19b4:	0c 94 3a 14 	jmp	0x2874	; 0x2874 <__prologue_saves__>
    19b8:	dc 01       	movw	r26, r24
    19ba:	2b 01       	movw	r4, r22
    19bc:	fa 01       	movw	r30, r20
    19be:	9c 91       	ld	r25, X
    19c0:	92 30       	cpi	r25, 0x02	; 2
    19c2:	08 f4       	brcc	.+2      	; 0x19c6 <_fpadd_parts+0x1a>
    19c4:	39 c1       	rjmp	.+626    	; 0x1c38 <_fpadd_parts+0x28c>
    19c6:	eb 01       	movw	r28, r22
    19c8:	88 81       	ld	r24, Y
    19ca:	82 30       	cpi	r24, 0x02	; 2
    19cc:	08 f4       	brcc	.+2      	; 0x19d0 <_fpadd_parts+0x24>
    19ce:	33 c1       	rjmp	.+614    	; 0x1c36 <_fpadd_parts+0x28a>
    19d0:	94 30       	cpi	r25, 0x04	; 4
    19d2:	69 f4       	brne	.+26     	; 0x19ee <_fpadd_parts+0x42>
    19d4:	84 30       	cpi	r24, 0x04	; 4
    19d6:	09 f0       	breq	.+2      	; 0x19da <_fpadd_parts+0x2e>
    19d8:	2f c1       	rjmp	.+606    	; 0x1c38 <_fpadd_parts+0x28c>
    19da:	11 96       	adiw	r26, 0x01	; 1
    19dc:	9c 91       	ld	r25, X
    19de:	11 97       	sbiw	r26, 0x01	; 1
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
    19e2:	98 17       	cp	r25, r24
    19e4:	09 f4       	brne	.+2      	; 0x19e8 <_fpadd_parts+0x3c>
    19e6:	28 c1       	rjmp	.+592    	; 0x1c38 <_fpadd_parts+0x28c>
    19e8:	a6 e6       	ldi	r26, 0x66	; 102
    19ea:	b1 e0       	ldi	r27, 0x01	; 1
    19ec:	25 c1       	rjmp	.+586    	; 0x1c38 <_fpadd_parts+0x28c>
    19ee:	84 30       	cpi	r24, 0x04	; 4
    19f0:	09 f4       	brne	.+2      	; 0x19f4 <_fpadd_parts+0x48>
    19f2:	21 c1       	rjmp	.+578    	; 0x1c36 <_fpadd_parts+0x28a>
    19f4:	82 30       	cpi	r24, 0x02	; 2
    19f6:	a9 f4       	brne	.+42     	; 0x1a22 <_fpadd_parts+0x76>
    19f8:	92 30       	cpi	r25, 0x02	; 2
    19fa:	09 f0       	breq	.+2      	; 0x19fe <_fpadd_parts+0x52>
    19fc:	1d c1       	rjmp	.+570    	; 0x1c38 <_fpadd_parts+0x28c>
    19fe:	9a 01       	movw	r18, r20
    1a00:	ad 01       	movw	r20, r26
    1a02:	88 e0       	ldi	r24, 0x08	; 8
    1a04:	ea 01       	movw	r28, r20
    1a06:	09 90       	ld	r0, Y+
    1a08:	ae 01       	movw	r20, r28
    1a0a:	e9 01       	movw	r28, r18
    1a0c:	09 92       	st	Y+, r0
    1a0e:	9e 01       	movw	r18, r28
    1a10:	81 50       	subi	r24, 0x01	; 1
    1a12:	c1 f7       	brne	.-16     	; 0x1a04 <_fpadd_parts+0x58>
    1a14:	e2 01       	movw	r28, r4
    1a16:	89 81       	ldd	r24, Y+1	; 0x01
    1a18:	11 96       	adiw	r26, 0x01	; 1
    1a1a:	9c 91       	ld	r25, X
    1a1c:	89 23       	and	r24, r25
    1a1e:	81 83       	std	Z+1, r24	; 0x01
    1a20:	08 c1       	rjmp	.+528    	; 0x1c32 <_fpadd_parts+0x286>
    1a22:	92 30       	cpi	r25, 0x02	; 2
    1a24:	09 f4       	brne	.+2      	; 0x1a28 <_fpadd_parts+0x7c>
    1a26:	07 c1       	rjmp	.+526    	; 0x1c36 <_fpadd_parts+0x28a>
    1a28:	12 96       	adiw	r26, 0x02	; 2
    1a2a:	2d 90       	ld	r2, X+
    1a2c:	3c 90       	ld	r3, X
    1a2e:	13 97       	sbiw	r26, 0x03	; 3
    1a30:	eb 01       	movw	r28, r22
    1a32:	8a 81       	ldd	r24, Y+2	; 0x02
    1a34:	9b 81       	ldd	r25, Y+3	; 0x03
    1a36:	14 96       	adiw	r26, 0x04	; 4
    1a38:	ad 90       	ld	r10, X+
    1a3a:	bd 90       	ld	r11, X+
    1a3c:	cd 90       	ld	r12, X+
    1a3e:	dc 90       	ld	r13, X
    1a40:	17 97       	sbiw	r26, 0x07	; 7
    1a42:	ec 80       	ldd	r14, Y+4	; 0x04
    1a44:	fd 80       	ldd	r15, Y+5	; 0x05
    1a46:	0e 81       	ldd	r16, Y+6	; 0x06
    1a48:	1f 81       	ldd	r17, Y+7	; 0x07
    1a4a:	91 01       	movw	r18, r2
    1a4c:	28 1b       	sub	r18, r24
    1a4e:	39 0b       	sbc	r19, r25
    1a50:	b9 01       	movw	r22, r18
    1a52:	37 ff       	sbrs	r19, 7
    1a54:	04 c0       	rjmp	.+8      	; 0x1a5e <_fpadd_parts+0xb2>
    1a56:	66 27       	eor	r22, r22
    1a58:	77 27       	eor	r23, r23
    1a5a:	62 1b       	sub	r22, r18
    1a5c:	73 0b       	sbc	r23, r19
    1a5e:	60 32       	cpi	r22, 0x20	; 32
    1a60:	71 05       	cpc	r23, r1
    1a62:	0c f0       	brlt	.+2      	; 0x1a66 <_fpadd_parts+0xba>
    1a64:	61 c0       	rjmp	.+194    	; 0x1b28 <_fpadd_parts+0x17c>
    1a66:	12 16       	cp	r1, r18
    1a68:	13 06       	cpc	r1, r19
    1a6a:	6c f5       	brge	.+90     	; 0x1ac6 <_fpadd_parts+0x11a>
    1a6c:	37 01       	movw	r6, r14
    1a6e:	48 01       	movw	r8, r16
    1a70:	06 2e       	mov	r0, r22
    1a72:	04 c0       	rjmp	.+8      	; 0x1a7c <_fpadd_parts+0xd0>
    1a74:	96 94       	lsr	r9
    1a76:	87 94       	ror	r8
    1a78:	77 94       	ror	r7
    1a7a:	67 94       	ror	r6
    1a7c:	0a 94       	dec	r0
    1a7e:	d2 f7       	brpl	.-12     	; 0x1a74 <_fpadd_parts+0xc8>
    1a80:	21 e0       	ldi	r18, 0x01	; 1
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	40 e0       	ldi	r20, 0x00	; 0
    1a86:	50 e0       	ldi	r21, 0x00	; 0
    1a88:	04 c0       	rjmp	.+8      	; 0x1a92 <_fpadd_parts+0xe6>
    1a8a:	22 0f       	add	r18, r18
    1a8c:	33 1f       	adc	r19, r19
    1a8e:	44 1f       	adc	r20, r20
    1a90:	55 1f       	adc	r21, r21
    1a92:	6a 95       	dec	r22
    1a94:	d2 f7       	brpl	.-12     	; 0x1a8a <_fpadd_parts+0xde>
    1a96:	21 50       	subi	r18, 0x01	; 1
    1a98:	30 40       	sbci	r19, 0x00	; 0
    1a9a:	40 40       	sbci	r20, 0x00	; 0
    1a9c:	50 40       	sbci	r21, 0x00	; 0
    1a9e:	2e 21       	and	r18, r14
    1aa0:	3f 21       	and	r19, r15
    1aa2:	40 23       	and	r20, r16
    1aa4:	51 23       	and	r21, r17
    1aa6:	21 15       	cp	r18, r1
    1aa8:	31 05       	cpc	r19, r1
    1aaa:	41 05       	cpc	r20, r1
    1aac:	51 05       	cpc	r21, r1
    1aae:	21 f0       	breq	.+8      	; 0x1ab8 <_fpadd_parts+0x10c>
    1ab0:	21 e0       	ldi	r18, 0x01	; 1
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	40 e0       	ldi	r20, 0x00	; 0
    1ab6:	50 e0       	ldi	r21, 0x00	; 0
    1ab8:	79 01       	movw	r14, r18
    1aba:	8a 01       	movw	r16, r20
    1abc:	e6 28       	or	r14, r6
    1abe:	f7 28       	or	r15, r7
    1ac0:	08 29       	or	r16, r8
    1ac2:	19 29       	or	r17, r9
    1ac4:	3c c0       	rjmp	.+120    	; 0x1b3e <_fpadd_parts+0x192>
    1ac6:	23 2b       	or	r18, r19
    1ac8:	d1 f1       	breq	.+116    	; 0x1b3e <_fpadd_parts+0x192>
    1aca:	26 0e       	add	r2, r22
    1acc:	37 1e       	adc	r3, r23
    1ace:	35 01       	movw	r6, r10
    1ad0:	46 01       	movw	r8, r12
    1ad2:	06 2e       	mov	r0, r22
    1ad4:	04 c0       	rjmp	.+8      	; 0x1ade <_fpadd_parts+0x132>
    1ad6:	96 94       	lsr	r9
    1ad8:	87 94       	ror	r8
    1ada:	77 94       	ror	r7
    1adc:	67 94       	ror	r6
    1ade:	0a 94       	dec	r0
    1ae0:	d2 f7       	brpl	.-12     	; 0x1ad6 <_fpadd_parts+0x12a>
    1ae2:	21 e0       	ldi	r18, 0x01	; 1
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	40 e0       	ldi	r20, 0x00	; 0
    1ae8:	50 e0       	ldi	r21, 0x00	; 0
    1aea:	04 c0       	rjmp	.+8      	; 0x1af4 <_fpadd_parts+0x148>
    1aec:	22 0f       	add	r18, r18
    1aee:	33 1f       	adc	r19, r19
    1af0:	44 1f       	adc	r20, r20
    1af2:	55 1f       	adc	r21, r21
    1af4:	6a 95       	dec	r22
    1af6:	d2 f7       	brpl	.-12     	; 0x1aec <_fpadd_parts+0x140>
    1af8:	21 50       	subi	r18, 0x01	; 1
    1afa:	30 40       	sbci	r19, 0x00	; 0
    1afc:	40 40       	sbci	r20, 0x00	; 0
    1afe:	50 40       	sbci	r21, 0x00	; 0
    1b00:	2a 21       	and	r18, r10
    1b02:	3b 21       	and	r19, r11
    1b04:	4c 21       	and	r20, r12
    1b06:	5d 21       	and	r21, r13
    1b08:	21 15       	cp	r18, r1
    1b0a:	31 05       	cpc	r19, r1
    1b0c:	41 05       	cpc	r20, r1
    1b0e:	51 05       	cpc	r21, r1
    1b10:	21 f0       	breq	.+8      	; 0x1b1a <_fpadd_parts+0x16e>
    1b12:	21 e0       	ldi	r18, 0x01	; 1
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	40 e0       	ldi	r20, 0x00	; 0
    1b18:	50 e0       	ldi	r21, 0x00	; 0
    1b1a:	59 01       	movw	r10, r18
    1b1c:	6a 01       	movw	r12, r20
    1b1e:	a6 28       	or	r10, r6
    1b20:	b7 28       	or	r11, r7
    1b22:	c8 28       	or	r12, r8
    1b24:	d9 28       	or	r13, r9
    1b26:	0b c0       	rjmp	.+22     	; 0x1b3e <_fpadd_parts+0x192>
    1b28:	82 15       	cp	r24, r2
    1b2a:	93 05       	cpc	r25, r3
    1b2c:	2c f0       	brlt	.+10     	; 0x1b38 <_fpadd_parts+0x18c>
    1b2e:	1c 01       	movw	r2, r24
    1b30:	aa 24       	eor	r10, r10
    1b32:	bb 24       	eor	r11, r11
    1b34:	65 01       	movw	r12, r10
    1b36:	03 c0       	rjmp	.+6      	; 0x1b3e <_fpadd_parts+0x192>
    1b38:	ee 24       	eor	r14, r14
    1b3a:	ff 24       	eor	r15, r15
    1b3c:	87 01       	movw	r16, r14
    1b3e:	11 96       	adiw	r26, 0x01	; 1
    1b40:	9c 91       	ld	r25, X
    1b42:	d2 01       	movw	r26, r4
    1b44:	11 96       	adiw	r26, 0x01	; 1
    1b46:	8c 91       	ld	r24, X
    1b48:	98 17       	cp	r25, r24
    1b4a:	09 f4       	brne	.+2      	; 0x1b4e <_fpadd_parts+0x1a2>
    1b4c:	45 c0       	rjmp	.+138    	; 0x1bd8 <_fpadd_parts+0x22c>
    1b4e:	99 23       	and	r25, r25
    1b50:	39 f0       	breq	.+14     	; 0x1b60 <_fpadd_parts+0x1b4>
    1b52:	a8 01       	movw	r20, r16
    1b54:	97 01       	movw	r18, r14
    1b56:	2a 19       	sub	r18, r10
    1b58:	3b 09       	sbc	r19, r11
    1b5a:	4c 09       	sbc	r20, r12
    1b5c:	5d 09       	sbc	r21, r13
    1b5e:	06 c0       	rjmp	.+12     	; 0x1b6c <_fpadd_parts+0x1c0>
    1b60:	a6 01       	movw	r20, r12
    1b62:	95 01       	movw	r18, r10
    1b64:	2e 19       	sub	r18, r14
    1b66:	3f 09       	sbc	r19, r15
    1b68:	40 0b       	sbc	r20, r16
    1b6a:	51 0b       	sbc	r21, r17
    1b6c:	57 fd       	sbrc	r21, 7
    1b6e:	08 c0       	rjmp	.+16     	; 0x1b80 <_fpadd_parts+0x1d4>
    1b70:	11 82       	std	Z+1, r1	; 0x01
    1b72:	33 82       	std	Z+3, r3	; 0x03
    1b74:	22 82       	std	Z+2, r2	; 0x02
    1b76:	24 83       	std	Z+4, r18	; 0x04
    1b78:	35 83       	std	Z+5, r19	; 0x05
    1b7a:	46 83       	std	Z+6, r20	; 0x06
    1b7c:	57 83       	std	Z+7, r21	; 0x07
    1b7e:	1d c0       	rjmp	.+58     	; 0x1bba <_fpadd_parts+0x20e>
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	81 83       	std	Z+1, r24	; 0x01
    1b84:	33 82       	std	Z+3, r3	; 0x03
    1b86:	22 82       	std	Z+2, r2	; 0x02
    1b88:	88 27       	eor	r24, r24
    1b8a:	99 27       	eor	r25, r25
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	82 1b       	sub	r24, r18
    1b90:	93 0b       	sbc	r25, r19
    1b92:	a4 0b       	sbc	r26, r20
    1b94:	b5 0b       	sbc	r27, r21
    1b96:	84 83       	std	Z+4, r24	; 0x04
    1b98:	95 83       	std	Z+5, r25	; 0x05
    1b9a:	a6 83       	std	Z+6, r26	; 0x06
    1b9c:	b7 83       	std	Z+7, r27	; 0x07
    1b9e:	0d c0       	rjmp	.+26     	; 0x1bba <_fpadd_parts+0x20e>
    1ba0:	22 0f       	add	r18, r18
    1ba2:	33 1f       	adc	r19, r19
    1ba4:	44 1f       	adc	r20, r20
    1ba6:	55 1f       	adc	r21, r21
    1ba8:	24 83       	std	Z+4, r18	; 0x04
    1baa:	35 83       	std	Z+5, r19	; 0x05
    1bac:	46 83       	std	Z+6, r20	; 0x06
    1bae:	57 83       	std	Z+7, r21	; 0x07
    1bb0:	82 81       	ldd	r24, Z+2	; 0x02
    1bb2:	93 81       	ldd	r25, Z+3	; 0x03
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	93 83       	std	Z+3, r25	; 0x03
    1bb8:	82 83       	std	Z+2, r24	; 0x02
    1bba:	24 81       	ldd	r18, Z+4	; 0x04
    1bbc:	35 81       	ldd	r19, Z+5	; 0x05
    1bbe:	46 81       	ldd	r20, Z+6	; 0x06
    1bc0:	57 81       	ldd	r21, Z+7	; 0x07
    1bc2:	da 01       	movw	r26, r20
    1bc4:	c9 01       	movw	r24, r18
    1bc6:	01 97       	sbiw	r24, 0x01	; 1
    1bc8:	a1 09       	sbc	r26, r1
    1bca:	b1 09       	sbc	r27, r1
    1bcc:	8f 5f       	subi	r24, 0xFF	; 255
    1bce:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd0:	af 4f       	sbci	r26, 0xFF	; 255
    1bd2:	bf 43       	sbci	r27, 0x3F	; 63
    1bd4:	28 f3       	brcs	.-54     	; 0x1ba0 <_fpadd_parts+0x1f4>
    1bd6:	0b c0       	rjmp	.+22     	; 0x1bee <_fpadd_parts+0x242>
    1bd8:	91 83       	std	Z+1, r25	; 0x01
    1bda:	33 82       	std	Z+3, r3	; 0x03
    1bdc:	22 82       	std	Z+2, r2	; 0x02
    1bde:	ea 0c       	add	r14, r10
    1be0:	fb 1c       	adc	r15, r11
    1be2:	0c 1d       	adc	r16, r12
    1be4:	1d 1d       	adc	r17, r13
    1be6:	e4 82       	std	Z+4, r14	; 0x04
    1be8:	f5 82       	std	Z+5, r15	; 0x05
    1bea:	06 83       	std	Z+6, r16	; 0x06
    1bec:	17 83       	std	Z+7, r17	; 0x07
    1bee:	83 e0       	ldi	r24, 0x03	; 3
    1bf0:	80 83       	st	Z, r24
    1bf2:	24 81       	ldd	r18, Z+4	; 0x04
    1bf4:	35 81       	ldd	r19, Z+5	; 0x05
    1bf6:	46 81       	ldd	r20, Z+6	; 0x06
    1bf8:	57 81       	ldd	r21, Z+7	; 0x07
    1bfa:	57 ff       	sbrs	r21, 7
    1bfc:	1a c0       	rjmp	.+52     	; 0x1c32 <_fpadd_parts+0x286>
    1bfe:	c9 01       	movw	r24, r18
    1c00:	aa 27       	eor	r26, r26
    1c02:	97 fd       	sbrc	r25, 7
    1c04:	a0 95       	com	r26
    1c06:	ba 2f       	mov	r27, r26
    1c08:	81 70       	andi	r24, 0x01	; 1
    1c0a:	90 70       	andi	r25, 0x00	; 0
    1c0c:	a0 70       	andi	r26, 0x00	; 0
    1c0e:	b0 70       	andi	r27, 0x00	; 0
    1c10:	56 95       	lsr	r21
    1c12:	47 95       	ror	r20
    1c14:	37 95       	ror	r19
    1c16:	27 95       	ror	r18
    1c18:	82 2b       	or	r24, r18
    1c1a:	93 2b       	or	r25, r19
    1c1c:	a4 2b       	or	r26, r20
    1c1e:	b5 2b       	or	r27, r21
    1c20:	84 83       	std	Z+4, r24	; 0x04
    1c22:	95 83       	std	Z+5, r25	; 0x05
    1c24:	a6 83       	std	Z+6, r26	; 0x06
    1c26:	b7 83       	std	Z+7, r27	; 0x07
    1c28:	82 81       	ldd	r24, Z+2	; 0x02
    1c2a:	93 81       	ldd	r25, Z+3	; 0x03
    1c2c:	01 96       	adiw	r24, 0x01	; 1
    1c2e:	93 83       	std	Z+3, r25	; 0x03
    1c30:	82 83       	std	Z+2, r24	; 0x02
    1c32:	df 01       	movw	r26, r30
    1c34:	01 c0       	rjmp	.+2      	; 0x1c38 <_fpadd_parts+0x28c>
    1c36:	d2 01       	movw	r26, r4
    1c38:	cd 01       	movw	r24, r26
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
    1c3e:	e2 e1       	ldi	r30, 0x12	; 18
    1c40:	0c 94 56 14 	jmp	0x28ac	; 0x28ac <__epilogue_restores__>

00001c44 <__subsf3>:
    1c44:	a0 e2       	ldi	r26, 0x20	; 32
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	e8 e2       	ldi	r30, 0x28	; 40
    1c4a:	fe e0       	ldi	r31, 0x0E	; 14
    1c4c:	0c 94 46 14 	jmp	0x288c	; 0x288c <__prologue_saves__+0x18>
    1c50:	69 83       	std	Y+1, r22	; 0x01
    1c52:	7a 83       	std	Y+2, r23	; 0x02
    1c54:	8b 83       	std	Y+3, r24	; 0x03
    1c56:	9c 83       	std	Y+4, r25	; 0x04
    1c58:	2d 83       	std	Y+5, r18	; 0x05
    1c5a:	3e 83       	std	Y+6, r19	; 0x06
    1c5c:	4f 83       	std	Y+7, r20	; 0x07
    1c5e:	58 87       	std	Y+8, r21	; 0x08
    1c60:	e9 e0       	ldi	r30, 0x09	; 9
    1c62:	ee 2e       	mov	r14, r30
    1c64:	f1 2c       	mov	r15, r1
    1c66:	ec 0e       	add	r14, r28
    1c68:	fd 1e       	adc	r15, r29
    1c6a:	b7 01       	movw	r22, r14
    1c6c:	ce 01       	movw	r24, r28
    1c6e:	01 96       	adiw	r24, 0x01	; 1
    1c70:	0e 94 33 13 	call	0x2666	; 0x2666 <__unpack_f>
    1c74:	8e 01       	movw	r16, r28
    1c76:	0f 5e       	subi	r16, 0xEF	; 239
    1c78:	1f 4f       	sbci	r17, 0xFF	; 255
    1c7a:	b8 01       	movw	r22, r16
    1c7c:	ce 01       	movw	r24, r28
    1c7e:	05 96       	adiw	r24, 0x05	; 5
    1c80:	0e 94 33 13 	call	0x2666	; 0x2666 <__unpack_f>
    1c84:	8a 89       	ldd	r24, Y+18	; 0x12
    1c86:	91 e0       	ldi	r25, 0x01	; 1
    1c88:	89 27       	eor	r24, r25
    1c8a:	8a 8b       	std	Y+18, r24	; 0x12
    1c8c:	ae 01       	movw	r20, r28
    1c8e:	47 5e       	subi	r20, 0xE7	; 231
    1c90:	5f 4f       	sbci	r21, 0xFF	; 255
    1c92:	b8 01       	movw	r22, r16
    1c94:	c7 01       	movw	r24, r14
    1c96:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_fpadd_parts>
    1c9a:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__pack_f>
    1c9e:	a0 96       	adiw	r28, 0x20	; 32
    1ca0:	e6 e0       	ldi	r30, 0x06	; 6
    1ca2:	0c 94 62 14 	jmp	0x28c4	; 0x28c4 <__epilogue_restores__+0x18>

00001ca6 <__addsf3>:
    1ca6:	a0 e2       	ldi	r26, 0x20	; 32
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	e9 e5       	ldi	r30, 0x59	; 89
    1cac:	fe e0       	ldi	r31, 0x0E	; 14
    1cae:	0c 94 46 14 	jmp	0x288c	; 0x288c <__prologue_saves__+0x18>
    1cb2:	69 83       	std	Y+1, r22	; 0x01
    1cb4:	7a 83       	std	Y+2, r23	; 0x02
    1cb6:	8b 83       	std	Y+3, r24	; 0x03
    1cb8:	9c 83       	std	Y+4, r25	; 0x04
    1cba:	2d 83       	std	Y+5, r18	; 0x05
    1cbc:	3e 83       	std	Y+6, r19	; 0x06
    1cbe:	4f 83       	std	Y+7, r20	; 0x07
    1cc0:	58 87       	std	Y+8, r21	; 0x08
    1cc2:	f9 e0       	ldi	r31, 0x09	; 9
    1cc4:	ef 2e       	mov	r14, r31
    1cc6:	f1 2c       	mov	r15, r1
    1cc8:	ec 0e       	add	r14, r28
    1cca:	fd 1e       	adc	r15, r29
    1ccc:	b7 01       	movw	r22, r14
    1cce:	ce 01       	movw	r24, r28
    1cd0:	01 96       	adiw	r24, 0x01	; 1
    1cd2:	0e 94 33 13 	call	0x2666	; 0x2666 <__unpack_f>
    1cd6:	8e 01       	movw	r16, r28
    1cd8:	0f 5e       	subi	r16, 0xEF	; 239
    1cda:	1f 4f       	sbci	r17, 0xFF	; 255
    1cdc:	b8 01       	movw	r22, r16
    1cde:	ce 01       	movw	r24, r28
    1ce0:	05 96       	adiw	r24, 0x05	; 5
    1ce2:	0e 94 33 13 	call	0x2666	; 0x2666 <__unpack_f>
    1ce6:	ae 01       	movw	r20, r28
    1ce8:	47 5e       	subi	r20, 0xE7	; 231
    1cea:	5f 4f       	sbci	r21, 0xFF	; 255
    1cec:	b8 01       	movw	r22, r16
    1cee:	c7 01       	movw	r24, r14
    1cf0:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_fpadd_parts>
    1cf4:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__pack_f>
    1cf8:	a0 96       	adiw	r28, 0x20	; 32
    1cfa:	e6 e0       	ldi	r30, 0x06	; 6
    1cfc:	0c 94 62 14 	jmp	0x28c4	; 0x28c4 <__epilogue_restores__+0x18>

00001d00 <__mulsf3>:
    1d00:	a0 e2       	ldi	r26, 0x20	; 32
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	e6 e8       	ldi	r30, 0x86	; 134
    1d06:	fe e0       	ldi	r31, 0x0E	; 14
    1d08:	0c 94 3a 14 	jmp	0x2874	; 0x2874 <__prologue_saves__>
    1d0c:	69 83       	std	Y+1, r22	; 0x01
    1d0e:	7a 83       	std	Y+2, r23	; 0x02
    1d10:	8b 83       	std	Y+3, r24	; 0x03
    1d12:	9c 83       	std	Y+4, r25	; 0x04
    1d14:	2d 83       	std	Y+5, r18	; 0x05
    1d16:	3e 83       	std	Y+6, r19	; 0x06
    1d18:	4f 83       	std	Y+7, r20	; 0x07
    1d1a:	58 87       	std	Y+8, r21	; 0x08
    1d1c:	be 01       	movw	r22, r28
    1d1e:	67 5f       	subi	r22, 0xF7	; 247
    1d20:	7f 4f       	sbci	r23, 0xFF	; 255
    1d22:	ce 01       	movw	r24, r28
    1d24:	01 96       	adiw	r24, 0x01	; 1
    1d26:	0e 94 33 13 	call	0x2666	; 0x2666 <__unpack_f>
    1d2a:	be 01       	movw	r22, r28
    1d2c:	6f 5e       	subi	r22, 0xEF	; 239
    1d2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d30:	ce 01       	movw	r24, r28
    1d32:	05 96       	adiw	r24, 0x05	; 5
    1d34:	0e 94 33 13 	call	0x2666	; 0x2666 <__unpack_f>
    1d38:	99 85       	ldd	r25, Y+9	; 0x09
    1d3a:	92 30       	cpi	r25, 0x02	; 2
    1d3c:	88 f0       	brcs	.+34     	; 0x1d60 <__mulsf3+0x60>
    1d3e:	89 89       	ldd	r24, Y+17	; 0x11
    1d40:	82 30       	cpi	r24, 0x02	; 2
    1d42:	c8 f0       	brcs	.+50     	; 0x1d76 <__mulsf3+0x76>
    1d44:	94 30       	cpi	r25, 0x04	; 4
    1d46:	19 f4       	brne	.+6      	; 0x1d4e <__mulsf3+0x4e>
    1d48:	82 30       	cpi	r24, 0x02	; 2
    1d4a:	51 f4       	brne	.+20     	; 0x1d60 <__mulsf3+0x60>
    1d4c:	04 c0       	rjmp	.+8      	; 0x1d56 <__mulsf3+0x56>
    1d4e:	84 30       	cpi	r24, 0x04	; 4
    1d50:	29 f4       	brne	.+10     	; 0x1d5c <__mulsf3+0x5c>
    1d52:	92 30       	cpi	r25, 0x02	; 2
    1d54:	81 f4       	brne	.+32     	; 0x1d76 <__mulsf3+0x76>
    1d56:	86 e6       	ldi	r24, 0x66	; 102
    1d58:	91 e0       	ldi	r25, 0x01	; 1
    1d5a:	c6 c0       	rjmp	.+396    	; 0x1ee8 <__mulsf3+0x1e8>
    1d5c:	92 30       	cpi	r25, 0x02	; 2
    1d5e:	49 f4       	brne	.+18     	; 0x1d72 <__mulsf3+0x72>
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d64:	8a 89       	ldd	r24, Y+18	; 0x12
    1d66:	98 13       	cpse	r25, r24
    1d68:	21 e0       	ldi	r18, 0x01	; 1
    1d6a:	2a 87       	std	Y+10, r18	; 0x0a
    1d6c:	ce 01       	movw	r24, r28
    1d6e:	09 96       	adiw	r24, 0x09	; 9
    1d70:	bb c0       	rjmp	.+374    	; 0x1ee8 <__mulsf3+0x1e8>
    1d72:	82 30       	cpi	r24, 0x02	; 2
    1d74:	49 f4       	brne	.+18     	; 0x1d88 <__mulsf3+0x88>
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d7a:	8a 89       	ldd	r24, Y+18	; 0x12
    1d7c:	98 13       	cpse	r25, r24
    1d7e:	21 e0       	ldi	r18, 0x01	; 1
    1d80:	2a 8b       	std	Y+18, r18	; 0x12
    1d82:	ce 01       	movw	r24, r28
    1d84:	41 96       	adiw	r24, 0x11	; 17
    1d86:	b0 c0       	rjmp	.+352    	; 0x1ee8 <__mulsf3+0x1e8>
    1d88:	2d 84       	ldd	r2, Y+13	; 0x0d
    1d8a:	3e 84       	ldd	r3, Y+14	; 0x0e
    1d8c:	4f 84       	ldd	r4, Y+15	; 0x0f
    1d8e:	58 88       	ldd	r5, Y+16	; 0x10
    1d90:	6d 88       	ldd	r6, Y+21	; 0x15
    1d92:	7e 88       	ldd	r7, Y+22	; 0x16
    1d94:	8f 88       	ldd	r8, Y+23	; 0x17
    1d96:	98 8c       	ldd	r9, Y+24	; 0x18
    1d98:	ee 24       	eor	r14, r14
    1d9a:	ff 24       	eor	r15, r15
    1d9c:	87 01       	movw	r16, r14
    1d9e:	aa 24       	eor	r10, r10
    1da0:	bb 24       	eor	r11, r11
    1da2:	65 01       	movw	r12, r10
    1da4:	40 e0       	ldi	r20, 0x00	; 0
    1da6:	50 e0       	ldi	r21, 0x00	; 0
    1da8:	60 e0       	ldi	r22, 0x00	; 0
    1daa:	70 e0       	ldi	r23, 0x00	; 0
    1dac:	e0 e0       	ldi	r30, 0x00	; 0
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	c1 01       	movw	r24, r2
    1db2:	81 70       	andi	r24, 0x01	; 1
    1db4:	90 70       	andi	r25, 0x00	; 0
    1db6:	89 2b       	or	r24, r25
    1db8:	e9 f0       	breq	.+58     	; 0x1df4 <__mulsf3+0xf4>
    1dba:	e6 0c       	add	r14, r6
    1dbc:	f7 1c       	adc	r15, r7
    1dbe:	08 1d       	adc	r16, r8
    1dc0:	19 1d       	adc	r17, r9
    1dc2:	9a 01       	movw	r18, r20
    1dc4:	ab 01       	movw	r20, r22
    1dc6:	2a 0d       	add	r18, r10
    1dc8:	3b 1d       	adc	r19, r11
    1dca:	4c 1d       	adc	r20, r12
    1dcc:	5d 1d       	adc	r21, r13
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	a0 e0       	ldi	r26, 0x00	; 0
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	e6 14       	cp	r14, r6
    1dd8:	f7 04       	cpc	r15, r7
    1dda:	08 05       	cpc	r16, r8
    1ddc:	19 05       	cpc	r17, r9
    1dde:	20 f4       	brcc	.+8      	; 0x1de8 <__mulsf3+0xe8>
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	a0 e0       	ldi	r26, 0x00	; 0
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	ba 01       	movw	r22, r20
    1dea:	a9 01       	movw	r20, r18
    1dec:	48 0f       	add	r20, r24
    1dee:	59 1f       	adc	r21, r25
    1df0:	6a 1f       	adc	r22, r26
    1df2:	7b 1f       	adc	r23, r27
    1df4:	aa 0c       	add	r10, r10
    1df6:	bb 1c       	adc	r11, r11
    1df8:	cc 1c       	adc	r12, r12
    1dfa:	dd 1c       	adc	r13, r13
    1dfc:	97 fe       	sbrs	r9, 7
    1dfe:	08 c0       	rjmp	.+16     	; 0x1e10 <__mulsf3+0x110>
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	a0 e0       	ldi	r26, 0x00	; 0
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	a8 2a       	or	r10, r24
    1e0a:	b9 2a       	or	r11, r25
    1e0c:	ca 2a       	or	r12, r26
    1e0e:	db 2a       	or	r13, r27
    1e10:	31 96       	adiw	r30, 0x01	; 1
    1e12:	e0 32       	cpi	r30, 0x20	; 32
    1e14:	f1 05       	cpc	r31, r1
    1e16:	49 f0       	breq	.+18     	; 0x1e2a <__mulsf3+0x12a>
    1e18:	66 0c       	add	r6, r6
    1e1a:	77 1c       	adc	r7, r7
    1e1c:	88 1c       	adc	r8, r8
    1e1e:	99 1c       	adc	r9, r9
    1e20:	56 94       	lsr	r5
    1e22:	47 94       	ror	r4
    1e24:	37 94       	ror	r3
    1e26:	27 94       	ror	r2
    1e28:	c3 cf       	rjmp	.-122    	; 0x1db0 <__mulsf3+0xb0>
    1e2a:	fa 85       	ldd	r31, Y+10	; 0x0a
    1e2c:	ea 89       	ldd	r30, Y+18	; 0x12
    1e2e:	2b 89       	ldd	r18, Y+19	; 0x13
    1e30:	3c 89       	ldd	r19, Y+20	; 0x14
    1e32:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e34:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e36:	28 0f       	add	r18, r24
    1e38:	39 1f       	adc	r19, r25
    1e3a:	2e 5f       	subi	r18, 0xFE	; 254
    1e3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e3e:	17 c0       	rjmp	.+46     	; 0x1e6e <__mulsf3+0x16e>
    1e40:	ca 01       	movw	r24, r20
    1e42:	81 70       	andi	r24, 0x01	; 1
    1e44:	90 70       	andi	r25, 0x00	; 0
    1e46:	89 2b       	or	r24, r25
    1e48:	61 f0       	breq	.+24     	; 0x1e62 <__mulsf3+0x162>
    1e4a:	16 95       	lsr	r17
    1e4c:	07 95       	ror	r16
    1e4e:	f7 94       	ror	r15
    1e50:	e7 94       	ror	r14
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	a0 e0       	ldi	r26, 0x00	; 0
    1e58:	b0 e8       	ldi	r27, 0x80	; 128
    1e5a:	e8 2a       	or	r14, r24
    1e5c:	f9 2a       	or	r15, r25
    1e5e:	0a 2b       	or	r16, r26
    1e60:	1b 2b       	or	r17, r27
    1e62:	76 95       	lsr	r23
    1e64:	67 95       	ror	r22
    1e66:	57 95       	ror	r21
    1e68:	47 95       	ror	r20
    1e6a:	2f 5f       	subi	r18, 0xFF	; 255
    1e6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e6e:	77 fd       	sbrc	r23, 7
    1e70:	e7 cf       	rjmp	.-50     	; 0x1e40 <__mulsf3+0x140>
    1e72:	0c c0       	rjmp	.+24     	; 0x1e8c <__mulsf3+0x18c>
    1e74:	44 0f       	add	r20, r20
    1e76:	55 1f       	adc	r21, r21
    1e78:	66 1f       	adc	r22, r22
    1e7a:	77 1f       	adc	r23, r23
    1e7c:	17 fd       	sbrc	r17, 7
    1e7e:	41 60       	ori	r20, 0x01	; 1
    1e80:	ee 0c       	add	r14, r14
    1e82:	ff 1c       	adc	r15, r15
    1e84:	00 1f       	adc	r16, r16
    1e86:	11 1f       	adc	r17, r17
    1e88:	21 50       	subi	r18, 0x01	; 1
    1e8a:	30 40       	sbci	r19, 0x00	; 0
    1e8c:	40 30       	cpi	r20, 0x00	; 0
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	59 07       	cpc	r21, r25
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	69 07       	cpc	r22, r25
    1e96:	90 e4       	ldi	r25, 0x40	; 64
    1e98:	79 07       	cpc	r23, r25
    1e9a:	60 f3       	brcs	.-40     	; 0x1e74 <__mulsf3+0x174>
    1e9c:	2b 8f       	std	Y+27, r18	; 0x1b
    1e9e:	3c 8f       	std	Y+28, r19	; 0x1c
    1ea0:	db 01       	movw	r26, r22
    1ea2:	ca 01       	movw	r24, r20
    1ea4:	8f 77       	andi	r24, 0x7F	; 127
    1ea6:	90 70       	andi	r25, 0x00	; 0
    1ea8:	a0 70       	andi	r26, 0x00	; 0
    1eaa:	b0 70       	andi	r27, 0x00	; 0
    1eac:	80 34       	cpi	r24, 0x40	; 64
    1eae:	91 05       	cpc	r25, r1
    1eb0:	a1 05       	cpc	r26, r1
    1eb2:	b1 05       	cpc	r27, r1
    1eb4:	61 f4       	brne	.+24     	; 0x1ece <__mulsf3+0x1ce>
    1eb6:	47 fd       	sbrc	r20, 7
    1eb8:	0a c0       	rjmp	.+20     	; 0x1ece <__mulsf3+0x1ce>
    1eba:	e1 14       	cp	r14, r1
    1ebc:	f1 04       	cpc	r15, r1
    1ebe:	01 05       	cpc	r16, r1
    1ec0:	11 05       	cpc	r17, r1
    1ec2:	29 f0       	breq	.+10     	; 0x1ece <__mulsf3+0x1ce>
    1ec4:	40 5c       	subi	r20, 0xC0	; 192
    1ec6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ec8:	6f 4f       	sbci	r22, 0xFF	; 255
    1eca:	7f 4f       	sbci	r23, 0xFF	; 255
    1ecc:	40 78       	andi	r20, 0x80	; 128
    1ece:	1a 8e       	std	Y+26, r1	; 0x1a
    1ed0:	fe 17       	cp	r31, r30
    1ed2:	11 f0       	breq	.+4      	; 0x1ed8 <__mulsf3+0x1d8>
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	8a 8f       	std	Y+26, r24	; 0x1a
    1ed8:	4d 8f       	std	Y+29, r20	; 0x1d
    1eda:	5e 8f       	std	Y+30, r21	; 0x1e
    1edc:	6f 8f       	std	Y+31, r22	; 0x1f
    1ede:	78 a3       	std	Y+32, r23	; 0x20
    1ee0:	83 e0       	ldi	r24, 0x03	; 3
    1ee2:	89 8f       	std	Y+25, r24	; 0x19
    1ee4:	ce 01       	movw	r24, r28
    1ee6:	49 96       	adiw	r24, 0x19	; 25
    1ee8:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__pack_f>
    1eec:	a0 96       	adiw	r28, 0x20	; 32
    1eee:	e2 e1       	ldi	r30, 0x12	; 18
    1ef0:	0c 94 56 14 	jmp	0x28ac	; 0x28ac <__epilogue_restores__>

00001ef4 <__divsf3>:
    1ef4:	a8 e1       	ldi	r26, 0x18	; 24
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	e0 e8       	ldi	r30, 0x80	; 128
    1efa:	ff e0       	ldi	r31, 0x0F	; 15
    1efc:	0c 94 42 14 	jmp	0x2884	; 0x2884 <__prologue_saves__+0x10>
    1f00:	69 83       	std	Y+1, r22	; 0x01
    1f02:	7a 83       	std	Y+2, r23	; 0x02
    1f04:	8b 83       	std	Y+3, r24	; 0x03
    1f06:	9c 83       	std	Y+4, r25	; 0x04
    1f08:	2d 83       	std	Y+5, r18	; 0x05
    1f0a:	3e 83       	std	Y+6, r19	; 0x06
    1f0c:	4f 83       	std	Y+7, r20	; 0x07
    1f0e:	58 87       	std	Y+8, r21	; 0x08
    1f10:	b9 e0       	ldi	r27, 0x09	; 9
    1f12:	eb 2e       	mov	r14, r27
    1f14:	f1 2c       	mov	r15, r1
    1f16:	ec 0e       	add	r14, r28
    1f18:	fd 1e       	adc	r15, r29
    1f1a:	b7 01       	movw	r22, r14
    1f1c:	ce 01       	movw	r24, r28
    1f1e:	01 96       	adiw	r24, 0x01	; 1
    1f20:	0e 94 33 13 	call	0x2666	; 0x2666 <__unpack_f>
    1f24:	8e 01       	movw	r16, r28
    1f26:	0f 5e       	subi	r16, 0xEF	; 239
    1f28:	1f 4f       	sbci	r17, 0xFF	; 255
    1f2a:	b8 01       	movw	r22, r16
    1f2c:	ce 01       	movw	r24, r28
    1f2e:	05 96       	adiw	r24, 0x05	; 5
    1f30:	0e 94 33 13 	call	0x2666	; 0x2666 <__unpack_f>
    1f34:	29 85       	ldd	r18, Y+9	; 0x09
    1f36:	22 30       	cpi	r18, 0x02	; 2
    1f38:	08 f4       	brcc	.+2      	; 0x1f3c <__divsf3+0x48>
    1f3a:	7c c0       	rjmp	.+248    	; 0x2034 <__divsf3+0x140>
    1f3c:	39 89       	ldd	r19, Y+17	; 0x11
    1f3e:	32 30       	cpi	r19, 0x02	; 2
    1f40:	10 f4       	brcc	.+4      	; 0x1f46 <__divsf3+0x52>
    1f42:	b8 01       	movw	r22, r16
    1f44:	7a c0       	rjmp	.+244    	; 0x203a <__divsf3+0x146>
    1f46:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f48:	9a 89       	ldd	r25, Y+18	; 0x12
    1f4a:	89 27       	eor	r24, r25
    1f4c:	8a 87       	std	Y+10, r24	; 0x0a
    1f4e:	24 30       	cpi	r18, 0x04	; 4
    1f50:	11 f0       	breq	.+4      	; 0x1f56 <__divsf3+0x62>
    1f52:	22 30       	cpi	r18, 0x02	; 2
    1f54:	31 f4       	brne	.+12     	; 0x1f62 <__divsf3+0x6e>
    1f56:	23 17       	cp	r18, r19
    1f58:	09 f0       	breq	.+2      	; 0x1f5c <__divsf3+0x68>
    1f5a:	6c c0       	rjmp	.+216    	; 0x2034 <__divsf3+0x140>
    1f5c:	66 e6       	ldi	r22, 0x66	; 102
    1f5e:	71 e0       	ldi	r23, 0x01	; 1
    1f60:	6c c0       	rjmp	.+216    	; 0x203a <__divsf3+0x146>
    1f62:	34 30       	cpi	r19, 0x04	; 4
    1f64:	39 f4       	brne	.+14     	; 0x1f74 <__divsf3+0x80>
    1f66:	1d 86       	std	Y+13, r1	; 0x0d
    1f68:	1e 86       	std	Y+14, r1	; 0x0e
    1f6a:	1f 86       	std	Y+15, r1	; 0x0f
    1f6c:	18 8a       	std	Y+16, r1	; 0x10
    1f6e:	1c 86       	std	Y+12, r1	; 0x0c
    1f70:	1b 86       	std	Y+11, r1	; 0x0b
    1f72:	04 c0       	rjmp	.+8      	; 0x1f7c <__divsf3+0x88>
    1f74:	32 30       	cpi	r19, 0x02	; 2
    1f76:	21 f4       	brne	.+8      	; 0x1f80 <__divsf3+0x8c>
    1f78:	84 e0       	ldi	r24, 0x04	; 4
    1f7a:	89 87       	std	Y+9, r24	; 0x09
    1f7c:	b7 01       	movw	r22, r14
    1f7e:	5d c0       	rjmp	.+186    	; 0x203a <__divsf3+0x146>
    1f80:	2b 85       	ldd	r18, Y+11	; 0x0b
    1f82:	3c 85       	ldd	r19, Y+12	; 0x0c
    1f84:	8b 89       	ldd	r24, Y+19	; 0x13
    1f86:	9c 89       	ldd	r25, Y+20	; 0x14
    1f88:	28 1b       	sub	r18, r24
    1f8a:	39 0b       	sbc	r19, r25
    1f8c:	3c 87       	std	Y+12, r19	; 0x0c
    1f8e:	2b 87       	std	Y+11, r18	; 0x0b
    1f90:	ed 84       	ldd	r14, Y+13	; 0x0d
    1f92:	fe 84       	ldd	r15, Y+14	; 0x0e
    1f94:	0f 85       	ldd	r16, Y+15	; 0x0f
    1f96:	18 89       	ldd	r17, Y+16	; 0x10
    1f98:	ad 88       	ldd	r10, Y+21	; 0x15
    1f9a:	be 88       	ldd	r11, Y+22	; 0x16
    1f9c:	cf 88       	ldd	r12, Y+23	; 0x17
    1f9e:	d8 8c       	ldd	r13, Y+24	; 0x18
    1fa0:	ea 14       	cp	r14, r10
    1fa2:	fb 04       	cpc	r15, r11
    1fa4:	0c 05       	cpc	r16, r12
    1fa6:	1d 05       	cpc	r17, r13
    1fa8:	40 f4       	brcc	.+16     	; 0x1fba <__divsf3+0xc6>
    1faa:	ee 0c       	add	r14, r14
    1fac:	ff 1c       	adc	r15, r15
    1fae:	00 1f       	adc	r16, r16
    1fb0:	11 1f       	adc	r17, r17
    1fb2:	21 50       	subi	r18, 0x01	; 1
    1fb4:	30 40       	sbci	r19, 0x00	; 0
    1fb6:	3c 87       	std	Y+12, r19	; 0x0c
    1fb8:	2b 87       	std	Y+11, r18	; 0x0b
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	40 e0       	ldi	r20, 0x00	; 0
    1fc0:	50 e0       	ldi	r21, 0x00	; 0
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	a0 e0       	ldi	r26, 0x00	; 0
    1fc8:	b0 e4       	ldi	r27, 0x40	; 64
    1fca:	6f e1       	ldi	r22, 0x1F	; 31
    1fcc:	70 e0       	ldi	r23, 0x00	; 0
    1fce:	ea 14       	cp	r14, r10
    1fd0:	fb 04       	cpc	r15, r11
    1fd2:	0c 05       	cpc	r16, r12
    1fd4:	1d 05       	cpc	r17, r13
    1fd6:	40 f0       	brcs	.+16     	; 0x1fe8 <__divsf3+0xf4>
    1fd8:	28 2b       	or	r18, r24
    1fda:	39 2b       	or	r19, r25
    1fdc:	4a 2b       	or	r20, r26
    1fde:	5b 2b       	or	r21, r27
    1fe0:	ea 18       	sub	r14, r10
    1fe2:	fb 08       	sbc	r15, r11
    1fe4:	0c 09       	sbc	r16, r12
    1fe6:	1d 09       	sbc	r17, r13
    1fe8:	b6 95       	lsr	r27
    1fea:	a7 95       	ror	r26
    1fec:	97 95       	ror	r25
    1fee:	87 95       	ror	r24
    1ff0:	ee 0c       	add	r14, r14
    1ff2:	ff 1c       	adc	r15, r15
    1ff4:	00 1f       	adc	r16, r16
    1ff6:	11 1f       	adc	r17, r17
    1ff8:	61 50       	subi	r22, 0x01	; 1
    1ffa:	70 40       	sbci	r23, 0x00	; 0
    1ffc:	41 f7       	brne	.-48     	; 0x1fce <__divsf3+0xda>
    1ffe:	da 01       	movw	r26, r20
    2000:	c9 01       	movw	r24, r18
    2002:	8f 77       	andi	r24, 0x7F	; 127
    2004:	90 70       	andi	r25, 0x00	; 0
    2006:	a0 70       	andi	r26, 0x00	; 0
    2008:	b0 70       	andi	r27, 0x00	; 0
    200a:	80 34       	cpi	r24, 0x40	; 64
    200c:	91 05       	cpc	r25, r1
    200e:	a1 05       	cpc	r26, r1
    2010:	b1 05       	cpc	r27, r1
    2012:	61 f4       	brne	.+24     	; 0x202c <__divsf3+0x138>
    2014:	27 fd       	sbrc	r18, 7
    2016:	0a c0       	rjmp	.+20     	; 0x202c <__divsf3+0x138>
    2018:	e1 14       	cp	r14, r1
    201a:	f1 04       	cpc	r15, r1
    201c:	01 05       	cpc	r16, r1
    201e:	11 05       	cpc	r17, r1
    2020:	29 f0       	breq	.+10     	; 0x202c <__divsf3+0x138>
    2022:	20 5c       	subi	r18, 0xC0	; 192
    2024:	3f 4f       	sbci	r19, 0xFF	; 255
    2026:	4f 4f       	sbci	r20, 0xFF	; 255
    2028:	5f 4f       	sbci	r21, 0xFF	; 255
    202a:	20 78       	andi	r18, 0x80	; 128
    202c:	2d 87       	std	Y+13, r18	; 0x0d
    202e:	3e 87       	std	Y+14, r19	; 0x0e
    2030:	4f 87       	std	Y+15, r20	; 0x0f
    2032:	58 8b       	std	Y+16, r21	; 0x10
    2034:	be 01       	movw	r22, r28
    2036:	67 5f       	subi	r22, 0xF7	; 247
    2038:	7f 4f       	sbci	r23, 0xFF	; 255
    203a:	cb 01       	movw	r24, r22
    203c:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__pack_f>
    2040:	68 96       	adiw	r28, 0x18	; 24
    2042:	ea e0       	ldi	r30, 0x0A	; 10
    2044:	0c 94 5e 14 	jmp	0x28bc	; 0x28bc <__epilogue_restores__+0x10>

00002048 <__eqsf2>:
    2048:	a8 e1       	ldi	r26, 0x18	; 24
    204a:	b0 e0       	ldi	r27, 0x00	; 0
    204c:	ea e2       	ldi	r30, 0x2A	; 42
    204e:	f0 e1       	ldi	r31, 0x10	; 16
    2050:	0c 94 46 14 	jmp	0x288c	; 0x288c <__prologue_saves__+0x18>
    2054:	69 83       	std	Y+1, r22	; 0x01
    2056:	7a 83       	std	Y+2, r23	; 0x02
    2058:	8b 83       	std	Y+3, r24	; 0x03
    205a:	9c 83       	std	Y+4, r25	; 0x04
    205c:	2d 83       	std	Y+5, r18	; 0x05
    205e:	3e 83       	std	Y+6, r19	; 0x06
    2060:	4f 83       	std	Y+7, r20	; 0x07
    2062:	58 87       	std	Y+8, r21	; 0x08
    2064:	89 e0       	ldi	r24, 0x09	; 9
    2066:	e8 2e       	mov	r14, r24
    2068:	f1 2c       	mov	r15, r1
    206a:	ec 0e       	add	r14, r28
    206c:	fd 1e       	adc	r15, r29
    206e:	b7 01       	movw	r22, r14
    2070:	ce 01       	movw	r24, r28
    2072:	01 96       	adiw	r24, 0x01	; 1
    2074:	0e 94 33 13 	call	0x2666	; 0x2666 <__unpack_f>
    2078:	8e 01       	movw	r16, r28
    207a:	0f 5e       	subi	r16, 0xEF	; 239
    207c:	1f 4f       	sbci	r17, 0xFF	; 255
    207e:	b8 01       	movw	r22, r16
    2080:	ce 01       	movw	r24, r28
    2082:	05 96       	adiw	r24, 0x05	; 5
    2084:	0e 94 33 13 	call	0x2666	; 0x2666 <__unpack_f>
    2088:	89 85       	ldd	r24, Y+9	; 0x09
    208a:	82 30       	cpi	r24, 0x02	; 2
    208c:	40 f0       	brcs	.+16     	; 0x209e <__eqsf2+0x56>
    208e:	89 89       	ldd	r24, Y+17	; 0x11
    2090:	82 30       	cpi	r24, 0x02	; 2
    2092:	28 f0       	brcs	.+10     	; 0x209e <__eqsf2+0x56>
    2094:	b8 01       	movw	r22, r16
    2096:	c7 01       	movw	r24, r14
    2098:	0e 94 ab 13 	call	0x2756	; 0x2756 <__fpcmp_parts_f>
    209c:	01 c0       	rjmp	.+2      	; 0x20a0 <__eqsf2+0x58>
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	68 96       	adiw	r28, 0x18	; 24
    20a2:	e6 e0       	ldi	r30, 0x06	; 6
    20a4:	0c 94 62 14 	jmp	0x28c4	; 0x28c4 <__epilogue_restores__+0x18>

000020a8 <__gtsf2>:
    20a8:	a8 e1       	ldi	r26, 0x18	; 24
    20aa:	b0 e0       	ldi	r27, 0x00	; 0
    20ac:	ea e5       	ldi	r30, 0x5A	; 90
    20ae:	f0 e1       	ldi	r31, 0x10	; 16
    20b0:	0c 94 46 14 	jmp	0x288c	; 0x288c <__prologue_saves__+0x18>
    20b4:	69 83       	std	Y+1, r22	; 0x01
    20b6:	7a 83       	std	Y+2, r23	; 0x02
    20b8:	8b 83       	std	Y+3, r24	; 0x03
    20ba:	9c 83       	std	Y+4, r25	; 0x04
    20bc:	2d 83       	std	Y+5, r18	; 0x05
    20be:	3e 83       	std	Y+6, r19	; 0x06
    20c0:	4f 83       	std	Y+7, r20	; 0x07
    20c2:	58 87       	std	Y+8, r21	; 0x08
    20c4:	89 e0       	ldi	r24, 0x09	; 9
    20c6:	e8 2e       	mov	r14, r24
    20c8:	f1 2c       	mov	r15, r1
    20ca:	ec 0e       	add	r14, r28
    20cc:	fd 1e       	adc	r15, r29
    20ce:	b7 01       	movw	r22, r14
    20d0:	ce 01       	movw	r24, r28
    20d2:	01 96       	adiw	r24, 0x01	; 1
    20d4:	0e 94 33 13 	call	0x2666	; 0x2666 <__unpack_f>
    20d8:	8e 01       	movw	r16, r28
    20da:	0f 5e       	subi	r16, 0xEF	; 239
    20dc:	1f 4f       	sbci	r17, 0xFF	; 255
    20de:	b8 01       	movw	r22, r16
    20e0:	ce 01       	movw	r24, r28
    20e2:	05 96       	adiw	r24, 0x05	; 5
    20e4:	0e 94 33 13 	call	0x2666	; 0x2666 <__unpack_f>
    20e8:	89 85       	ldd	r24, Y+9	; 0x09
    20ea:	82 30       	cpi	r24, 0x02	; 2
    20ec:	40 f0       	brcs	.+16     	; 0x20fe <__gtsf2+0x56>
    20ee:	89 89       	ldd	r24, Y+17	; 0x11
    20f0:	82 30       	cpi	r24, 0x02	; 2
    20f2:	28 f0       	brcs	.+10     	; 0x20fe <__gtsf2+0x56>
    20f4:	b8 01       	movw	r22, r16
    20f6:	c7 01       	movw	r24, r14
    20f8:	0e 94 ab 13 	call	0x2756	; 0x2756 <__fpcmp_parts_f>
    20fc:	01 c0       	rjmp	.+2      	; 0x2100 <__gtsf2+0x58>
    20fe:	8f ef       	ldi	r24, 0xFF	; 255
    2100:	68 96       	adiw	r28, 0x18	; 24
    2102:	e6 e0       	ldi	r30, 0x06	; 6
    2104:	0c 94 62 14 	jmp	0x28c4	; 0x28c4 <__epilogue_restores__+0x18>

00002108 <__gesf2>:
    2108:	a8 e1       	ldi	r26, 0x18	; 24
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	ea e8       	ldi	r30, 0x8A	; 138
    210e:	f0 e1       	ldi	r31, 0x10	; 16
    2110:	0c 94 46 14 	jmp	0x288c	; 0x288c <__prologue_saves__+0x18>
    2114:	69 83       	std	Y+1, r22	; 0x01
    2116:	7a 83       	std	Y+2, r23	; 0x02
    2118:	8b 83       	std	Y+3, r24	; 0x03
    211a:	9c 83       	std	Y+4, r25	; 0x04
    211c:	2d 83       	std	Y+5, r18	; 0x05
    211e:	3e 83       	std	Y+6, r19	; 0x06
    2120:	4f 83       	std	Y+7, r20	; 0x07
    2122:	58 87       	std	Y+8, r21	; 0x08
    2124:	89 e0       	ldi	r24, 0x09	; 9
    2126:	e8 2e       	mov	r14, r24
    2128:	f1 2c       	mov	r15, r1
    212a:	ec 0e       	add	r14, r28
    212c:	fd 1e       	adc	r15, r29
    212e:	b7 01       	movw	r22, r14
    2130:	ce 01       	movw	r24, r28
    2132:	01 96       	adiw	r24, 0x01	; 1
    2134:	0e 94 33 13 	call	0x2666	; 0x2666 <__unpack_f>
    2138:	8e 01       	movw	r16, r28
    213a:	0f 5e       	subi	r16, 0xEF	; 239
    213c:	1f 4f       	sbci	r17, 0xFF	; 255
    213e:	b8 01       	movw	r22, r16
    2140:	ce 01       	movw	r24, r28
    2142:	05 96       	adiw	r24, 0x05	; 5
    2144:	0e 94 33 13 	call	0x2666	; 0x2666 <__unpack_f>
    2148:	89 85       	ldd	r24, Y+9	; 0x09
    214a:	82 30       	cpi	r24, 0x02	; 2
    214c:	40 f0       	brcs	.+16     	; 0x215e <__gesf2+0x56>
    214e:	89 89       	ldd	r24, Y+17	; 0x11
    2150:	82 30       	cpi	r24, 0x02	; 2
    2152:	28 f0       	brcs	.+10     	; 0x215e <__gesf2+0x56>
    2154:	b8 01       	movw	r22, r16
    2156:	c7 01       	movw	r24, r14
    2158:	0e 94 ab 13 	call	0x2756	; 0x2756 <__fpcmp_parts_f>
    215c:	01 c0       	rjmp	.+2      	; 0x2160 <__gesf2+0x58>
    215e:	8f ef       	ldi	r24, 0xFF	; 255
    2160:	68 96       	adiw	r28, 0x18	; 24
    2162:	e6 e0       	ldi	r30, 0x06	; 6
    2164:	0c 94 62 14 	jmp	0x28c4	; 0x28c4 <__epilogue_restores__+0x18>

00002168 <__ltsf2>:
    2168:	a8 e1       	ldi	r26, 0x18	; 24
    216a:	b0 e0       	ldi	r27, 0x00	; 0
    216c:	ea eb       	ldi	r30, 0xBA	; 186
    216e:	f0 e1       	ldi	r31, 0x10	; 16
    2170:	0c 94 46 14 	jmp	0x288c	; 0x288c <__prologue_saves__+0x18>
    2174:	69 83       	std	Y+1, r22	; 0x01
    2176:	7a 83       	std	Y+2, r23	; 0x02
    2178:	8b 83       	std	Y+3, r24	; 0x03
    217a:	9c 83       	std	Y+4, r25	; 0x04
    217c:	2d 83       	std	Y+5, r18	; 0x05
    217e:	3e 83       	std	Y+6, r19	; 0x06
    2180:	4f 83       	std	Y+7, r20	; 0x07
    2182:	58 87       	std	Y+8, r21	; 0x08
    2184:	89 e0       	ldi	r24, 0x09	; 9
    2186:	e8 2e       	mov	r14, r24
    2188:	f1 2c       	mov	r15, r1
    218a:	ec 0e       	add	r14, r28
    218c:	fd 1e       	adc	r15, r29
    218e:	b7 01       	movw	r22, r14
    2190:	ce 01       	movw	r24, r28
    2192:	01 96       	adiw	r24, 0x01	; 1
    2194:	0e 94 33 13 	call	0x2666	; 0x2666 <__unpack_f>
    2198:	8e 01       	movw	r16, r28
    219a:	0f 5e       	subi	r16, 0xEF	; 239
    219c:	1f 4f       	sbci	r17, 0xFF	; 255
    219e:	b8 01       	movw	r22, r16
    21a0:	ce 01       	movw	r24, r28
    21a2:	05 96       	adiw	r24, 0x05	; 5
    21a4:	0e 94 33 13 	call	0x2666	; 0x2666 <__unpack_f>
    21a8:	89 85       	ldd	r24, Y+9	; 0x09
    21aa:	82 30       	cpi	r24, 0x02	; 2
    21ac:	40 f0       	brcs	.+16     	; 0x21be <__ltsf2+0x56>
    21ae:	89 89       	ldd	r24, Y+17	; 0x11
    21b0:	82 30       	cpi	r24, 0x02	; 2
    21b2:	28 f0       	brcs	.+10     	; 0x21be <__ltsf2+0x56>
    21b4:	b8 01       	movw	r22, r16
    21b6:	c7 01       	movw	r24, r14
    21b8:	0e 94 ab 13 	call	0x2756	; 0x2756 <__fpcmp_parts_f>
    21bc:	01 c0       	rjmp	.+2      	; 0x21c0 <__ltsf2+0x58>
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	68 96       	adiw	r28, 0x18	; 24
    21c2:	e6 e0       	ldi	r30, 0x06	; 6
    21c4:	0c 94 62 14 	jmp	0x28c4	; 0x28c4 <__epilogue_restores__+0x18>

000021c8 <__floatsisf>:
    21c8:	a8 e0       	ldi	r26, 0x08	; 8
    21ca:	b0 e0       	ldi	r27, 0x00	; 0
    21cc:	ea ee       	ldi	r30, 0xEA	; 234
    21ce:	f0 e1       	ldi	r31, 0x10	; 16
    21d0:	0c 94 43 14 	jmp	0x2886	; 0x2886 <__prologue_saves__+0x12>
    21d4:	9b 01       	movw	r18, r22
    21d6:	ac 01       	movw	r20, r24
    21d8:	83 e0       	ldi	r24, 0x03	; 3
    21da:	89 83       	std	Y+1, r24	; 0x01
    21dc:	da 01       	movw	r26, r20
    21de:	c9 01       	movw	r24, r18
    21e0:	88 27       	eor	r24, r24
    21e2:	b7 fd       	sbrc	r27, 7
    21e4:	83 95       	inc	r24
    21e6:	99 27       	eor	r25, r25
    21e8:	aa 27       	eor	r26, r26
    21ea:	bb 27       	eor	r27, r27
    21ec:	b8 2e       	mov	r11, r24
    21ee:	21 15       	cp	r18, r1
    21f0:	31 05       	cpc	r19, r1
    21f2:	41 05       	cpc	r20, r1
    21f4:	51 05       	cpc	r21, r1
    21f6:	19 f4       	brne	.+6      	; 0x21fe <__floatsisf+0x36>
    21f8:	82 e0       	ldi	r24, 0x02	; 2
    21fa:	89 83       	std	Y+1, r24	; 0x01
    21fc:	3a c0       	rjmp	.+116    	; 0x2272 <__floatsisf+0xaa>
    21fe:	88 23       	and	r24, r24
    2200:	a9 f0       	breq	.+42     	; 0x222c <__floatsisf+0x64>
    2202:	20 30       	cpi	r18, 0x00	; 0
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	38 07       	cpc	r19, r24
    2208:	80 e0       	ldi	r24, 0x00	; 0
    220a:	48 07       	cpc	r20, r24
    220c:	80 e8       	ldi	r24, 0x80	; 128
    220e:	58 07       	cpc	r21, r24
    2210:	29 f4       	brne	.+10     	; 0x221c <__floatsisf+0x54>
    2212:	60 e0       	ldi	r22, 0x00	; 0
    2214:	70 e0       	ldi	r23, 0x00	; 0
    2216:	80 e0       	ldi	r24, 0x00	; 0
    2218:	9f ec       	ldi	r25, 0xCF	; 207
    221a:	30 c0       	rjmp	.+96     	; 0x227c <__floatsisf+0xb4>
    221c:	ee 24       	eor	r14, r14
    221e:	ff 24       	eor	r15, r15
    2220:	87 01       	movw	r16, r14
    2222:	e2 1a       	sub	r14, r18
    2224:	f3 0a       	sbc	r15, r19
    2226:	04 0b       	sbc	r16, r20
    2228:	15 0b       	sbc	r17, r21
    222a:	02 c0       	rjmp	.+4      	; 0x2230 <__floatsisf+0x68>
    222c:	79 01       	movw	r14, r18
    222e:	8a 01       	movw	r16, r20
    2230:	8e e1       	ldi	r24, 0x1E	; 30
    2232:	c8 2e       	mov	r12, r24
    2234:	d1 2c       	mov	r13, r1
    2236:	dc 82       	std	Y+4, r13	; 0x04
    2238:	cb 82       	std	Y+3, r12	; 0x03
    223a:	ed 82       	std	Y+5, r14	; 0x05
    223c:	fe 82       	std	Y+6, r15	; 0x06
    223e:	0f 83       	std	Y+7, r16	; 0x07
    2240:	18 87       	std	Y+8, r17	; 0x08
    2242:	c8 01       	movw	r24, r16
    2244:	b7 01       	movw	r22, r14
    2246:	0e 94 0f 12 	call	0x241e	; 0x241e <__clzsi2>
    224a:	01 97       	sbiw	r24, 0x01	; 1
    224c:	18 16       	cp	r1, r24
    224e:	19 06       	cpc	r1, r25
    2250:	84 f4       	brge	.+32     	; 0x2272 <__floatsisf+0xaa>
    2252:	08 2e       	mov	r0, r24
    2254:	04 c0       	rjmp	.+8      	; 0x225e <__floatsisf+0x96>
    2256:	ee 0c       	add	r14, r14
    2258:	ff 1c       	adc	r15, r15
    225a:	00 1f       	adc	r16, r16
    225c:	11 1f       	adc	r17, r17
    225e:	0a 94       	dec	r0
    2260:	d2 f7       	brpl	.-12     	; 0x2256 <__floatsisf+0x8e>
    2262:	ed 82       	std	Y+5, r14	; 0x05
    2264:	fe 82       	std	Y+6, r15	; 0x06
    2266:	0f 83       	std	Y+7, r16	; 0x07
    2268:	18 87       	std	Y+8, r17	; 0x08
    226a:	c8 1a       	sub	r12, r24
    226c:	d9 0a       	sbc	r13, r25
    226e:	dc 82       	std	Y+4, r13	; 0x04
    2270:	cb 82       	std	Y+3, r12	; 0x03
    2272:	ba 82       	std	Y+2, r11	; 0x02
    2274:	ce 01       	movw	r24, r28
    2276:	01 96       	adiw	r24, 0x01	; 1
    2278:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__pack_f>
    227c:	28 96       	adiw	r28, 0x08	; 8
    227e:	e9 e0       	ldi	r30, 0x09	; 9
    2280:	0c 94 5f 14 	jmp	0x28be	; 0x28be <__epilogue_restores__+0x12>

00002284 <__fixsfsi>:
    2284:	ac e0       	ldi	r26, 0x0C	; 12
    2286:	b0 e0       	ldi	r27, 0x00	; 0
    2288:	e8 e4       	ldi	r30, 0x48	; 72
    228a:	f1 e1       	ldi	r31, 0x11	; 17
    228c:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <__prologue_saves__+0x20>
    2290:	69 83       	std	Y+1, r22	; 0x01
    2292:	7a 83       	std	Y+2, r23	; 0x02
    2294:	8b 83       	std	Y+3, r24	; 0x03
    2296:	9c 83       	std	Y+4, r25	; 0x04
    2298:	be 01       	movw	r22, r28
    229a:	6b 5f       	subi	r22, 0xFB	; 251
    229c:	7f 4f       	sbci	r23, 0xFF	; 255
    229e:	ce 01       	movw	r24, r28
    22a0:	01 96       	adiw	r24, 0x01	; 1
    22a2:	0e 94 33 13 	call	0x2666	; 0x2666 <__unpack_f>
    22a6:	8d 81       	ldd	r24, Y+5	; 0x05
    22a8:	82 30       	cpi	r24, 0x02	; 2
    22aa:	61 f1       	breq	.+88     	; 0x2304 <__fixsfsi+0x80>
    22ac:	82 30       	cpi	r24, 0x02	; 2
    22ae:	50 f1       	brcs	.+84     	; 0x2304 <__fixsfsi+0x80>
    22b0:	84 30       	cpi	r24, 0x04	; 4
    22b2:	21 f4       	brne	.+8      	; 0x22bc <__fixsfsi+0x38>
    22b4:	8e 81       	ldd	r24, Y+6	; 0x06
    22b6:	88 23       	and	r24, r24
    22b8:	51 f1       	breq	.+84     	; 0x230e <__fixsfsi+0x8a>
    22ba:	2e c0       	rjmp	.+92     	; 0x2318 <__fixsfsi+0x94>
    22bc:	2f 81       	ldd	r18, Y+7	; 0x07
    22be:	38 85       	ldd	r19, Y+8	; 0x08
    22c0:	37 fd       	sbrc	r19, 7
    22c2:	20 c0       	rjmp	.+64     	; 0x2304 <__fixsfsi+0x80>
    22c4:	6e 81       	ldd	r22, Y+6	; 0x06
    22c6:	2f 31       	cpi	r18, 0x1F	; 31
    22c8:	31 05       	cpc	r19, r1
    22ca:	1c f0       	brlt	.+6      	; 0x22d2 <__fixsfsi+0x4e>
    22cc:	66 23       	and	r22, r22
    22ce:	f9 f0       	breq	.+62     	; 0x230e <__fixsfsi+0x8a>
    22d0:	23 c0       	rjmp	.+70     	; 0x2318 <__fixsfsi+0x94>
    22d2:	8e e1       	ldi	r24, 0x1E	; 30
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	82 1b       	sub	r24, r18
    22d8:	93 0b       	sbc	r25, r19
    22da:	29 85       	ldd	r18, Y+9	; 0x09
    22dc:	3a 85       	ldd	r19, Y+10	; 0x0a
    22de:	4b 85       	ldd	r20, Y+11	; 0x0b
    22e0:	5c 85       	ldd	r21, Y+12	; 0x0c
    22e2:	04 c0       	rjmp	.+8      	; 0x22ec <__fixsfsi+0x68>
    22e4:	56 95       	lsr	r21
    22e6:	47 95       	ror	r20
    22e8:	37 95       	ror	r19
    22ea:	27 95       	ror	r18
    22ec:	8a 95       	dec	r24
    22ee:	d2 f7       	brpl	.-12     	; 0x22e4 <__fixsfsi+0x60>
    22f0:	66 23       	and	r22, r22
    22f2:	b1 f0       	breq	.+44     	; 0x2320 <__fixsfsi+0x9c>
    22f4:	50 95       	com	r21
    22f6:	40 95       	com	r20
    22f8:	30 95       	com	r19
    22fa:	21 95       	neg	r18
    22fc:	3f 4f       	sbci	r19, 0xFF	; 255
    22fe:	4f 4f       	sbci	r20, 0xFF	; 255
    2300:	5f 4f       	sbci	r21, 0xFF	; 255
    2302:	0e c0       	rjmp	.+28     	; 0x2320 <__fixsfsi+0x9c>
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	40 e0       	ldi	r20, 0x00	; 0
    230a:	50 e0       	ldi	r21, 0x00	; 0
    230c:	09 c0       	rjmp	.+18     	; 0x2320 <__fixsfsi+0x9c>
    230e:	2f ef       	ldi	r18, 0xFF	; 255
    2310:	3f ef       	ldi	r19, 0xFF	; 255
    2312:	4f ef       	ldi	r20, 0xFF	; 255
    2314:	5f e7       	ldi	r21, 0x7F	; 127
    2316:	04 c0       	rjmp	.+8      	; 0x2320 <__fixsfsi+0x9c>
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	40 e0       	ldi	r20, 0x00	; 0
    231e:	50 e8       	ldi	r21, 0x80	; 128
    2320:	b9 01       	movw	r22, r18
    2322:	ca 01       	movw	r24, r20
    2324:	2c 96       	adiw	r28, 0x0c	; 12
    2326:	e2 e0       	ldi	r30, 0x02	; 2
    2328:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <__epilogue_restores__+0x20>

0000232c <__floatunsisf>:
    232c:	a8 e0       	ldi	r26, 0x08	; 8
    232e:	b0 e0       	ldi	r27, 0x00	; 0
    2330:	ec e9       	ldi	r30, 0x9C	; 156
    2332:	f1 e1       	ldi	r31, 0x11	; 17
    2334:	0c 94 44 14 	jmp	0x2888	; 0x2888 <__prologue_saves__+0x14>
    2338:	7b 01       	movw	r14, r22
    233a:	8c 01       	movw	r16, r24
    233c:	61 15       	cp	r22, r1
    233e:	71 05       	cpc	r23, r1
    2340:	81 05       	cpc	r24, r1
    2342:	91 05       	cpc	r25, r1
    2344:	19 f4       	brne	.+6      	; 0x234c <__floatunsisf+0x20>
    2346:	82 e0       	ldi	r24, 0x02	; 2
    2348:	89 83       	std	Y+1, r24	; 0x01
    234a:	60 c0       	rjmp	.+192    	; 0x240c <__floatunsisf+0xe0>
    234c:	83 e0       	ldi	r24, 0x03	; 3
    234e:	89 83       	std	Y+1, r24	; 0x01
    2350:	8e e1       	ldi	r24, 0x1E	; 30
    2352:	c8 2e       	mov	r12, r24
    2354:	d1 2c       	mov	r13, r1
    2356:	dc 82       	std	Y+4, r13	; 0x04
    2358:	cb 82       	std	Y+3, r12	; 0x03
    235a:	ed 82       	std	Y+5, r14	; 0x05
    235c:	fe 82       	std	Y+6, r15	; 0x06
    235e:	0f 83       	std	Y+7, r16	; 0x07
    2360:	18 87       	std	Y+8, r17	; 0x08
    2362:	c8 01       	movw	r24, r16
    2364:	b7 01       	movw	r22, r14
    2366:	0e 94 0f 12 	call	0x241e	; 0x241e <__clzsi2>
    236a:	bc 01       	movw	r22, r24
    236c:	61 50       	subi	r22, 0x01	; 1
    236e:	70 40       	sbci	r23, 0x00	; 0
    2370:	77 ff       	sbrs	r23, 7
    2372:	39 c0       	rjmp	.+114    	; 0x23e6 <__floatunsisf+0xba>
    2374:	ee 27       	eor	r30, r30
    2376:	ff 27       	eor	r31, r31
    2378:	e6 1b       	sub	r30, r22
    237a:	f7 0b       	sbc	r31, r23
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	40 e0       	ldi	r20, 0x00	; 0
    2382:	50 e0       	ldi	r21, 0x00	; 0
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	a0 e0       	ldi	r26, 0x00	; 0
    238a:	b0 e0       	ldi	r27, 0x00	; 0
    238c:	0e 2e       	mov	r0, r30
    238e:	04 c0       	rjmp	.+8      	; 0x2398 <__floatunsisf+0x6c>
    2390:	88 0f       	add	r24, r24
    2392:	99 1f       	adc	r25, r25
    2394:	aa 1f       	adc	r26, r26
    2396:	bb 1f       	adc	r27, r27
    2398:	0a 94       	dec	r0
    239a:	d2 f7       	brpl	.-12     	; 0x2390 <__floatunsisf+0x64>
    239c:	01 97       	sbiw	r24, 0x01	; 1
    239e:	a1 09       	sbc	r26, r1
    23a0:	b1 09       	sbc	r27, r1
    23a2:	8e 21       	and	r24, r14
    23a4:	9f 21       	and	r25, r15
    23a6:	a0 23       	and	r26, r16
    23a8:	b1 23       	and	r27, r17
    23aa:	00 97       	sbiw	r24, 0x00	; 0
    23ac:	a1 05       	cpc	r26, r1
    23ae:	b1 05       	cpc	r27, r1
    23b0:	21 f0       	breq	.+8      	; 0x23ba <__floatunsisf+0x8e>
    23b2:	21 e0       	ldi	r18, 0x01	; 1
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	40 e0       	ldi	r20, 0x00	; 0
    23b8:	50 e0       	ldi	r21, 0x00	; 0
    23ba:	04 c0       	rjmp	.+8      	; 0x23c4 <__floatunsisf+0x98>
    23bc:	16 95       	lsr	r17
    23be:	07 95       	ror	r16
    23c0:	f7 94       	ror	r15
    23c2:	e7 94       	ror	r14
    23c4:	ea 95       	dec	r30
    23c6:	d2 f7       	brpl	.-12     	; 0x23bc <__floatunsisf+0x90>
    23c8:	2e 29       	or	r18, r14
    23ca:	3f 29       	or	r19, r15
    23cc:	40 2b       	or	r20, r16
    23ce:	51 2b       	or	r21, r17
    23d0:	2d 83       	std	Y+5, r18	; 0x05
    23d2:	3e 83       	std	Y+6, r19	; 0x06
    23d4:	4f 83       	std	Y+7, r20	; 0x07
    23d6:	58 87       	std	Y+8, r21	; 0x08
    23d8:	8e e1       	ldi	r24, 0x1E	; 30
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	86 1b       	sub	r24, r22
    23de:	97 0b       	sbc	r25, r23
    23e0:	9c 83       	std	Y+4, r25	; 0x04
    23e2:	8b 83       	std	Y+3, r24	; 0x03
    23e4:	13 c0       	rjmp	.+38     	; 0x240c <__floatunsisf+0xe0>
    23e6:	61 15       	cp	r22, r1
    23e8:	71 05       	cpc	r23, r1
    23ea:	81 f0       	breq	.+32     	; 0x240c <__floatunsisf+0xe0>
    23ec:	06 2e       	mov	r0, r22
    23ee:	04 c0       	rjmp	.+8      	; 0x23f8 <__floatunsisf+0xcc>
    23f0:	ee 0c       	add	r14, r14
    23f2:	ff 1c       	adc	r15, r15
    23f4:	00 1f       	adc	r16, r16
    23f6:	11 1f       	adc	r17, r17
    23f8:	0a 94       	dec	r0
    23fa:	d2 f7       	brpl	.-12     	; 0x23f0 <__floatunsisf+0xc4>
    23fc:	ed 82       	std	Y+5, r14	; 0x05
    23fe:	fe 82       	std	Y+6, r15	; 0x06
    2400:	0f 83       	std	Y+7, r16	; 0x07
    2402:	18 87       	std	Y+8, r17	; 0x08
    2404:	c6 1a       	sub	r12, r22
    2406:	d7 0a       	sbc	r13, r23
    2408:	dc 82       	std	Y+4, r13	; 0x04
    240a:	cb 82       	std	Y+3, r12	; 0x03
    240c:	1a 82       	std	Y+2, r1	; 0x02
    240e:	ce 01       	movw	r24, r28
    2410:	01 96       	adiw	r24, 0x01	; 1
    2412:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__pack_f>
    2416:	28 96       	adiw	r28, 0x08	; 8
    2418:	e8 e0       	ldi	r30, 0x08	; 8
    241a:	0c 94 60 14 	jmp	0x28c0	; 0x28c0 <__epilogue_restores__+0x14>

0000241e <__clzsi2>:
    241e:	ef 92       	push	r14
    2420:	ff 92       	push	r15
    2422:	0f 93       	push	r16
    2424:	1f 93       	push	r17
    2426:	7b 01       	movw	r14, r22
    2428:	8c 01       	movw	r16, r24
    242a:	80 e0       	ldi	r24, 0x00	; 0
    242c:	e8 16       	cp	r14, r24
    242e:	80 e0       	ldi	r24, 0x00	; 0
    2430:	f8 06       	cpc	r15, r24
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	08 07       	cpc	r16, r24
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	18 07       	cpc	r17, r24
    243a:	88 f4       	brcc	.+34     	; 0x245e <__clzsi2+0x40>
    243c:	8f ef       	ldi	r24, 0xFF	; 255
    243e:	e8 16       	cp	r14, r24
    2440:	f1 04       	cpc	r15, r1
    2442:	01 05       	cpc	r16, r1
    2444:	11 05       	cpc	r17, r1
    2446:	31 f0       	breq	.+12     	; 0x2454 <__clzsi2+0x36>
    2448:	28 f0       	brcs	.+10     	; 0x2454 <__clzsi2+0x36>
    244a:	88 e0       	ldi	r24, 0x08	; 8
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	a0 e0       	ldi	r26, 0x00	; 0
    2450:	b0 e0       	ldi	r27, 0x00	; 0
    2452:	17 c0       	rjmp	.+46     	; 0x2482 <__clzsi2+0x64>
    2454:	80 e0       	ldi	r24, 0x00	; 0
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	a0 e0       	ldi	r26, 0x00	; 0
    245a:	b0 e0       	ldi	r27, 0x00	; 0
    245c:	12 c0       	rjmp	.+36     	; 0x2482 <__clzsi2+0x64>
    245e:	80 e0       	ldi	r24, 0x00	; 0
    2460:	e8 16       	cp	r14, r24
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	f8 06       	cpc	r15, r24
    2466:	80 e0       	ldi	r24, 0x00	; 0
    2468:	08 07       	cpc	r16, r24
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	18 07       	cpc	r17, r24
    246e:	28 f0       	brcs	.+10     	; 0x247a <__clzsi2+0x5c>
    2470:	88 e1       	ldi	r24, 0x18	; 24
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	a0 e0       	ldi	r26, 0x00	; 0
    2476:	b0 e0       	ldi	r27, 0x00	; 0
    2478:	04 c0       	rjmp	.+8      	; 0x2482 <__clzsi2+0x64>
    247a:	80 e1       	ldi	r24, 0x10	; 16
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	a0 e0       	ldi	r26, 0x00	; 0
    2480:	b0 e0       	ldi	r27, 0x00	; 0
    2482:	20 e2       	ldi	r18, 0x20	; 32
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	40 e0       	ldi	r20, 0x00	; 0
    2488:	50 e0       	ldi	r21, 0x00	; 0
    248a:	28 1b       	sub	r18, r24
    248c:	39 0b       	sbc	r19, r25
    248e:	4a 0b       	sbc	r20, r26
    2490:	5b 0b       	sbc	r21, r27
    2492:	04 c0       	rjmp	.+8      	; 0x249c <__clzsi2+0x7e>
    2494:	16 95       	lsr	r17
    2496:	07 95       	ror	r16
    2498:	f7 94       	ror	r15
    249a:	e7 94       	ror	r14
    249c:	8a 95       	dec	r24
    249e:	d2 f7       	brpl	.-12     	; 0x2494 <__clzsi2+0x76>
    24a0:	f7 01       	movw	r30, r14
    24a2:	e2 59       	subi	r30, 0x92	; 146
    24a4:	fe 4f       	sbci	r31, 0xFE	; 254
    24a6:	80 81       	ld	r24, Z
    24a8:	28 1b       	sub	r18, r24
    24aa:	31 09       	sbc	r19, r1
    24ac:	41 09       	sbc	r20, r1
    24ae:	51 09       	sbc	r21, r1
    24b0:	c9 01       	movw	r24, r18
    24b2:	1f 91       	pop	r17
    24b4:	0f 91       	pop	r16
    24b6:	ff 90       	pop	r15
    24b8:	ef 90       	pop	r14
    24ba:	08 95       	ret

000024bc <__pack_f>:
    24bc:	df 92       	push	r13
    24be:	ef 92       	push	r14
    24c0:	ff 92       	push	r15
    24c2:	0f 93       	push	r16
    24c4:	1f 93       	push	r17
    24c6:	fc 01       	movw	r30, r24
    24c8:	e4 80       	ldd	r14, Z+4	; 0x04
    24ca:	f5 80       	ldd	r15, Z+5	; 0x05
    24cc:	06 81       	ldd	r16, Z+6	; 0x06
    24ce:	17 81       	ldd	r17, Z+7	; 0x07
    24d0:	d1 80       	ldd	r13, Z+1	; 0x01
    24d2:	80 81       	ld	r24, Z
    24d4:	82 30       	cpi	r24, 0x02	; 2
    24d6:	48 f4       	brcc	.+18     	; 0x24ea <__pack_f+0x2e>
    24d8:	80 e0       	ldi	r24, 0x00	; 0
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	a0 e1       	ldi	r26, 0x10	; 16
    24de:	b0 e0       	ldi	r27, 0x00	; 0
    24e0:	e8 2a       	or	r14, r24
    24e2:	f9 2a       	or	r15, r25
    24e4:	0a 2b       	or	r16, r26
    24e6:	1b 2b       	or	r17, r27
    24e8:	a5 c0       	rjmp	.+330    	; 0x2634 <__pack_f+0x178>
    24ea:	84 30       	cpi	r24, 0x04	; 4
    24ec:	09 f4       	brne	.+2      	; 0x24f0 <__pack_f+0x34>
    24ee:	9f c0       	rjmp	.+318    	; 0x262e <__pack_f+0x172>
    24f0:	82 30       	cpi	r24, 0x02	; 2
    24f2:	21 f4       	brne	.+8      	; 0x24fc <__pack_f+0x40>
    24f4:	ee 24       	eor	r14, r14
    24f6:	ff 24       	eor	r15, r15
    24f8:	87 01       	movw	r16, r14
    24fa:	05 c0       	rjmp	.+10     	; 0x2506 <__pack_f+0x4a>
    24fc:	e1 14       	cp	r14, r1
    24fe:	f1 04       	cpc	r15, r1
    2500:	01 05       	cpc	r16, r1
    2502:	11 05       	cpc	r17, r1
    2504:	19 f4       	brne	.+6      	; 0x250c <__pack_f+0x50>
    2506:	e0 e0       	ldi	r30, 0x00	; 0
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	96 c0       	rjmp	.+300    	; 0x2638 <__pack_f+0x17c>
    250c:	62 81       	ldd	r22, Z+2	; 0x02
    250e:	73 81       	ldd	r23, Z+3	; 0x03
    2510:	9f ef       	ldi	r25, 0xFF	; 255
    2512:	62 38       	cpi	r22, 0x82	; 130
    2514:	79 07       	cpc	r23, r25
    2516:	0c f0       	brlt	.+2      	; 0x251a <__pack_f+0x5e>
    2518:	5b c0       	rjmp	.+182    	; 0x25d0 <__pack_f+0x114>
    251a:	22 e8       	ldi	r18, 0x82	; 130
    251c:	3f ef       	ldi	r19, 0xFF	; 255
    251e:	26 1b       	sub	r18, r22
    2520:	37 0b       	sbc	r19, r23
    2522:	2a 31       	cpi	r18, 0x1A	; 26
    2524:	31 05       	cpc	r19, r1
    2526:	2c f0       	brlt	.+10     	; 0x2532 <__pack_f+0x76>
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	40 e0       	ldi	r20, 0x00	; 0
    252e:	50 e0       	ldi	r21, 0x00	; 0
    2530:	2a c0       	rjmp	.+84     	; 0x2586 <__pack_f+0xca>
    2532:	b8 01       	movw	r22, r16
    2534:	a7 01       	movw	r20, r14
    2536:	02 2e       	mov	r0, r18
    2538:	04 c0       	rjmp	.+8      	; 0x2542 <__pack_f+0x86>
    253a:	76 95       	lsr	r23
    253c:	67 95       	ror	r22
    253e:	57 95       	ror	r21
    2540:	47 95       	ror	r20
    2542:	0a 94       	dec	r0
    2544:	d2 f7       	brpl	.-12     	; 0x253a <__pack_f+0x7e>
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	a0 e0       	ldi	r26, 0x00	; 0
    254c:	b0 e0       	ldi	r27, 0x00	; 0
    254e:	04 c0       	rjmp	.+8      	; 0x2558 <__pack_f+0x9c>
    2550:	88 0f       	add	r24, r24
    2552:	99 1f       	adc	r25, r25
    2554:	aa 1f       	adc	r26, r26
    2556:	bb 1f       	adc	r27, r27
    2558:	2a 95       	dec	r18
    255a:	d2 f7       	brpl	.-12     	; 0x2550 <__pack_f+0x94>
    255c:	01 97       	sbiw	r24, 0x01	; 1
    255e:	a1 09       	sbc	r26, r1
    2560:	b1 09       	sbc	r27, r1
    2562:	8e 21       	and	r24, r14
    2564:	9f 21       	and	r25, r15
    2566:	a0 23       	and	r26, r16
    2568:	b1 23       	and	r27, r17
    256a:	00 97       	sbiw	r24, 0x00	; 0
    256c:	a1 05       	cpc	r26, r1
    256e:	b1 05       	cpc	r27, r1
    2570:	21 f0       	breq	.+8      	; 0x257a <__pack_f+0xbe>
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	a0 e0       	ldi	r26, 0x00	; 0
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	9a 01       	movw	r18, r20
    257c:	ab 01       	movw	r20, r22
    257e:	28 2b       	or	r18, r24
    2580:	39 2b       	or	r19, r25
    2582:	4a 2b       	or	r20, r26
    2584:	5b 2b       	or	r21, r27
    2586:	da 01       	movw	r26, r20
    2588:	c9 01       	movw	r24, r18
    258a:	8f 77       	andi	r24, 0x7F	; 127
    258c:	90 70       	andi	r25, 0x00	; 0
    258e:	a0 70       	andi	r26, 0x00	; 0
    2590:	b0 70       	andi	r27, 0x00	; 0
    2592:	80 34       	cpi	r24, 0x40	; 64
    2594:	91 05       	cpc	r25, r1
    2596:	a1 05       	cpc	r26, r1
    2598:	b1 05       	cpc	r27, r1
    259a:	39 f4       	brne	.+14     	; 0x25aa <__pack_f+0xee>
    259c:	27 ff       	sbrs	r18, 7
    259e:	09 c0       	rjmp	.+18     	; 0x25b2 <__pack_f+0xf6>
    25a0:	20 5c       	subi	r18, 0xC0	; 192
    25a2:	3f 4f       	sbci	r19, 0xFF	; 255
    25a4:	4f 4f       	sbci	r20, 0xFF	; 255
    25a6:	5f 4f       	sbci	r21, 0xFF	; 255
    25a8:	04 c0       	rjmp	.+8      	; 0x25b2 <__pack_f+0xf6>
    25aa:	21 5c       	subi	r18, 0xC1	; 193
    25ac:	3f 4f       	sbci	r19, 0xFF	; 255
    25ae:	4f 4f       	sbci	r20, 0xFF	; 255
    25b0:	5f 4f       	sbci	r21, 0xFF	; 255
    25b2:	e0 e0       	ldi	r30, 0x00	; 0
    25b4:	f0 e0       	ldi	r31, 0x00	; 0
    25b6:	20 30       	cpi	r18, 0x00	; 0
    25b8:	a0 e0       	ldi	r26, 0x00	; 0
    25ba:	3a 07       	cpc	r19, r26
    25bc:	a0 e0       	ldi	r26, 0x00	; 0
    25be:	4a 07       	cpc	r20, r26
    25c0:	a0 e4       	ldi	r26, 0x40	; 64
    25c2:	5a 07       	cpc	r21, r26
    25c4:	10 f0       	brcs	.+4      	; 0x25ca <__pack_f+0x10e>
    25c6:	e1 e0       	ldi	r30, 0x01	; 1
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	79 01       	movw	r14, r18
    25cc:	8a 01       	movw	r16, r20
    25ce:	27 c0       	rjmp	.+78     	; 0x261e <__pack_f+0x162>
    25d0:	60 38       	cpi	r22, 0x80	; 128
    25d2:	71 05       	cpc	r23, r1
    25d4:	64 f5       	brge	.+88     	; 0x262e <__pack_f+0x172>
    25d6:	fb 01       	movw	r30, r22
    25d8:	e1 58       	subi	r30, 0x81	; 129
    25da:	ff 4f       	sbci	r31, 0xFF	; 255
    25dc:	d8 01       	movw	r26, r16
    25de:	c7 01       	movw	r24, r14
    25e0:	8f 77       	andi	r24, 0x7F	; 127
    25e2:	90 70       	andi	r25, 0x00	; 0
    25e4:	a0 70       	andi	r26, 0x00	; 0
    25e6:	b0 70       	andi	r27, 0x00	; 0
    25e8:	80 34       	cpi	r24, 0x40	; 64
    25ea:	91 05       	cpc	r25, r1
    25ec:	a1 05       	cpc	r26, r1
    25ee:	b1 05       	cpc	r27, r1
    25f0:	39 f4       	brne	.+14     	; 0x2600 <__pack_f+0x144>
    25f2:	e7 fe       	sbrs	r14, 7
    25f4:	0d c0       	rjmp	.+26     	; 0x2610 <__pack_f+0x154>
    25f6:	80 e4       	ldi	r24, 0x40	; 64
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	a0 e0       	ldi	r26, 0x00	; 0
    25fc:	b0 e0       	ldi	r27, 0x00	; 0
    25fe:	04 c0       	rjmp	.+8      	; 0x2608 <__pack_f+0x14c>
    2600:	8f e3       	ldi	r24, 0x3F	; 63
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	a0 e0       	ldi	r26, 0x00	; 0
    2606:	b0 e0       	ldi	r27, 0x00	; 0
    2608:	e8 0e       	add	r14, r24
    260a:	f9 1e       	adc	r15, r25
    260c:	0a 1f       	adc	r16, r26
    260e:	1b 1f       	adc	r17, r27
    2610:	17 ff       	sbrs	r17, 7
    2612:	05 c0       	rjmp	.+10     	; 0x261e <__pack_f+0x162>
    2614:	16 95       	lsr	r17
    2616:	07 95       	ror	r16
    2618:	f7 94       	ror	r15
    261a:	e7 94       	ror	r14
    261c:	31 96       	adiw	r30, 0x01	; 1
    261e:	87 e0       	ldi	r24, 0x07	; 7
    2620:	16 95       	lsr	r17
    2622:	07 95       	ror	r16
    2624:	f7 94       	ror	r15
    2626:	e7 94       	ror	r14
    2628:	8a 95       	dec	r24
    262a:	d1 f7       	brne	.-12     	; 0x2620 <__pack_f+0x164>
    262c:	05 c0       	rjmp	.+10     	; 0x2638 <__pack_f+0x17c>
    262e:	ee 24       	eor	r14, r14
    2630:	ff 24       	eor	r15, r15
    2632:	87 01       	movw	r16, r14
    2634:	ef ef       	ldi	r30, 0xFF	; 255
    2636:	f0 e0       	ldi	r31, 0x00	; 0
    2638:	6e 2f       	mov	r22, r30
    263a:	67 95       	ror	r22
    263c:	66 27       	eor	r22, r22
    263e:	67 95       	ror	r22
    2640:	90 2f       	mov	r25, r16
    2642:	9f 77       	andi	r25, 0x7F	; 127
    2644:	d7 94       	ror	r13
    2646:	dd 24       	eor	r13, r13
    2648:	d7 94       	ror	r13
    264a:	8e 2f       	mov	r24, r30
    264c:	86 95       	lsr	r24
    264e:	49 2f       	mov	r20, r25
    2650:	46 2b       	or	r20, r22
    2652:	58 2f       	mov	r21, r24
    2654:	5d 29       	or	r21, r13
    2656:	b7 01       	movw	r22, r14
    2658:	ca 01       	movw	r24, r20
    265a:	1f 91       	pop	r17
    265c:	0f 91       	pop	r16
    265e:	ff 90       	pop	r15
    2660:	ef 90       	pop	r14
    2662:	df 90       	pop	r13
    2664:	08 95       	ret

00002666 <__unpack_f>:
    2666:	fc 01       	movw	r30, r24
    2668:	db 01       	movw	r26, r22
    266a:	40 81       	ld	r20, Z
    266c:	51 81       	ldd	r21, Z+1	; 0x01
    266e:	22 81       	ldd	r18, Z+2	; 0x02
    2670:	62 2f       	mov	r22, r18
    2672:	6f 77       	andi	r22, 0x7F	; 127
    2674:	70 e0       	ldi	r23, 0x00	; 0
    2676:	22 1f       	adc	r18, r18
    2678:	22 27       	eor	r18, r18
    267a:	22 1f       	adc	r18, r18
    267c:	93 81       	ldd	r25, Z+3	; 0x03
    267e:	89 2f       	mov	r24, r25
    2680:	88 0f       	add	r24, r24
    2682:	82 2b       	or	r24, r18
    2684:	28 2f       	mov	r18, r24
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	99 1f       	adc	r25, r25
    268a:	99 27       	eor	r25, r25
    268c:	99 1f       	adc	r25, r25
    268e:	11 96       	adiw	r26, 0x01	; 1
    2690:	9c 93       	st	X, r25
    2692:	11 97       	sbiw	r26, 0x01	; 1
    2694:	21 15       	cp	r18, r1
    2696:	31 05       	cpc	r19, r1
    2698:	a9 f5       	brne	.+106    	; 0x2704 <__unpack_f+0x9e>
    269a:	41 15       	cp	r20, r1
    269c:	51 05       	cpc	r21, r1
    269e:	61 05       	cpc	r22, r1
    26a0:	71 05       	cpc	r23, r1
    26a2:	11 f4       	brne	.+4      	; 0x26a8 <__unpack_f+0x42>
    26a4:	82 e0       	ldi	r24, 0x02	; 2
    26a6:	37 c0       	rjmp	.+110    	; 0x2716 <__unpack_f+0xb0>
    26a8:	82 e8       	ldi	r24, 0x82	; 130
    26aa:	9f ef       	ldi	r25, 0xFF	; 255
    26ac:	13 96       	adiw	r26, 0x03	; 3
    26ae:	9c 93       	st	X, r25
    26b0:	8e 93       	st	-X, r24
    26b2:	12 97       	sbiw	r26, 0x02	; 2
    26b4:	9a 01       	movw	r18, r20
    26b6:	ab 01       	movw	r20, r22
    26b8:	67 e0       	ldi	r22, 0x07	; 7
    26ba:	22 0f       	add	r18, r18
    26bc:	33 1f       	adc	r19, r19
    26be:	44 1f       	adc	r20, r20
    26c0:	55 1f       	adc	r21, r21
    26c2:	6a 95       	dec	r22
    26c4:	d1 f7       	brne	.-12     	; 0x26ba <__unpack_f+0x54>
    26c6:	83 e0       	ldi	r24, 0x03	; 3
    26c8:	8c 93       	st	X, r24
    26ca:	0d c0       	rjmp	.+26     	; 0x26e6 <__unpack_f+0x80>
    26cc:	22 0f       	add	r18, r18
    26ce:	33 1f       	adc	r19, r19
    26d0:	44 1f       	adc	r20, r20
    26d2:	55 1f       	adc	r21, r21
    26d4:	12 96       	adiw	r26, 0x02	; 2
    26d6:	8d 91       	ld	r24, X+
    26d8:	9c 91       	ld	r25, X
    26da:	13 97       	sbiw	r26, 0x03	; 3
    26dc:	01 97       	sbiw	r24, 0x01	; 1
    26de:	13 96       	adiw	r26, 0x03	; 3
    26e0:	9c 93       	st	X, r25
    26e2:	8e 93       	st	-X, r24
    26e4:	12 97       	sbiw	r26, 0x02	; 2
    26e6:	20 30       	cpi	r18, 0x00	; 0
    26e8:	80 e0       	ldi	r24, 0x00	; 0
    26ea:	38 07       	cpc	r19, r24
    26ec:	80 e0       	ldi	r24, 0x00	; 0
    26ee:	48 07       	cpc	r20, r24
    26f0:	80 e4       	ldi	r24, 0x40	; 64
    26f2:	58 07       	cpc	r21, r24
    26f4:	58 f3       	brcs	.-42     	; 0x26cc <__unpack_f+0x66>
    26f6:	14 96       	adiw	r26, 0x04	; 4
    26f8:	2d 93       	st	X+, r18
    26fa:	3d 93       	st	X+, r19
    26fc:	4d 93       	st	X+, r20
    26fe:	5c 93       	st	X, r21
    2700:	17 97       	sbiw	r26, 0x07	; 7
    2702:	08 95       	ret
    2704:	2f 3f       	cpi	r18, 0xFF	; 255
    2706:	31 05       	cpc	r19, r1
    2708:	79 f4       	brne	.+30     	; 0x2728 <__unpack_f+0xc2>
    270a:	41 15       	cp	r20, r1
    270c:	51 05       	cpc	r21, r1
    270e:	61 05       	cpc	r22, r1
    2710:	71 05       	cpc	r23, r1
    2712:	19 f4       	brne	.+6      	; 0x271a <__unpack_f+0xb4>
    2714:	84 e0       	ldi	r24, 0x04	; 4
    2716:	8c 93       	st	X, r24
    2718:	08 95       	ret
    271a:	64 ff       	sbrs	r22, 4
    271c:	03 c0       	rjmp	.+6      	; 0x2724 <__unpack_f+0xbe>
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	8c 93       	st	X, r24
    2722:	12 c0       	rjmp	.+36     	; 0x2748 <__unpack_f+0xe2>
    2724:	1c 92       	st	X, r1
    2726:	10 c0       	rjmp	.+32     	; 0x2748 <__unpack_f+0xe2>
    2728:	2f 57       	subi	r18, 0x7F	; 127
    272a:	30 40       	sbci	r19, 0x00	; 0
    272c:	13 96       	adiw	r26, 0x03	; 3
    272e:	3c 93       	st	X, r19
    2730:	2e 93       	st	-X, r18
    2732:	12 97       	sbiw	r26, 0x02	; 2
    2734:	83 e0       	ldi	r24, 0x03	; 3
    2736:	8c 93       	st	X, r24
    2738:	87 e0       	ldi	r24, 0x07	; 7
    273a:	44 0f       	add	r20, r20
    273c:	55 1f       	adc	r21, r21
    273e:	66 1f       	adc	r22, r22
    2740:	77 1f       	adc	r23, r23
    2742:	8a 95       	dec	r24
    2744:	d1 f7       	brne	.-12     	; 0x273a <__unpack_f+0xd4>
    2746:	70 64       	ori	r23, 0x40	; 64
    2748:	14 96       	adiw	r26, 0x04	; 4
    274a:	4d 93       	st	X+, r20
    274c:	5d 93       	st	X+, r21
    274e:	6d 93       	st	X+, r22
    2750:	7c 93       	st	X, r23
    2752:	17 97       	sbiw	r26, 0x07	; 7
    2754:	08 95       	ret

00002756 <__fpcmp_parts_f>:
    2756:	1f 93       	push	r17
    2758:	dc 01       	movw	r26, r24
    275a:	fb 01       	movw	r30, r22
    275c:	9c 91       	ld	r25, X
    275e:	92 30       	cpi	r25, 0x02	; 2
    2760:	08 f4       	brcc	.+2      	; 0x2764 <__fpcmp_parts_f+0xe>
    2762:	47 c0       	rjmp	.+142    	; 0x27f2 <__fpcmp_parts_f+0x9c>
    2764:	80 81       	ld	r24, Z
    2766:	82 30       	cpi	r24, 0x02	; 2
    2768:	08 f4       	brcc	.+2      	; 0x276c <__fpcmp_parts_f+0x16>
    276a:	43 c0       	rjmp	.+134    	; 0x27f2 <__fpcmp_parts_f+0x9c>
    276c:	94 30       	cpi	r25, 0x04	; 4
    276e:	51 f4       	brne	.+20     	; 0x2784 <__fpcmp_parts_f+0x2e>
    2770:	11 96       	adiw	r26, 0x01	; 1
    2772:	1c 91       	ld	r17, X
    2774:	84 30       	cpi	r24, 0x04	; 4
    2776:	99 f5       	brne	.+102    	; 0x27de <__fpcmp_parts_f+0x88>
    2778:	81 81       	ldd	r24, Z+1	; 0x01
    277a:	68 2f       	mov	r22, r24
    277c:	70 e0       	ldi	r23, 0x00	; 0
    277e:	61 1b       	sub	r22, r17
    2780:	71 09       	sbc	r23, r1
    2782:	3f c0       	rjmp	.+126    	; 0x2802 <__fpcmp_parts_f+0xac>
    2784:	84 30       	cpi	r24, 0x04	; 4
    2786:	21 f0       	breq	.+8      	; 0x2790 <__fpcmp_parts_f+0x3a>
    2788:	92 30       	cpi	r25, 0x02	; 2
    278a:	31 f4       	brne	.+12     	; 0x2798 <__fpcmp_parts_f+0x42>
    278c:	82 30       	cpi	r24, 0x02	; 2
    278e:	b9 f1       	breq	.+110    	; 0x27fe <__fpcmp_parts_f+0xa8>
    2790:	81 81       	ldd	r24, Z+1	; 0x01
    2792:	88 23       	and	r24, r24
    2794:	89 f1       	breq	.+98     	; 0x27f8 <__fpcmp_parts_f+0xa2>
    2796:	2d c0       	rjmp	.+90     	; 0x27f2 <__fpcmp_parts_f+0x9c>
    2798:	11 96       	adiw	r26, 0x01	; 1
    279a:	1c 91       	ld	r17, X
    279c:	11 97       	sbiw	r26, 0x01	; 1
    279e:	82 30       	cpi	r24, 0x02	; 2
    27a0:	f1 f0       	breq	.+60     	; 0x27de <__fpcmp_parts_f+0x88>
    27a2:	81 81       	ldd	r24, Z+1	; 0x01
    27a4:	18 17       	cp	r17, r24
    27a6:	d9 f4       	brne	.+54     	; 0x27de <__fpcmp_parts_f+0x88>
    27a8:	12 96       	adiw	r26, 0x02	; 2
    27aa:	2d 91       	ld	r18, X+
    27ac:	3c 91       	ld	r19, X
    27ae:	13 97       	sbiw	r26, 0x03	; 3
    27b0:	82 81       	ldd	r24, Z+2	; 0x02
    27b2:	93 81       	ldd	r25, Z+3	; 0x03
    27b4:	82 17       	cp	r24, r18
    27b6:	93 07       	cpc	r25, r19
    27b8:	94 f0       	brlt	.+36     	; 0x27de <__fpcmp_parts_f+0x88>
    27ba:	28 17       	cp	r18, r24
    27bc:	39 07       	cpc	r19, r25
    27be:	bc f0       	brlt	.+46     	; 0x27ee <__fpcmp_parts_f+0x98>
    27c0:	14 96       	adiw	r26, 0x04	; 4
    27c2:	8d 91       	ld	r24, X+
    27c4:	9d 91       	ld	r25, X+
    27c6:	0d 90       	ld	r0, X+
    27c8:	bc 91       	ld	r27, X
    27ca:	a0 2d       	mov	r26, r0
    27cc:	24 81       	ldd	r18, Z+4	; 0x04
    27ce:	35 81       	ldd	r19, Z+5	; 0x05
    27d0:	46 81       	ldd	r20, Z+6	; 0x06
    27d2:	57 81       	ldd	r21, Z+7	; 0x07
    27d4:	28 17       	cp	r18, r24
    27d6:	39 07       	cpc	r19, r25
    27d8:	4a 07       	cpc	r20, r26
    27da:	5b 07       	cpc	r21, r27
    27dc:	18 f4       	brcc	.+6      	; 0x27e4 <__fpcmp_parts_f+0x8e>
    27de:	11 23       	and	r17, r17
    27e0:	41 f0       	breq	.+16     	; 0x27f2 <__fpcmp_parts_f+0x9c>
    27e2:	0a c0       	rjmp	.+20     	; 0x27f8 <__fpcmp_parts_f+0xa2>
    27e4:	82 17       	cp	r24, r18
    27e6:	93 07       	cpc	r25, r19
    27e8:	a4 07       	cpc	r26, r20
    27ea:	b5 07       	cpc	r27, r21
    27ec:	40 f4       	brcc	.+16     	; 0x27fe <__fpcmp_parts_f+0xa8>
    27ee:	11 23       	and	r17, r17
    27f0:	19 f0       	breq	.+6      	; 0x27f8 <__fpcmp_parts_f+0xa2>
    27f2:	61 e0       	ldi	r22, 0x01	; 1
    27f4:	70 e0       	ldi	r23, 0x00	; 0
    27f6:	05 c0       	rjmp	.+10     	; 0x2802 <__fpcmp_parts_f+0xac>
    27f8:	6f ef       	ldi	r22, 0xFF	; 255
    27fa:	7f ef       	ldi	r23, 0xFF	; 255
    27fc:	02 c0       	rjmp	.+4      	; 0x2802 <__fpcmp_parts_f+0xac>
    27fe:	60 e0       	ldi	r22, 0x00	; 0
    2800:	70 e0       	ldi	r23, 0x00	; 0
    2802:	cb 01       	movw	r24, r22
    2804:	1f 91       	pop	r17
    2806:	08 95       	ret

00002808 <__udivmodhi4>:
    2808:	aa 1b       	sub	r26, r26
    280a:	bb 1b       	sub	r27, r27
    280c:	51 e1       	ldi	r21, 0x11	; 17
    280e:	07 c0       	rjmp	.+14     	; 0x281e <__udivmodhi4_ep>

00002810 <__udivmodhi4_loop>:
    2810:	aa 1f       	adc	r26, r26
    2812:	bb 1f       	adc	r27, r27
    2814:	a6 17       	cp	r26, r22
    2816:	b7 07       	cpc	r27, r23
    2818:	10 f0       	brcs	.+4      	; 0x281e <__udivmodhi4_ep>
    281a:	a6 1b       	sub	r26, r22
    281c:	b7 0b       	sbc	r27, r23

0000281e <__udivmodhi4_ep>:
    281e:	88 1f       	adc	r24, r24
    2820:	99 1f       	adc	r25, r25
    2822:	5a 95       	dec	r21
    2824:	a9 f7       	brne	.-22     	; 0x2810 <__udivmodhi4_loop>
    2826:	80 95       	com	r24
    2828:	90 95       	com	r25
    282a:	bc 01       	movw	r22, r24
    282c:	cd 01       	movw	r24, r26
    282e:	08 95       	ret

00002830 <__udivmodsi4>:
    2830:	a1 e2       	ldi	r26, 0x21	; 33
    2832:	1a 2e       	mov	r1, r26
    2834:	aa 1b       	sub	r26, r26
    2836:	bb 1b       	sub	r27, r27
    2838:	fd 01       	movw	r30, r26
    283a:	0d c0       	rjmp	.+26     	; 0x2856 <__udivmodsi4_ep>

0000283c <__udivmodsi4_loop>:
    283c:	aa 1f       	adc	r26, r26
    283e:	bb 1f       	adc	r27, r27
    2840:	ee 1f       	adc	r30, r30
    2842:	ff 1f       	adc	r31, r31
    2844:	a2 17       	cp	r26, r18
    2846:	b3 07       	cpc	r27, r19
    2848:	e4 07       	cpc	r30, r20
    284a:	f5 07       	cpc	r31, r21
    284c:	20 f0       	brcs	.+8      	; 0x2856 <__udivmodsi4_ep>
    284e:	a2 1b       	sub	r26, r18
    2850:	b3 0b       	sbc	r27, r19
    2852:	e4 0b       	sbc	r30, r20
    2854:	f5 0b       	sbc	r31, r21

00002856 <__udivmodsi4_ep>:
    2856:	66 1f       	adc	r22, r22
    2858:	77 1f       	adc	r23, r23
    285a:	88 1f       	adc	r24, r24
    285c:	99 1f       	adc	r25, r25
    285e:	1a 94       	dec	r1
    2860:	69 f7       	brne	.-38     	; 0x283c <__udivmodsi4_loop>
    2862:	60 95       	com	r22
    2864:	70 95       	com	r23
    2866:	80 95       	com	r24
    2868:	90 95       	com	r25
    286a:	9b 01       	movw	r18, r22
    286c:	ac 01       	movw	r20, r24
    286e:	bd 01       	movw	r22, r26
    2870:	cf 01       	movw	r24, r30
    2872:	08 95       	ret

00002874 <__prologue_saves__>:
    2874:	2f 92       	push	r2
    2876:	3f 92       	push	r3
    2878:	4f 92       	push	r4
    287a:	5f 92       	push	r5
    287c:	6f 92       	push	r6
    287e:	7f 92       	push	r7
    2880:	8f 92       	push	r8
    2882:	9f 92       	push	r9
    2884:	af 92       	push	r10
    2886:	bf 92       	push	r11
    2888:	cf 92       	push	r12
    288a:	df 92       	push	r13
    288c:	ef 92       	push	r14
    288e:	ff 92       	push	r15
    2890:	0f 93       	push	r16
    2892:	1f 93       	push	r17
    2894:	cf 93       	push	r28
    2896:	df 93       	push	r29
    2898:	cd b7       	in	r28, 0x3d	; 61
    289a:	de b7       	in	r29, 0x3e	; 62
    289c:	ca 1b       	sub	r28, r26
    289e:	db 0b       	sbc	r29, r27
    28a0:	0f b6       	in	r0, 0x3f	; 63
    28a2:	f8 94       	cli
    28a4:	de bf       	out	0x3e, r29	; 62
    28a6:	0f be       	out	0x3f, r0	; 63
    28a8:	cd bf       	out	0x3d, r28	; 61
    28aa:	09 94       	ijmp

000028ac <__epilogue_restores__>:
    28ac:	2a 88       	ldd	r2, Y+18	; 0x12
    28ae:	39 88       	ldd	r3, Y+17	; 0x11
    28b0:	48 88       	ldd	r4, Y+16	; 0x10
    28b2:	5f 84       	ldd	r5, Y+15	; 0x0f
    28b4:	6e 84       	ldd	r6, Y+14	; 0x0e
    28b6:	7d 84       	ldd	r7, Y+13	; 0x0d
    28b8:	8c 84       	ldd	r8, Y+12	; 0x0c
    28ba:	9b 84       	ldd	r9, Y+11	; 0x0b
    28bc:	aa 84       	ldd	r10, Y+10	; 0x0a
    28be:	b9 84       	ldd	r11, Y+9	; 0x09
    28c0:	c8 84       	ldd	r12, Y+8	; 0x08
    28c2:	df 80       	ldd	r13, Y+7	; 0x07
    28c4:	ee 80       	ldd	r14, Y+6	; 0x06
    28c6:	fd 80       	ldd	r15, Y+5	; 0x05
    28c8:	0c 81       	ldd	r16, Y+4	; 0x04
    28ca:	1b 81       	ldd	r17, Y+3	; 0x03
    28cc:	aa 81       	ldd	r26, Y+2	; 0x02
    28ce:	b9 81       	ldd	r27, Y+1	; 0x01
    28d0:	ce 0f       	add	r28, r30
    28d2:	d1 1d       	adc	r29, r1
    28d4:	0f b6       	in	r0, 0x3f	; 63
    28d6:	f8 94       	cli
    28d8:	de bf       	out	0x3e, r29	; 62
    28da:	0f be       	out	0x3f, r0	; 63
    28dc:	cd bf       	out	0x3d, r28	; 61
    28de:	ed 01       	movw	r28, r26
    28e0:	08 95       	ret

000028e2 <square>:
    28e2:	9b 01       	movw	r18, r22
    28e4:	ac 01       	movw	r20, r24
    28e6:	0c ca       	rjmp	.-3048   	; 0x1d00 <__mulsf3>

000028e8 <_exit>:
    28e8:	f8 94       	cli

000028ea <__stop_program>:
    28ea:	ff cf       	rjmp	.-2      	; 0x28ea <__stop_program>
